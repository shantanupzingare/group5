namespace Sharemodel
{
    public class Request
    {
        public string? Action { get; set; }
        public object? Payload { get; set; }
    }
    public class LoginPayload
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
    public class Studentpayload
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? Subject { get; set; }
        public int? Marks { get; set; }
    }
}



using System.Net.Sockets;
using System.Text;
using Newtonsoft.Json;

namespace UserInterface.Services
{
    public class TcpService
    {
        public static string SendRequest(object request)
        {
            var json = JsonConvert.SerializeObject(request);
            using TcpClient client = new TcpClient("127.0.0.1", 8888);
            NetworkStream stream = client.GetStream();
            byte[] data = Encoding.UTF8.GetBytes(json);
            stream.Write(data, 0, data.Length);

            byte[] buffer = new byte[4096];
            int read = stream.Read(buffer, 0, buffer.Length);
            return Encoding.UTF8.GetString(buffer, 0, read);
        }
    }
}



using Sharemodel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UserInterface.Services;

namespace UserInterface.ViewModels
{
   public class LoginViewModel
{
    public string? Username { get; set; }
    public string? Password { get; set; }

    public string Login()
    {
        var req = new Request
        {
            Action = "LOGIN",
            Payload = new LoginPayload { Username = Username, Password = Password }
        };
        return TcpService.SendRequest(req);
    }
}
}



using Sharemodel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UserInterface.Services;

namespace UserInterface.ViewModels
{
    public class StudentViewModel
   {
    public Studentpayload Student { get; set; } = new Studentpayload();

    public string Insert() => Send("INSERT");
    public string Update() => Send("UPDATE");
    public string Delete() => Send("DELETE");

        public string Fetch() => Send("FETCH");

    private string Send(string action)
    {
        var req = new Request
        {
            Action = action,
            Payload = Student
        };
        return TcpService.SendRequest(req);
    }
}

}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using UserInterface.ViewModels;

namespace UserInterface
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        private void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new LoginViewModel { Username = txtUser.Text, Password = txtPass.Password };
            var result = vm.Login();
            MessageBox.Show(result);
            if (result == "LOGIN_SUCCESS")
            {
                StudentWindow win = new StudentWindow();
                win.Show();
                this.Close();
            }
        }
    }
}


<Window x:Class="UserInterface.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Login" Height="330" Width="350" Background="#f7f7f7"
        WindowStartupLocation="CenterScreen">
    <Border BorderBrush="#ccc" BorderThickness="1" CornerRadius="10" Margin="10" Padding="20" Background="White">
        <StackPanel>
            <TextBlock Text="Login" FontSize="20" FontWeight="Bold" Margin="0,0,0,15" HorizontalAlignment="Center" Foreground="#333"/>

            <TextBlock Text="Username" FontWeight="SemiBold" Foreground="#666" Margin="0,5,0,2"/>
            <TextBox x:Name="txtUser" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Password" FontWeight="SemiBold" Foreground="#666" Margin="0,10,0,2"/>
            <PasswordBox x:Name="txtPass" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <Button Content="Login" Click="LoginButton_Click" Height="35" Margin="0,20,0,0"
                    Background="#0078D7" Foreground="White" FontWeight="Bold" BorderBrush="#0078D7"/>
        </StackPanel>
    </Border>
</Window>




using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using UserInterface.ViewModels;

namespace UserInterface
{
    /// <summary>
    /// Interaction logic for StudentWindow.xaml
    /// </summary>
    public partial class StudentWindow : Window
    {
        public ObservableCollection<StudentViewModel> Students { get; set; } = new ObservableCollection<StudentViewModel>();
        public StudentWindow()
        {
            InitializeComponent();
            dgStudents.ItemsSource= Students;
        }
        private void InsertButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            vm.Student.Name = txtName.Text;
            vm.Student.Email = txtEmail.Text;
            vm.Student.Subject = txtSubject.Text;
            vm.Student.Marks = int.Parse(txtMarks.Text);
            MessageBox.Show(vm.Insert());
        }

        private void UpdateButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            vm.Student.Name = txtName.Text;
            vm.Student.Email = txtEmail.Text;
            vm.Student.Subject = txtSubject.Text;
            vm.Student.Marks = int.Parse(txtMarks.Text);
            MessageBox.Show(vm.Update());
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            MessageBox.Show(vm.Delete());
        }
        private void FetchButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            string jsonResponse = vm.Fetch();

            try
            {
                var studentList = JsonConvert.DeserializeObject<List<Sharemodel.Studentpayload>>(jsonResponse);

                if (studentList != null)
                {
                    Students.Clear();
                    foreach (var s in studentList)
                    {
                        Students.Add(new StudentViewModel { Student = s });
                    }
                    MessageBox.Show("Data fetched successfully!");
                }
                else
                {
                    MessageBox.Show("No student data received.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error parsing student data: {ex.Message}");
            }
        }

    }
}


<Window x:Class="UserInterface.StudentWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Student Form" Height="600" Width="600" Background="#f7f7f7"
        WindowStartupLocation="CenterScreen">
    <Border BorderBrush="#ccc" BorderThickness="1" CornerRadius="10" Margin="10" Padding="20" Background="White">
        <StackPanel>
            <TextBlock Text="Student Form" FontSize="22" FontWeight="Bold" Margin="0,0,0,15" HorizontalAlignment="Center" Foreground="#333"/>

            <TextBlock Text="Student ID" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtId" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Name" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtName" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Email" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtEmail" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Subject" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtSubject" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Marks" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtMarks" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <StackPanel Orientation="Horizontal" Margin="0,20,0,10" HorizontalAlignment="Center">
                <Button Content="Insert" Click="InsertButton_Click" Width="75" Margin="10,0"
                        Background="#28a745" Foreground="White" FontWeight="Bold" BorderBrush="#28a745"/>
                <Button Content="Update" Click="UpdateButton_Click" Width="75" Margin="10,0"
                        Background="#ffc107" Foreground="Black" FontWeight="Bold" BorderBrush="#ffc107"/>
                <Button Content="Delete" Click="DeleteButton_Click" Width="75" Margin="10,0"
                        Background="#dc3545" Foreground="White" FontWeight="Bold" BorderBrush="#dc3545"/>
                <Button Content="Fetch" Click="FetchButton_Click" Width="75" Margin="10,0"
                        Background="#007bff" Foreground="White" FontWeight="Bold" BorderBrush="#007bff"/>
            </StackPanel>

            <DataGrid x:Name="dgStudents" AutoGenerateColumns="False" Height="250" Margin="0,10,0,0" CanUserAddRows="False" IsReadOnly="True" >
                <DataGrid.Columns>
                    <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="Auto"/>
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                    <DataGridTextColumn Header="Email" Binding="{Binding Email}" Width="*"/>
                    <DataGridTextColumn Header="Subject" Binding="{Binding Subject}" Width="*"/>
                    <DataGridTextColumn Header="Marks" Binding="{Binding Marks}" Width="Auto"/>
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Border>
</Window>




using System.Net.Sockets;
using System.Text;
using Newtonsoft.Json;

namespace UserInterface.Services
{
    public class TcpService
    {
        public static string SendRequest(object request)
        {
            var json = JsonConvert.SerializeObject(request);
            using TcpClient client = new TcpClient("127.0.0.1", 8888);
            NetworkStream stream = client.GetStream();
            byte[] data = Encoding.UTF8.GetBytes(json);
            stream.Write(data, 0, data.Length);

            byte[] buffer = new byte[4096];
            int read = stream.Read(buffer, 0, buffer.Length);
            return Encoding.UTF8.GetString(buffer, 0, read);
        }
    }
}






using BinaryProtocol.Common;
using ConsumerDBComponent.Common;
using CTCL.BinaryProtocol.Common.CTCL.Common;
using CTCL.BinaryProtocol.Common.CTCL.DBWrite;
using CTCL.BinaryProtocol.Common.CTCL.Request.EnterpriseMaster.ClientParticipant;
using CTCL.CacheManagement.Models;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.InteropServices;
using Utility;

namespace ConsumerDBComponent.MessageProcessor
{
	public class ClientParticipantMappingProcessor
	{
		private Conversion conversion;
		private SqlConnection? PersistSqlConn;
		private SqlTransaction? tran; 
		public ClientParticipantMappingProcessor()
		{
			conversion = new Conversion();
		}


		#region Client participant mapping

		public Response ProcessClientParticipantMappingDBRequest(CTCL_CLIENT_PARTICIPANT_MASTER_UPDATE clientParticipantMappingRequest)
		{
			Response response = new();
			try
			{
				var mappingData = GetClientParticipantMappingData(clientParticipantMappingRequest.NoOfRecordsofParticipant, clientParticipantMappingRequest.EMData);
				var dataTable = CreateDataTable();
				for (int i = 0; i < mappingData.Count; i++)
				{
					DataRow DR = dataTable.NewRow();
					DR[0] = clientParticipantMappingRequest.ExchangeSegmentId.SegmentId;
					DR[1] = clientParticipantMappingRequest.ClientId.TerminalId;
					DR[2] = mappingData[i].ParticipantId.ParticipantId;
					DR[3] = clientParticipantMappingRequest.CommonMasterAttributes.LastUpdatedBy.id;
					DR[4] = clientParticipantMappingRequest.CommonMasterAttributes.LastUpdatedTime.TimeStamp;

					if (mappingData[i].OperationMode == CTCL.BinaryProtocol.Common.CTCL.Enum.CTCL_OperationMode.ADD)
					{
						DR[5] = "ClientParticipantMappingAdd".ToCharArray();
						DR[6] = 1;
					}
					else
					{
						DR[5] = "ClientParticipantMappingRemove".ToCharArray();
						DR[6] = 0;
					}
					DR[7] = 0;
					dataTable.Rows.Add(DR);
				}
				if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
				{
					PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
					PersistSqlConn.Open();
				}

				using (tran = PersistSqlConn.BeginTransaction(IsolationLevel.ReadCommitted))
				{
					using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
					{
						using (SqlCommand cmd = new SqlCommand("[dbo].[usp_ClientParticipantMappingMaster_insupd]"))
						{
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.Connection = con;
							cmd.Parameters.AddWithValue("@ClientParticipantMappingMaster", dataTable);
							con.Open();
							cmd.ExecuteNonQuery();
							con.Close();
						}
					}
					tran.Commit();
				}
				Log.Info("Client participant mapping data saved to Database ");
				response.Set(StatusCode.Success, "Client participant mapping Data uploaded Sucessfully");
			}
			catch (Exception ex)
			{
				Log.Error(ex, "Client participant mapping data couldn't save  to Database");
				response.Set(StatusCode.Failure, "Error Occured at Client participant mapping Data Insert :" + ex.Message);
			}
			return response;
		}

		private DataTable CreateDataTable()
		{
			DataTable dt = new DataTable();
			// Adding Columns    
			DataColumn COLUMN = new DataColumn();
			COLUMN.ColumnName = "ExchangeSegmentId";
			COLUMN.DataType = typeof(int);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "ClientId";
			COLUMN.DataType = typeof(char[]);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "ParticipantId";
			COLUMN.DataType = typeof(char[]);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "LastUpdatedBy";
			COLUMN.DataType = typeof(long);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "LastUpdatedOn";
			COLUMN.DataType = typeof(long);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "Remarks";
			COLUMN.DataType = typeof(char[]);
			dt.Columns.Add(COLUMN);

			COLUMN = new DataColumn();
			COLUMN.ColumnName = "intStatus";
			COLUMN.DataType = typeof(long);
			dt.Columns.Add(COLUMN);
			
			COLUMN = new DataColumn();
			COLUMN.ColumnName = "IsDefault";
			COLUMN.DataType = typeof(long);
			dt.Columns.Add(COLUMN);

			return dt;
		}

		private List<CTCL_CLIENT_PARTICIPANT_MAPPING> GetClientParticipantMappingData(CTCL_NoOfRecordsofSubData totalNumberRecords, CTCL_EMData data)
		{
			var mappingsList = new List<CTCL_CLIENT_PARTICIPANT_MAPPING>();
			byte[] mappingData = new byte[Marshal.SizeOf(typeof(CTCL_CLIENT_PARTICIPANT_MAPPING))];

			for (int i = 0; i < totalNumberRecords.NoOfRecordsofSubData; i++)
			{
				Buffer.BlockCopy(data.EMData, (mappingData.Length * i), mappingData, 0, mappingData.Length);
				var mapping = conversion.FromBytesToObject<CTCL_CLIENT_PARTICIPANT_MAPPING>(mappingData);
				mappingsList.Add(mapping);
			}

			return mappingsList;
		}
		#endregion

		#region  Participant Ack

		public Response ProcessParticipantTradeAck(CTCL_ParticipantMakerChecker acknowledgement_Response)
		{
			Response response = new();
			try
			{
				DataTable dt = new DataTable();
				// Adding Columns

				DataColumn COLUMN = new DataColumn();
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ExchangeSegmentId";
				COLUMN.DataType = typeof(int);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ExchangeOrderNumber";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ProClientIndicator";
				COLUMN.DataType = typeof(short);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ClientAccountCode";
				COLUMN.DataType = typeof(char[]);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ParticipantCode";
				COLUMN.DataType = typeof(char[]);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "Buy_SellIndicator";
				COLUMN.DataType = typeof(short);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ProductType";
				COLUMN.DataType = typeof(short);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "Token";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "TotalVolume";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);


				COLUMN = new DataColumn();
				COLUMN.ColumnName = "TradedQuantity";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "Price";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "ApprovedQuantity";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "UserRemarks";
				COLUMN.DataType = typeof(char[]);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "TimeStamp";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);
				
				COLUMN = new DataColumn();
				COLUMN.ColumnName = "Action";
				COLUMN.DataType = typeof(int);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "intExchangeSpecificAttributeComposition";
				COLUMN.DataType = typeof(char[]);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "shtTimeStamp1";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);

				COLUMN = new DataColumn();
				COLUMN.ColumnName = "TradeNumber";
				COLUMN.DataType = typeof(long);
				dt.Columns.Add(COLUMN);

				DataRow DR = dt.NewRow();
				DR[0] = acknowledgement_Response.MessageHeader.ExchangeSegmentId.SegmentId;
				DR[1] = acknowledgement_Response.ExchangeOrderNumber.OrderNumber;
				DR[2] = acknowledgement_Response.AccountInformation.ProClientIndicator.ClientIndicator;
				DR[3] = acknowledgement_Response.AccountInformation.ClientAccountCode.AccountNumber;
				DR[4] = acknowledgement_Response.ParticipantCode.Participant;
				DR[5] = (int)acknowledgement_Response.Buy_SellIndicator;
				DR[6] = (int)acknowledgement_Response.ProductType;
				DR[7] = acknowledgement_Response.Token.Token;
				DR[8] = acknowledgement_Response.TotalVolume.Quantity;
				DR[9] = acknowledgement_Response.TradedQuantity.Quantity;
				DR[10] = acknowledgement_Response.Price.Price;
				DR[11] = acknowledgement_Response.ApprovedQuantity.Quantity;
				DR[12] = acknowledgement_Response.UserRemarks.remarks;
				DR[13] = acknowledgement_Response.LastUpdateTimeStamp.TimeStamp;
				DR[14] = (int)acknowledgement_Response.Action;
				DR[15] = acknowledgement_Response.ExchangeSpecificAttributeComposition.ExchangeSpecificAttributeComposition;
				DR[16] = Convert.ToInt64(acknowledgement_Response.smtTimeStamp1.TimeStamp);
				DR[17] = acknowledgement_Response.TradeNumber.FillNumber;

				dt.Rows.Add(DR);

				if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
				{
					PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
					PersistSqlConn.Open();
				}

				using (tran = PersistSqlConn.BeginTransaction(IsolationLevel.ReadCommitted))
				{
					using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
					{
						using (SqlCommand cmd = new SqlCommand("[dbo].[usp_ParticipantTradeAcknowledgement_ins]"))
						{
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.Connection = con;
							cmd.Parameters.AddWithValue("@ParticipantTradeAcknowledgement", dt);
							con.Open();
							cmd.ExecuteNonQuery();
							con.Close();

						}
					}
					tran.Commit();
				}
				Log.Info("Participant Trade acknowledegement data saved to Database ");
				return response.Set(StatusCode.Success, "Participant Trade acknowledegement Data uploaded Sucessfully");
			}
			catch (Exception ex)
			{
				Log.Error(ex, "Participant Trade acknowledegement data couldn't save  to Database ");
				return response.Set(StatusCode.Failure, "Error Occured at Participant Trade acknowledegement Data Insert :" + ex.Message);
			}
		}

		#endregion

		public Response ProcessClientDefaultSettlor(CTCL_ClientParticipantDefaultSettlor request)
		{
			Response response = new();
			try
			{
				if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
				{
					PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
					PersistSqlConn.Open();
				}

				using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
				{
					using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
					{
						using (SqlCommand cmd = new SqlCommand("[dbo].[usp_SetClientDefaultSettlorCode]"))
						{
							cmd.CommandType = CommandType.StoredProcedure;
							cmd.Connection = con;
							cmd.Parameters.AddWithValue("@ExchangeSegmentid", request.ExchangeSegmentId.SegmentId);
							cmd.Parameters.AddWithValue("@TerminalId", request.ClientId.TerminalId.ToTruncateEndString());
							cmd.Parameters.AddWithValue("@ParticipantId", request.ParticipantId.ParticipantId.ToTruncateEndString());

							if (request.OperationMode == CTCL.BinaryProtocol.Common.CTCL.Enum.CTCL_OperationMode.ADD
								|| request.OperationMode == CTCL.BinaryProtocol.Common.CTCL.Enum.CTCL_OperationMode.UPDATE)
							{
								cmd.Parameters.AddWithValue("@IsDefault", 1);
							}
							else
							{
								cmd.Parameters.AddWithValue("@IsDefault", 0);
							}
							con.Open();
							cmd.ExecuteNonQuery();
							con.Close();

						}
					}
					tran.Commit();
				}
				Log.Info("Client Default settlor info update in Database for access count");
				return response.Set(BinaryProtocol.Common.StatusCode.Success, "Client Default settlor info update in Database for access count ");
			}
			catch (Exception ex)
			{
				Log.Error(ex, "could not update Client Default settlor info in Database for access count");
				return response.Set(BinaryProtocol.Common.StatusCode.Failure, "could not update Client Default settlor info in Database for access count :" + ex.Message);
			}

		}
	}
}





using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.BroadcastSystem;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ConsumerDBComponent.Common;
using static CTCL.BinaryProtocol.AssetManger.CTCL_AssetManger;
using CTCL.BinaryProtocol.Common.CTCL.Common;

namespace ConsumerDBComponent.MessageProcessor
{
    internal class BcastIndexProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response processBcastIndexMessageData(BCAST_MKT_INDEX BcastIndex)
        {
            Response response = new Response();

            try
            {
                DataTable dt = new DataTable();

                DataColumn COLUMN = new DataColumn();
                COLUMN.ColumnName = "SegmentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "SegmentToken";
                COLUMN.DataType = typeof(Int64);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "IndexName";
                COLUMN.DataType = typeof(string);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "IndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "HighIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "LowIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "OpeningIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "ClosingIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "PercentChange";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "YearlyHigh";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "YearlyLow";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "UpMoves";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "DownMoves";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "Capitalisation";
                COLUMN.DataType = typeof(float);
                dt.Columns.Add(COLUMN);


                COLUMN = new DataColumn();
                COLUMN.ColumnName = "NeChange";
                COLUMN.DataType = typeof(char);
                dt.Columns.Add(COLUMN);



                COLUMN = new DataColumn();
                COLUMN.ColumnName = "Filler1";
                COLUMN.DataType = typeof(char);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "CreatedTime";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "UpdatedTime";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);


                for (int i = 0; i < BcastIndex.NoOfRecords.NoOfRecords; i++)
                {
                    DataRow DR = dt.NewRow();
                    DR[0] = BcastIndex.BroadcastMessageHeader.MessageHeader.ExchangeSegmentId.SegmentId;
                    DR[1] = 0;
                    DR[2] = BcastIndex.Indexes[i].IndexName.IndexName.ToTruncateString();
                    DR[3] = BcastIndex.Indexes[i].IndexValue.IndexValue;
                    DR[4] = BcastIndex.Indexes[i].HighIndexValue.IndexValue;
                    DR[5] = BcastIndex.Indexes[i].LowIndexValue.IndexValue;
                    DR[6] = BcastIndex.Indexes[i].OpeningIndex.IndexValue;
                    DR[7] = BcastIndex.Indexes[i].CloseingIndex.IndexValue;
                    DR[8] = BcastIndex.Indexes[i].PercentChange.Percentage;
                    DR[9] = BcastIndex.Indexes[i].YearlyHigh.IndexValue;
                    DR[10] = BcastIndex.Indexes[i].YearlyLow.IndexValue;
                    DR[11] = BcastIndex.Indexes[i].UpMoves.NoOfMoves;
                    DR[12] = BcastIndex.Indexes[i].DownMoves.NoOfMoves;
                    DR[13] = BcastIndex.Indexes[i].Capitalisation.MarketCapitalisation;
                    DR[14] = BcastIndex.Indexes[i].NetChangeIndicator.NetChangeIndicator[0];
                    DR[15] = BcastIndex.Indexes[i].Filler1.Filler1[0];
                    DR[16] = DateTime.Now.Ticks;
                    DR[17] = DateTime.Now.Ticks;
                    dt.Rows.Add(DR);
                }
                try
                {
                    if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                    {
                        PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
                        PersistSqlConn.Open();
                    }

                    using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                    {
                        using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
                        {
                            using (SqlCommand cmd = new SqlCommand("[dbo].[usp_MarketIndex_insupd]"))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;
                                cmd.Parameters.AddWithValue("@MarketIndex", dt);
                                con.Open();
                                cmd.ExecuteNonQuery();
                                con.Close();
                            }
                        }

                        tran.Commit();

                    }
                    Log.Info("BCastIndex data saved to database.");
                    return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");
                }
                catch (Exception ex)
                {
                    PushDataForDeadPoolQ(BcastIndex);
                    return response.Set(StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "BCast data couldn't be saved to database");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
            }
        }
        internal bool PushDataForDeadPoolQ(BCAST_MKT_INDEX BcastIndex)
        {
            bool result = true;
            bool response = true;

            CommonMessagePublisher messagePublisher = new CommonMessagePublisher();
            response = messagePublisher.PublishMessageInDeadPoolQ(BcastIndex); //publishing to DeadPoolQ
            if (!response)
            {
                return result = false;
            }
            return result;


        }

    }
}




using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.BroadcastSystem;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ConsumerDBComponent.Common;
using CTCL.BinaryProtocol.Common.CTCL.Enum;

namespace ConsumerDBComponent.MessageProcessor
{
    public class DPRUpdateProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response processDPRUpdateData(CTCL_DPR_UPDATE dprUpdate)
        {
            Response response = new Response();

            try
            {
                DataTable dt = new DataTable();

                if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.NSE_CM)
                {
                    DataColumn COLUMN = new DataColumn();
                    COLUMN.ColumnName = "intTokenNo";
                    COLUMN.DataType = typeof(int);
                    dt.Columns.Add(COLUMN);

                    COLUMN = new DataColumn();
                    COLUMN.ColumnName = "varCreditRating";
                    COLUMN.DataType = typeof(string);
                    dt.Columns.Add(COLUMN);

                    COLUMN = new DataColumn();
                    COLUMN.ColumnName = "intLocalUpdateDateTime";
                    COLUMN.DataType = typeof(Int64);
                    dt.Columns.Add(COLUMN);

                    DataRow DR = dt.NewRow();
                    DR[0] = dprUpdate.Token.Token;
                    DR[1] = dprUpdate.CreditRating.CreditRating.ToTruncateString();
                    DR[2] = dprUpdate.LocalUpdateTime.TimeStamp;

                    dt.Rows.Add(DR);
                }
                else if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.BSE_CM)
                {

                    DataColumn COLUMN = new DataColumn();
                    COLUMN.ColumnName = "LongInstrumentId";
                    COLUMN.DataType = typeof(int);
                    dt.Columns.Add(COLUMN);

                    COLUMN = new DataColumn();
                    COLUMN.ColumnName = "FillerVarcharPriceRange";
                    COLUMN.DataType = typeof(string);
                    dt.Columns.Add(COLUMN);

                    COLUMN = new DataColumn();
                    COLUMN.ColumnName = "intLocalUpdateDateTime";
                    COLUMN.DataType = typeof(Int64);
                    dt.Columns.Add(COLUMN);

                    DataRow DR = dt.NewRow();
                    DR[0] = dprUpdate.Token.Token;
                    DR[1] = dprUpdate.CreditRating.CreditRating.ToTruncateString();
                    DR[2] = dprUpdate.LocalUpdateTime.TimeStamp;

                    dt.Rows.Add(DR);
                }
                try
                {
                    if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                    {
                        PersistSqlConn = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb);
                        PersistSqlConn.Open();
                    }


                    using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                    {
                        using (SqlConnection con = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb))
                        {
                            string procedureName = "";
                            string typeParameter = "";

                            if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.NSE_CM)
                            {
                                procedureName = "[dbo].[usp_UpdDPR_upd]";
                                typeParameter = "@NSECMSecurityMasterDPR";

                            }
                            else if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.BSE_CM)
                            {
                                procedureName = "[dbo].[usp_BSE_UpdDPR_upd]";
                                typeParameter = "@BSECMSecurityMasterDPR";
                            }
                            using (SqlCommand cmd = new SqlCommand(procedureName))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;
                                cmd.Parameters.AddWithValue(typeParameter, dt);
                                con.Open();
                                cmd.ExecuteNonQuery();
                                con.Close();
                            }
                        }

                        tran.Commit();

                    }
                    Log.Info("DPR Update data saved to database.");
                    return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");
                }
                catch (Exception ex)
                {
                    PushDataForDeadPoolQ(dprUpdate);
                    return response.Set(StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
                }           
            }
            catch (Exception ex)
            {
                Log.Error(ex, "DPR Update data couldn't be saved to database");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
            }
        }


        internal bool PushDataForDeadPoolQ(CTCL_DPR_UPDATE dprUpdate)
        {
            bool result = true;
            bool response = true;
                       
                CommonMessagePublisher messagePublisher = new CommonMessagePublisher();
                response = messagePublisher.PublishMessageInDeadPoolQ(dprUpdate); //publishing to DeadPoolQ
                if (!response)
                {
                    return result = false;
                }
            return result;
           
           
        }
    }
}


using CommandLine;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Runtime.InteropServices;
using ConsumerDBComponent;
using ConsumerDBComponent.Common;
using ConsumerDBComponent.Global;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using CTCL.BinaryProtocol.Common.CMA.Response;
using BinaryProtocol.Common;

namespace ConsumerDbComponent
{
	class program
	{
		static void Main(string[] args)
		{
			new exitHook();
			var cmdOption = Parser.Default.ParseArguments<CmdOptions>(args);
            if (string.IsNullOrEmpty(cmdOption.Value.RequestID))
            {
                cmdOption.Value.RequestID =CTCL.Utility.UniqueId.GenerateRequestId((int)ComponentType.DBWriter, -1);
            }
			CommonHelper.RequestID = cmdOption.Value.RequestID;
            ConsoleLog.ConsoleWrite("init, DB writing component!");
			string QueueType = "";

			if (cmdOption.Value.Type == "")
			{
				if (!Console.IsInputRedirected && RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
				{
					ConsoleLog.ConsoleWrite("Insert the MQueueType(For Normal N and For DeadPool D):");
					QueueType = Console.ReadLine();
					if (QueueType?.ToLower() != "n" && QueueType?.ToLower() != "d")
					{
						ConsoleLog.ConsoleWrite("Please Insert Valid QueueType(D/N).");
						Environment.Exit(0);
					}
					cmdOption.Value.Type = QueueType.ToLower();
				}
				else if (args != null && args.Length > 0)
				{
					cmdOption.Value.Type = args[0].ToLower();
				}
			}
			else
			{
				if (cmdOption.Value.Type?.ToLower() != "n" && cmdOption.Value.Type?.ToLower() != "d")
				{
					ConsoleLog.ConsoleWrite("Please Insert Valid QueueType(D/N).");
					Environment.Exit(0);
				}
			}
            Console.Title = $"{ComponentType.DBWriter}_{-1}";

            System.AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
            IHost host = Host.CreateDefaultBuilder(args)
			.UseWindowsService(config =>
			{
				config.ServiceName = "DBWBGS";
			})
			.ConfigureServices(services =>
			{
				services.AddHostedService<Worker>(services => new Worker(cmdOption.Value));
                services.AddSingleton<IHostLifetime, NoopConsoleLifetime>();
            })
		   .Build();

			host.Run();

		}
        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            #region  DBwriter Start Process License Error
            CMA_COMPONENT_MESSAGE_UPDATE omsstartlicense = new CMA_COMPONENT_MESSAGE_UPDATE();
            Log.Error(e.ExceptionObject, "Unhandled Exception occured");
            omsstartlicense = CommonHelper.getCMACompUpdateResponse(CMA_StatusCode.Stopped, $"{((Exception)e.ExceptionObject).Message}", CommonHelper.RequestID);

            CommonHelper.SendGlobalExceptionToAgent(omsstartlicense);
            #endregion
        }     
    }
	public class CmdOptions
	{
		[Option('t', HelpText = "")]
		public string Type { get; set; } = string.Empty;
        [Option("rid", HelpText = "")]
        public string RequestID { get; set; }
    }
}


using Logging.Models;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

namespace Logging.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            LogManager.Logger.ForContext("Component", "HomeController").Information("Index page accessed");
            return View();
        }

        public IActionResult Privacy()
        {
            LogManager.Logger.ForContext("Component", "HomeController").Information("Privacy page accessed");
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            LogManager.Logger.ForContext("Component", "HomeController").Information("Error page accessed");
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}




namespace Logging.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}



using Serilog;
namespace Logging.Models
{
    public static class LogManager
    {
        public static Serilog.ILogger Logger { get; }
        static LogManager()
        {
            Logger = new LoggerConfiguration().WriteTo.File("C:\\logs\\Demo\\app-log.txt", rollingInterval: RollingInterval.Day).CreateLogger();
        }
    }
}


@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>




@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>





@using Logging
@using Logging.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers





@{
    Layout = "_Layout";
}



{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}







using Serilog;
namespace Logging
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Log.Logger = new LoggerConfiguration()
              .WriteTo.File("C:\\logs\\Demo\\app-log.txt", rollingInterval: RollingInterval.Day).CreateLogger();
            var builder = WebApplication.CreateBuilder(args);
          
            // Add services to the container.
            builder.Services.AddControllersWithViews();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            app.Run();
        }
    }
}



@using BinaryProtocol.Common;
@using CTCL.BinaryProtocol.Common.CMA.Enum;
@model ComponentViewStatus
<div class="cstm_heading">
    <h1>
        <a asp-controller="BODProcess" asp-action="cancel" asp-route-BrokerId="@Model.BrokerId" asp-route-SiteId="@Model.SiteId">

            <button type="button" class="action-btn">
                <i class="bi bi-arrow-bar-left"></i>
            </button>
        </a>Component Status
    </h1>

</div>
<div>
    <div class="table-responsive cstm_tbl">
        <table class="table" id="FileMaster">
            @if (!(Model == null))
            {
                <thead>

                    <tr>
                        <trh>
                            <th> Component Name </th>
                            <th> Instance Id </th>
                            <th>Component State </th>
                            <th> Date Time </th>
                            <th>Success Status </th>
                            <th> Message </th>
                        </trh>
                    </tr>

                </thead>
                <tbody id="tablebodystartcom">
                    @foreach (var status in Model.ComponentsStatus)
                    {

                        <tr style="color:black;padding-left:20px;padding-right:20px">
                            <td> @((ComponentType)status.ComponentType) </td>
                            <td> @status.InstanceId </td>
                            <td>@((CMA_StatusCode)status.ComponentState) </td>
                            <td> @status.TimeStamp </td>
                            <td> @status.IsSucessStatus </td>
                            <td> @status.Message </td>
                        </tr>

                    }
                </tbody>
            }
        </table>
    </div>
</div>

<input type="hidden" id="brokerid" value="@Model.BrokerId" />
<input type="hidden" id="siteid" value="@Model.SiteId" />


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function refreshTable(brokerid, siteid) {
        debugger
        var brokerid = $('#brokerid').val();
        var siteid = $('#siteid').val();
        var url = `/ComponentAssign/Status?brokerid=${brokerid}&siteid=${siteid}&isAjax=1`;
        debugger
        console.log(url)
        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                "use strict";
                updateTable(data); // Call the function to update tables
                // $('#tablebodystartcom').html(data);
            },
            error: function (xhr, status, error) {

                console.error("Error refreshing table:", error);
            }
        });
    }
    // Function to update table rows dynamically
    function updateTable(data) {
        debugger
        //  alert('update function alled!!!!')
        let tableBody = $('#tablebodystartcom'); // Replace #myTable with your table ID or class
        tableBody.empty(); // Clear the current table rows
        const com = JSON.parse(data);
        for (var i = 0; i < com.length; i++)
        {
            //debugger
            let state;
            let name;
            if(com[i].componentState == 0) {state = "Stopped" }
            if(com[i].componentState == 1) {state = "Started" }
            if (com[i].componentState == 2) {state = "Completed"}
            if (com[i].componentType == 0) {name = " All" }
            if (com[i].componentType == 1) { name = " OMS" }
            if (com[i].componentType == 5) { name = " DBWriter" }
            if (com[i].componentType == 6) { name = " RMS" }
            if (com[i].componentType == 7) { name = " Consumer_Trade" }
            if (com[i].componentType == 8) { name = " Consumer_Order" }
            if (com[i].componentType == 9) { name = " Consumer_UserListingBalance" }
            if (com[i].componentType == 25) { name = " NSEFOInteractiveGateway" }
            if (com[i].componentType == 24) { name = " LoadBalancer" }
            if (com[i].componentType == 26) { name = " PBS" }
            if (com[i].componentType == 27) { name = " SBS" }
            if (com[i].componentType == 28) { name = " BroadcastGateway" }
            if (com[i].componentType == 29) { name = " TTFixBroadcastGateway" }
            if (com[i].componentType == 30) { name = " NSECMBroadCastGateway" }
            if (com[i].componentType == 31) { name = " NSECMInteractiveGateway" }
            if (com[i].componentType == 32) { name = " MailSender" }
            if (com[i].componentType == 33) { name = " FrontEnd" }
            if (com[i].componentType == 35) { name = " SFTPServer" }
            if (com[i].componentType == 36) { name = " CONTRACT_MASTER_READER" }
            if (com[i].componentType == 37) { name = " MasterAPI" }
            if (com[i].componentType == 38) { name = " TradingApi" }
            if (com[i].componentType == 39) { name = " MarketApi" }
            if (com[i].componentType == 40) { name = " AdminApi" }
            if (com[i].componentType == 41) { name = " TradingWebSocket" }
            if (com[i].componentType == 42) { name = " MarketWebSocket" }
            if (com[i].componentType == 43) { name = " FinRMS" }
            if (com[i].componentType == 44) { name = " IBTInteractiveApi" }
            if (com[i].componentType == 45) { name = " AutoUpdateHost" }
            if (com[i].componentType == 46) { name = " IBTInteractiveSocket" }
            if (com[i].componentType == 47) { name = " IBTMarketApi" }
            if (com[i].componentType == 48) { name = " IBTMarketSocket" }
            if (com[i].componentType == 49) { name = " GatewayApi" }
            if (com[i].componentType == 50) { name = " GatewaySocket" }
            if (com[i].componentType == 51) { name = " RMSApi" }
            if (com[i].componentType == 52) { name = " MCASTSbs" }
            if (com[i].componentType == 53) { name = " AgentWorker" }



                var tr = "<tr>";
            var td = "<td>" + name+ "</td>" + "<td>" + com[i].instanceId + "</td>" + "<td>" + state + "</td>" + "<td>" + com[i].timeStamp + "</td>" + "<td>" + state + "</td>" + "<td>" + com[i].message + "</td>";
             td = td + "</tr>";
             tableBody.append(tr+td);
        }
    }
    setInterval(() => refreshTable(1, 1), 2000);
</script>


























@using BinaryProtocol.Common
@using CTCL.BinaryProtocol.Common.CMA.Enum
@model ComponentViewStatus

<div class="cstm_heading">
    <h1>
        <a asp-controller="BODProcess" asp-action="cancel" asp-route-BrokerId="@Model.BrokerId" asp-route-SiteId="@Model.SiteId">
            <button type="button" class="action-btn">
                <i class="bi bi-arrow-bar-left"></i>
            </button>
        </a>Component Status
    </h1>
</div>
<div>
    <div class="table-responsive cstm_tbl">
        <table class="table" id="FileMaster">
            @if (!(Model == null))
            {
                <thead>
                    <!-- UPDATED: Corrected invalid <trh> tag to <tr> -->
                    <tr>
                        <th> Component Name </th>
                        <th> Instance Id </th>
                        <th>Component State </th>
                        <th> Date Time </th>
                        <th>Success Status </th>
                        <th> Message </th>
                    </tr>
                </thead>
                <tbody id="tablebodystartcom">
                    @foreach (var status in Model.ComponentsStatus)
                    {
                        <tr style="color:black;padding-left:20px;padding-right:20px">
                            <td> @((ComponentType)status.ComponentType) </td>
                            <td> @status.InstanceId </td>
                            <td>@((CMA_StatusCode)status.ComponentState) </td>
                            <td> @status.TimeStamp </td>
                            <td> @status.IsSucessStatus </td>
                            <td> @status.Message </td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    </div>
</div>

<!-- ***** START OF NEW HTML SECTION ***** -->
<!-- This divider visually separates the status table from the new log viewer -->
<hr class="my-5" />

<div class="cstm_heading">
    <h1 class="d-flex">Real-Time Component Log Viewer</h1>
</div>

<div class="row mb-3 mt-4">
    <div class="col-md-5">
        <label for="componentSelect" class="form-label">Component</label>
        <select id="componentSelect" class="form-select" asp-items="@Model.Components">
            <option value="">-- Select a Component --</option>
        </select>
    </div>
    <div class="col-md-5">
        <label for="logTypeSelect" class="form-label">Log Level</label>
        <select id="logTypeSelect" class="form-select" asp-items="@Model.LogTypes">
                <option value="">-- Select a Log Level --</option>
        </select>
    </div>
</div>

<h4>Logs</h4>
<div id="log-display" class="p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; height: 600px; overflow-y: auto; font-family: monospace; white-space: pre-wrap;">
    <p class="text-muted">Select a component and log level to see logs.</p>
</div>
<!-- ***** END OF NEW HTML SECTION ***** -->


<input type="hidden" id="brokerid" value="@Model.BrokerId" />
<input type="hidden" id="siteid" value="@Model.SiteId" />

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // ***** START OF UPDATED SCRIPT SECTION *****
    // Wrapping all scripts in $(document).ready() is a good practice.
    $(document).ready(function() {

        // --- Your Existing JavaScript for Component Status Table Refresh ---
        function refreshTable() {
            var brokerid = $('#brokerid').val();
            var siteid = $('#siteid').val();
            var url = `/ComponentAssign/Status?brokerid=${brokerid}&siteid=${siteid}&isAjax=1`;
            
            $.ajax({
                url: url,
                type: 'GET',
                success: function (data) {
                    "use strict";
                    updateTable(data);
                },
                error: function (xhr, status, error) {
                    console.error("Error refreshing table:", error);
                }
            });
        }

        function updateTable(data) {
            let tableBody = $('#tablebodystartcom');
            tableBody.empty();
            const com = JSON.parse(data);
            for (var i = 0; i < com.length; i++)
            {
                // This large block of if statements maps numeric IDs to string names
                let state;
                let name;
                if(com[i].componentState == 0) {state = "Stopped" }
                if(com[i].componentState == 1) {state = "Started" }
                if (com[i].componentState == 2) {state = "Completed"}
                if (com[i].componentType == 0) {name = " All" }
                if (com[i].componentType == 1) { name = " OMS" }
                if (com[i].componentType == 5) { name = " DBWriter" }
                // ... (the rest of your componentType mapping if-statements go here) ...
                if (com[i].componentType == 53) { name = " AgentWorker" }

                var tr = "<tr>";
                // UPDATED: Corrected the 5th column to use 'isSucessStatus' to match your C# loop
                var td = "<td>" + name + "</td>" + "<td>" + com[i].instanceId + "</td>" + "<td>" + state + "</td>" + "<td>" + com[i].timeStamp + "</td>" + "<td>" + com[i].isSucessStatus + "</td>" + "<td>" + com[i].message + "</td>";
                td = td + "</tr>";
                tableBody.append(tr+td);
            }
        }
        
        // This will keep refreshing your status table every 2 seconds
        setInterval(refreshTable, 2000);

        // --- NEW JavaScript for the Real-Time Log Viewer ---
        let logInterval;

        function fetchLogs() {
            const componentValue = $('#componentSelect').val();
            const logType = $('#logTypeSelect').val();

            if (!componentValue || !logType) {
                return;
            }
            
            const ids = componentValue.split(':');
            const agentId = ids[0];
            const componentId = ids[1];
            const instanceId = ids[2];

            $.ajax({
                url: '@Url.Action("GetLogs", "ComponentAssign")',
                type: 'GET',
                data: {
                    brokerId: $('#brokerid').val(),
                    siteId: $('#siteid').val(),
                    agentId: agentId,
                    componentId: componentId,
                    instanceId: instanceId,
                    logType: logType
                },
                success: function (logs) {
                    const logDisplay = $('#log-display');
                    logDisplay.empty();

                    if (logs.length === 0) {
                        logDisplay.html('<p class="text-muted">No logs found for this selection.</p>');
                        return;
                    }

                    $.each(logs, function (index, log) {
                        const timestamp = new Date(log.timestamp).toLocaleString();
                        const logClass = getLogLevelClass(log.logLevel);
                        const logHtml = `<div><span style="color: #6c757d;">[${timestamp}]</span> <span class="fw-bold ${logClass}">${getLogLevelName(log.logLevel)}:</span> <span>${log.message}</span></div>`;
                        logDisplay.append(logHtml);
                    });
                },
                error: function () {
                    $('#log-display').html('<p class="text-danger">An error occurred while fetching logs.</p>');
                }
            });
        }

        function startLogFetching() {
            if (logInterval) clearInterval(logInterval);
            fetchLogs(); 
            logInterval = setInterval(fetchLogs, 3000); 
        }
        
        $('#componentSelect, #logTypeSelect').on('change', startLogFetching);

        function getLogLevelClass(level) {
            switch(level) {
                case 0: return 'text-secondary'; // Verbose
                case 1: return 'text-info';      // Debug
                case 2: return 'text-primary';   // Info
                case 3: return 'text-warning';   // Warning
                case 4: return 'text-danger';    // Error
                case 5: return 'text-danger fw-bold'; // Fatal
                default: return 'text-dark';
            }
        }

        function getLogLevelName(level) {
            switch(level) {
                case 0: return 'VERBOSE';
                case 1: return 'DEBUG';
                case 2: return 'INFO';
                case 3: return 'WARNING';
                case 4: return 'ERROR';
                case 5: return 'FATAL';
                default: return 'UNKNOWN';
            }
        }
    });
    // ***** END OF UPDATED SCRIPT SECTION *****
</script>




﻿



@using BinaryProtocol.Common
@using CTCL.BinaryProtocol.Common.CMA.Enum
@model ComponentViewStatus

<div class="cstm_heading">
    <h1>
        <a asp-controller="BODProcess" asp-action="cancel" asp-route-BrokerId="@Model.BrokerId" asp-route-SiteId="@Model.SiteId">
            <button type="button" class="action-btn">
                <i class="bi bi-arrow-bar-left"></i>
            </button>
        </a>Component Status
    </h1>
</div>
<div>
    <div class="table-responsive cstm_tbl">
        <table class="table" id="FileMaster">
            @if (!(Model == null))
            {
                <thead>
                    <!-- UPDATED: Corrected invalid <trh> tag to <tr> -->
                    <tr>
                        <th> Component Name </th>
                        <th> Instance Id </th>
                        <th>Component State </th>
                        <th> Date Time </th>
                        <th>Success Status </th>
                        <th> Message </th>
                    </tr>
                </thead>
                <tbody id="tablebodystartcom">
                    @foreach (var status in Model.ComponentsStatus)
                    {
                        <tr style="color:black;padding-left:20px;padding-right:20px">
                            <td> @((ComponentType)status.ComponentType) </td>
                            <td> @status.InstanceId </td>
                            <td>@((CMA_StatusCode)status.ComponentState) </td>
                            <td> @status.TimeStamp </td>
                            <td> @status.IsSucessStatus </td>
                            <td> @status.Message </td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    </div>
</div>

<!-- ***** START OF NEW HTML SECTION ***** -->
<hr class="my-5" />

<div class="cstm_heading">
    <h1 class="d-flex">Real-Time Component Log Viewer</h1>
</div>

<div class="row mb-3 mt-4">
    <div class="col-md-5">
        <label for="componentSelect" class="form-label">Component</label>
        <!-- This select tag now works because of the changes in the Controller and Model -->
        <select id="componentSelect" class="form-select" asp-items="@Model.Components">
            <option value="">-- Select a Component --</option>
        </select>
    </div>
    <div class="col-md-5">
        <label for="logTypeSelect" class="form-label">Log Level</label>
        <select id="logTypeSelect" class="form-select" asp-items="@Model.LogTypes">
            <option value="">-- Select a Log Level --</option>
        </select>
    </div>
</div>

<h4>Logs</h4>
<div id="log-display" class="p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; height: 600px; overflow-y: auto; font-family: monospace; white-space: pre-wrap;">
    <p class="text-muted">Select a component and log level to see logs.</p>
</div>
<!-- ***** END OF NEW HTML SECTION ***** -->

<input type="hidden" id="brokerid" value="@Model.BrokerId" />
<input type="hidden" id="siteid" value="@Model.SiteId" />

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // ***** START OF UPDATED SCRIPT SECTION *****
    $(document).ready(function() {

        // --- Your Existing JavaScript for Component Status Table Refresh ---
        function refreshTable() {
            var brokerid = $('#brokerid').val();
            var siteid = $('#siteid').val();
            var url = `/ComponentAssign/Status?brokerid=${brokerid}&siteid=${siteid}&isAjax=1`;
            
            $.ajax({
                url: url,
                type: 'GET',
                success: function (data) {
                    "use strict";
                    updateTable(data);
                },
                error: function (xhr, status, error) {
                    console.error("Error refreshing table:", error);
                }
            });
        }

        function updateTable(data) {
            let tableBody = $('#tablebodystartcom');
            tableBody.empty();
            const com = JSON.parse(data);
            for (var i = 0; i < com.length; i++)
            {
                let state, name;
                if(com[i].componentState == 0) {state = "Stopped"} else if(com[i].componentState == 1) {state = "Started"} else if (com[i].componentState == 2) {state = "Completed"} else {state = "Unknown"};
                if(com[i].componentType == 1) {name = "OMS"} else if (com[i].componentType == 5) { name = "DBWriter" } else { name = "Component " + com[i].componentType}; // Simplified for brevity

                // UPDATED: Corrected the 5th column to use 'isSucessStatus' which is correct
                var tr = "<tr>";
                var td = "<td>" + name + "</td>" + "<td>" + com[i].instanceId + "</td>" + "<td>" + state + "</td>" + "<td>" + com[i].timeStamp + "</td>" + "<td>" + com[i].isSucessStatus + "</td>" + "<td>" + com[i].message + "</td>";
                td = td + "</tr>";
                tableBody.append(tr+td);
            }
        }
        
        setInterval(refreshTable, 2000);

        // --- NEW JavaScript for the Real-Time Log Viewer ---
        let logInterval;

        function fetchLogs() {
            const componentValue = $('#componentSelect').val();
            const logType = $('#logTypeSelect').val();
            if (!componentValue || !logType) return;
            
            const ids = componentValue.split(':');
            const agentId = ids[0], componentId = ids[1], instanceId = ids[2];

            $.ajax({
                url: '@Url.Action("GetLogs", "ComponentAssign")',
                type: 'GET',
                data: {
                    brokerId: $('#brokerid').val(), siteId: $('#siteid').val(),
                    agentId: agentId, componentId: componentId, instanceId: instanceId, logType: logType
                },
                success: function (logs) {
                    const logDisplay = $('#log-display');
                    logDisplay.empty();
                    if (logs.length === 0) {
                        logDisplay.html('<p class="text-muted">No logs found for this selection.</p>');
                        return;
                    }
                    $.each(logs, function (index, log) {
                        const timestamp = new Date(log.timestamp).toLocaleString();
                        const logClass = getLogLevelClass(log.logLevel);
                        const logHtml = `<div><span style="color: #6c757d;">[${timestamp}]</span> <span class="fw-bold ${logClass}">${getLogLevelName(log.logLevel)}:</span> <span>${log.message}</span></div>`;
                        logDisplay.append(logHtml);
                    });
                },
                error: function () { $('#log-display').html('<p class="text-danger">An error occurred while fetching logs.</p>'); }
            });
        }

        function startLogFetching() {
            if (logInterval) clearInterval(logInterval);
            fetchLogs(); 
            logInterval = setInterval(fetchLogs, 3000); 
        }
        
        $('#componentSelect, #logTypeSelect').on('change', startLogFetching);

        function getLogLevelClass(level) {
            switch(level) { case 0: return 'text-secondary'; case 1: return 'text-info'; case 2: return 'text-primary'; case 3: return 'text-warning'; case 4: return 'text-danger'; case 5: return 'text-danger fw-bold'; default: return 'text-dark'; }
        }

        function getLogLevelName(level) {
            switch(level) { case 0: return 'VERBOSE'; case 1: return 'DEBUG'; case 2: return 'INFO'; case 3: return 'WARNING'; case 4: return 'ERROR'; case 5: return 'FATAL'; default: return 'UNKNOWN'; }
        }
    });
    // ***** END OF UPDATED SCRIPT SECTION *****
</script>









using LoginSignupCore.Core;
using Component = LoginSignupCore.MasterCache.Component;
using Microsoft.AspNetCore.Mvc;
using System.Security.Policy;
using LoginSignupCore.Models;
using LoginSignupCore.MasterCache;
using Microsoft.Extensions.Logging;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using Newtonsoft.Json;
using LoginSignupCore.Data;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class BODProcessController : Controller
    {
        private readonly BrokerRepository brokerRepository;
        private readonly BrokerSiteRepository brokerSiteRepository;
        public BODProcessController()
        {
            brokerRepository = new();
            brokerSiteRepository = new();
        }
        public IActionResult Index(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            AgentMaster agent = new AgentMaster()
            {
                BrokerSiteId = siteid,
                BrokerId = brokerid,
                AgentName =  brokerRepository.GetBrokerById(brokerid).NvcBrokerName,
                SiteName = brokerSiteRepository.GetBrokerSitesById(siteid).NvcSiteName,
            };
            return View(agent);
        }
        public IActionResult StartComponent(int brokerid, int siteid, int isAjax= 0)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<Component> componentMasters = new List<Component>();
            var componentMaster = CoreProcess.agentSessionCache.GetComponentMaster(brokerid, siteid);
            if (componentMaster.Item1 == true && componentMaster.Item2 != null && componentMaster.Item2.Count > 0)
            {
                componentMasters = componentMaster.Item2.Where(x => x.componentMaster.IsActive == true && x.componentMaster.IsDelete == false).OrderBy(p => p.componentMaster.Priority).ToList();

                if (componentMasters.Any())
                {
                    componentMasters[0].isenabled = true;
                    for (int i = 1; i < componentMasters.Count; i++)
                    {

                        if (componentMasters[i - 1].isRequestSend == true && componentMasters[i - 1].status == (int)CMA_StatusCode.Completed)
                        {
                            componentMasters[i].isenabled = true;
                        }
                        else
                        {
                            componentMasters[i].isenabled = true;
                        }
                    }
                }

            }
            BODUploadComponent comp = new BODUploadComponent();
            comp.component.componentMaster = new();
            comp.component.componentMaster.BrokerId = brokerid;
            comp.component.componentMaster.SiteId = siteid;
            comp.Components = componentMasters;



            if (isAjax == 1)
            {
                var json = JsonConvert.SerializeObject(componentMasters);
                return Json(json);
            }
            return View(comp);
        }
        public IActionResult UploadFile(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            List<FileMasterInfo> fileMasters = new List<FileMasterInfo>();
            var fileMaster = CoreProcess.agentSessionCache.GetFileMasterInfo(brokerid, siteid);
            if (fileMaster.Item1 == true && fileMaster.Item2.Count > 0)
            {
                fileMasters = fileMaster.Item2.Where(x => x.IsUploadBeforeBOD == true).ToList();
            }
            BODUploadFileView file = new BODUploadFileView();
            file.fileMasterInfo.BrokerId = brokerid;
            file.fileMasterInfo.SiteId = siteid;
            //file.fileMasterInfo.SiteId = fileMasters.FirstOrDefault().SiteId;
            file.fileMastersInfo = fileMasters;

            return View(file);
        }
        public IActionResult UploadFileAfterBOD(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<FileMasterInfo> fileMasters = new List<FileMasterInfo>();
            var fileMaster = CoreProcess.agentSessionCache.GetFileMasterInfo(brokerid, siteid);
            if (fileMaster.Item1 == true && fileMaster.Item2.Count > 0)
            {
                fileMasters = fileMaster.Item2.Where(x => x.IsUploadBeforeBOD == false).ToList();
            }
            BODUploadFileView file = new BODUploadFileView();
            file.fileMasterInfo.BrokerId = brokerid;
            file.fileMasterInfo.SiteId = siteid;
            file.fileMastersInfo = fileMasters;

            return View(file);
        }
        public IActionResult TechnicalInfo(int brokerid, int siteid ,int isAjax = 0)
        {
            if(!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<ComponentsTechnicalInfo> infos = new();
            var info = CoreProcess.agentSessionCache.GetTechnicalInfo(brokerid, siteid);
            if (info != null)
            {
                infos = info;
            }
            TechnicalInfoViewModel tecinfo = new TechnicalInfoViewModel();
            tecinfo.BrokerId = brokerid;
            tecinfo.SiteId = siteid;
            tecinfo.TechnicalInfos = infos;

            if (isAjax == 1)
            {
                var json = JsonConvert.SerializeObject(infos);
                return Json(json);
            }
            return View(tecinfo);
        }

        [HttpGet]
        public IActionResult Cancel(int brokerId, int siteId)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return RedirectToAction("Index", new {brokerId=brokerId, siteId = siteId});
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}


@using CTCL.BinaryProtocol.Common.CMA.Enum;
@using LoginSignupCore.Models.Request;
@model BODUploadComponent;
<div class="cstm_heading">
    <h1>
        <a asp-controller="BODProcess" asp-action="cancel" asp-route-BrokerId="@Model.component.componentMaster.BrokerId" asp-route-SiteId="@Model.component.componentMaster.SiteId">

            <button type="button" class="action-btn">

                <i class="bi bi-arrow-bar-left"></i>
            </button>
        </a>components
    </h1>
</div>
<div class="table-responsive cstm_tbl">
    <table class="table" id="startBOD">

        @if (!(Model == null))
        {
            <thead>
                <tr>
                    <th> Component Name </th>
                    <th> Instance ID</th>
                    <th> Agent </th>
                    <th> Component State </th>
                    <th> Action </th>
                </tr>
            </thead>
            <tbody id="tablebodystartcom">

                @foreach (var component in Model.Components)
                {

                    <tr>
                        <td> @component.componentMaster.ComponentName</td>
                        <td> @component.componentMaster.InstanceId </td>
                        <td> @component.componentMaster.AgentName </td>
                        <td> @((CMA_StatusCode)component.status) </td>
                        @if (@component.status == 0)
                        {
                            <td>
                                <form id="form" asp-controller="Main" asp-action="StartComponent" method="post">
                                    <input type="hidden" id="BrokerId" name="BrokerId" value="@component.componentMaster.BrokerId">
                                    <input type="hidden" id="SiteId" name="SiteId" value="@component.componentMaster.SiteId">
                                    <input type="hidden" id="AgentId" name="AgentId" value="@component.componentMaster.AgentId">
                                    <input type="hidden" id="CompId" name="CompId" value="@component.componentMaster.ComponentId">
                                    <input type="hidden" id="InstanceId" name="InstanceId" value="@component.componentMaster.InstanceId">
                                    <button type="submit" class="btn btn-primary" id="start_button" @(component.isenabled ? "":"disabled")>
                                        Start
                                    </button>
                                </form>

                            </td>
                        }
                        else
                        {

                            <td>
                                <form id="form" asp-controller="Main" asp-action="StopComponent" method="post">
                                    <input type="hidden" id="BrokerId" name="BrokerId" value="@component.componentMaster.BrokerId">
                                    <input type="hidden" id="SiteId" name="SiteId" value="@component.componentMaster.SiteId">
                                    <input type="hidden" id="AgentId" name="AgentId" value="@component.componentMaster.AgentId">
                                    <input type="hidden" id="CompId" name="CompId" value="@component.componentMaster.ComponentId">
                                    <input type="hidden" id="InstanceId" name="InstanceId" value="@component.componentMaster.InstanceId">
                                    <button type="submit" class="btn btn-danger" @(component.isenabled ? "":"disabled")>
                                        Stop
                                    </button>
                                </form>

                            </td>
                        }
                    </tr>

                }
            </tbody>
        }
    </table>
</div>


<input type="hidden" id="brokerid" value="@Model.component.componentMaster.BrokerId" />
<input type="hidden" id="siteid" value="@Model.component.componentMaster.SiteId" />

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function refreshTable(brokerid, siteid) {
        var brokerid = $('#brokerid').val();
        var siteid = $('#siteid').val();
        var url = `/BODProcess/StartComponent?brokerid=${brokerid}&siteid=${siteid}&isAjax=1`;
        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                "use strict";
                updateTable(data); // Call the function to update tables
                //$('html').html(data);
            },
            error: function (xhr, status, error) {

                console.error("Error refreshing table:", error);
            }
        });
    }
    // Function to update table rows dynamically
    function updateTable(data) {
        let tableBody = $('#tablebodystartcom'); // Replace #myTable with your table ID or class
        tableBody.empty(); // Clear the current table rows
        const com = JSON.parse(data);
        com.forEach(item => {
           //debugger
            const buttonLabel = item.status==0 ? 'Start':'Stop';
            const btnclass = item.status == 0 ? "btn btn-primary" : "btn btn-danger";
            const state = item.status == 0 ? "Stopped" : item.status == 1? "Started":"Completed";
            const ActionUrl = item.status == 0 ? '@Url.Action("StartComponent","Main")' : '@Url.Action("StopComponent","Main")'
            com.sort((a, b) => a.componentMaster.Priority - b.componentMaster.Priority)
            tableBody.append(`<tr>
                            <td> ${item.componentMaster.ComponentName}</td>
                            <td> ${item.componentMaster.InstanceId} </td>
                            <td> ${item.componentMaster.AgentName}</td>
                                <td> ${state} </td>
                                <td>
                                        <form id="form"  method="post" action="${ActionUrl}">
                                            <input type="hidden" id="BrokerId" name="BrokerId" value="${item.componentMaster.BrokerId}">
                                            <input type="hidden" id="SiteId" name="SiteId" value="${item.componentMaster.SiteId}">
                                                    <input type="hidden" id="AgentId" name="AgentId" value="${item.componentMaster.AgentId}">
                                            <input type="hidden" id="CompId" name="CompId" value="${item.componentMaster.ComponentId}">
                                            <input type="hidden" id="InstanceId" name="InstanceId" value="${item.componentMaster.InstanceId}">
                                        <button type="submit" class="${btnclass}" id="start_button" ${item.isenabled ? "" : "disabled"}>
                                            ${buttonLabel}
                                        </button>
                                    </form>

                                </td>

     </tr>`);
        });
    }
    // Set the interval to refresh every 5 seconds (5000 ms)
    setInterval(() => refreshTable(1, 1), 20000);
</script>




using CTCL.CacheManagement.Helper;
using CTCL.CacheManagement.Structs;
using Exchange.WebSocketServer.SocketManager;
using LoginSignupCore.Core;
using LoginSignupCore.Models;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Policy;
using SocketSession = Exchange.WebSocketServer.SocketManager.SocketSession;

namespace LoginSignupCore.MasterCache
{
    public class AgentSessionCache
    {
        private ConcurrentDictionary<Id, SiteIdWiseCache> _brokerIdWiseCache;
        public AgentSessionCache()
        {
            _brokerIdWiseCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id brokerId = new() { id = agentSessionInfo.BrokerId };
            if(!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id brokerId = new() { id = agentFunctionalInfo.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            Id brokerId = new() { id = fileStatus.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(fileStatus);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id brokerId = new() { id = componentStatus.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(componentStatus);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id brokerId = new() { id = fileMasterInfo.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(int brokerId, int siteId, string masterPath)
        {
            Id bId = new() { id = brokerId };
            if (!_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(bId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(siteId, masterPath);
        }
        public (bool, List<Component>) GetComponentMaster(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(siteId, agentId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileMasterInfo(siteId, agentId);
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetMasterPath(siteId);
            }
            return (false, null);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id bId = new() { id = compInitReq.BrokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetSession(siteId, agentId);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo(int brokerid, int siteid)
        {
            List<ComponentsTechnicalInfo> list = new();
            //for(int i=0; i<_brokerIdWiseCache.Count; i++)
            //{
                //var info = _brokerIdWiseCache.ElementAt(i).Value;
                if (_brokerIdWiseCache.TryGetValue(new() { id = brokerid }, out var info )&& info != null)
                {
                    list.AddRange(info.GetTechnicalInfo(siteid));
                }
           // }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id bId = new() { id = compInitReq.BrokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileStatus(siteId);
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentStatus(siteId);
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq,bool flag)
        {
            Id brokerId = new() { id = compInitReq.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public (bool, List<Component>) GetComponentMaster(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(siteId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileMasterInfo(siteId);
            }
            return (false, null);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster,bool flag)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class SiteIdWiseCache
    {
        private ConcurrentDictionary<Id, AgentIdWiseCache> _siteIdWiseCache;
        public SiteIdWiseCache()
        {
            _siteIdWiseCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id siteId = new() { id = agentSessionInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id siteId = new() { id = agentFunctionalInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            Id siteId = new() { id = fileStatus.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(fileStatus);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id siteId = new() { id = componentStatus.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(componentStatus);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id siteId = new() { id = fileMasterInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(int siteId, string masterPath)
        {
            Id sId = new() { id = siteId };
            if (!_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(sId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(masterPath);
        }
        public (bool, List<Component>) GetComponentMaster(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster(agentId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileMasterInfo(agentId);
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetMasterPath();
            }
            return (false, null);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.SiteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetSession(agentId);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo(int siteid)
        {
            List<ComponentsTechnicalInfo> list = new();
            //for (int i = 0; i < _siteIdWiseCache.Count; i++)
            //{
                //var info = _siteIdWiseCache.ElementAt(i).Value;
                if (_siteIdWiseCache.TryGetValue(new Id() {id= siteid },out var info)&& info != null)
                {
                    list.AddRange(info.GetTechnicalInfo());
                }
           //}
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.SiteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus(int siteId)
        {
            Id bId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(bId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileStatus();
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus(int siteId)
        {
            Id bId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(bId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentStatus();
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id siteId = new() { id = compInitReq.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(compInitReq, flag);
        }
        public (bool, List<Component>) GetComponentMaster(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster();
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileMasterInfo();
            }
            return (false, null);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster,bool flag)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class AgentIdWiseCache
    {
        private ConcurrentDictionary<Id, ComponentWiseCache> _agentIdWiseSessionCache;
        public string MasterPath;
        private List<FileStatus> _fileStatusDetails;
        private List<ComponentStatus> _componentStatusDetails;
        public AgentIdWiseCache()
        {
            _agentIdWiseSessionCache = new();
            _fileStatusDetails = new();
            _componentStatusDetails = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id agentId = new() { id = agentSessionInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id agentId = new() { id = agentFunctionalInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id agentId = new() { id = fileMasterInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(string masterPath)
        {
            MasterPath = masterPath;
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            if (_fileStatusDetails != null)
            {
                _fileStatusDetails.Insert(0,fileStatus);
            }
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            if (_componentStatusDetails != null)
            {
                _componentStatusDetails.Insert(0,componentStatus);
            }
            Id agentId = new() { id = componentStatus.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(componentStatus);
        }
        public (bool, List<Component>) GetComponentMaster(int agentId)
        {
            Id sId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetComponentMaster();
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int agentId)
        {
            Id aId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(aId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetFileMasterInfo();
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath()
        {
            return (true, MasterPath);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.AgentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int agentId)
        {
            Id aId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(aId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetSession();
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _agentIdWiseSessionCache.Count; i++)
            {
                var info = _agentIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    list.AddRange(info.GetTechnicalInfo());
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.AgentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus()
        {
            if(_fileStatusDetails != null)
            {
                return _fileStatusDetails;
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus()
        {
            if (_componentStatusDetails != null)
            {
                return _componentStatusDetails;
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id agentId = new() { id = compInitReq.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public (bool,List<Component>) GetComponentMaster()
        {
            List<Component> componentList = new();
            if (_agentIdWiseSessionCache != null)
            {
                foreach(var componentwisecache in _agentIdWiseSessionCache.Values)
                {
                    if(componentwisecache!=null)
                    {
                        var resp = componentwisecache.GetComponentMaster();
                        if (resp.Item1)
                            componentList.AddRange(resp.Item2);

                    }
                };
            }
            return (true,componentList);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo()
        {
            if (_agentIdWiseSessionCache != null)
            {
                List<FileMasterInfo> fileList = new();
                foreach (var _segmentWiseFillCache in _agentIdWiseSessionCache.Values)
                {
                    if (_segmentWiseFillCache != null)
                    {
                        var res = _segmentWiseFillCache.GetFileMasterInfo();
                        if (res.Item1)
                        {
                            fileList.AddRange(res.Item2);
                        }
                    }
                };
                return (true, fileList);
            }
            return (false, new());
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class ComponentWiseCache
    {
        private AgentSessionInfo agentSessionInfo;
        private ConcurrentDictionary<Id, InstanceWiseCache> _componentIdWiseSessionCache;
        private ConcurrentDictionary<Id, FileTypeWiseFileCache> _segmentWiseFileCache;
        public ComponentWiseCache()
        {
            agentSessionInfo = new();
            _segmentWiseFileCache = new();
            _componentIdWiseSessionCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo1)
        {
            CacheUpdateHelper.UpdateObjectReference(agentSessionInfo1, agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id componentId = new() { id = agentFunctionalInfo.ComponentId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id componentId = new() { id = componentMaster.ComponentId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id segmentId = new() { id = fileMasterInfo.SegmentId };
            if (!_segmentWiseFileCache.TryGetValue(segmentId, out FileTypeWiseFileCache fileTypeWiseFileCache))
            {
                fileTypeWiseFileCache = new();
                _segmentWiseFileCache.TryAdd(segmentId, fileTypeWiseFileCache);
            }
            fileTypeWiseFileCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id componentId = new() { id = componentStatus.ComponentType };
            if (_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                instanceWiseCache.AddOrUpdate(componentStatus);
            }
        }
        public (bool, List<Component>) GetComponentMaster()
        {
            List<Component> componentMasters = new();
            for(int i=0; i<_componentIdWiseSessionCache.Count; i++)
            {
                var data = _componentIdWiseSessionCache.ElementAt(i);
                if(data.Value != null)
                {
                    componentMasters.AddRange(data.Value.GetComponentMaster());
                }
            }
            return (true, componentMasters);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo()
        {
            List<FileMasterInfo> fileMaster = new();
            for (int i = 0; i < _segmentWiseFileCache.Count; i++)
            {
                var data = _segmentWiseFileCache.ElementAt(i);
                if (data.Value != null)
                {
                    fileMaster.AddRange(data.Value.GetFileMasterInfo());
                }
            }
            return (true, fileMaster);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.CompId };
            if (_componentIdWiseSessionCache.TryGetValue(cId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                return instanceWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession()
        {
            if(agentSessionInfo != null)
            {
                return (true, agentSessionInfo);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _componentIdWiseSessionCache.Count; i++)
            {
                var info = _componentIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    var tecinfo = info.GetTechnicalInfo();
                    list.AddRange(tecinfo);
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.CompId };
            if (_componentIdWiseSessionCache.TryGetValue(cId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                return instanceWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id componentId = new() { id = compInitReq.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id componentId = new() { id = componentMaster.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id componentId = new() { id = componentMaster.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }

    }

    public class InstanceWiseCache
    {
        private ConcurrentDictionary<Id, Component> _instanceIdWiseSessionCache;
        public InstanceWiseCache()
        {
            _instanceIdWiseSessionCache = new();
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id instanceId = new() { id = agentFunctionalInfo.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new()
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }

            //sets High CPU Utilization
            if(component.componentsTechnicalInfo.CPUHigh == 0)
            {
                agentFunctionalInfo.CPUHigh = agentFunctionalInfo.CPUUtilization;
            }
            else if(component.componentsTechnicalInfo.CPUHigh < agentFunctionalInfo.CPUUtilization)
            {
                agentFunctionalInfo.CPUHigh = agentFunctionalInfo.CPUUtilization;
            }

            //sets Low CPU Utilization
            if (component.componentsTechnicalInfo.CPULow == 0)
            {
                agentFunctionalInfo.CPULow = agentFunctionalInfo.CPUUtilization;
            }
            else if (component.componentsTechnicalInfo.CPULow > agentFunctionalInfo.CPUUtilization)
            {
                agentFunctionalInfo.CPULow = agentFunctionalInfo.CPUUtilization;
            }

            //sets High RAM Utilization
            if (component.componentsTechnicalInfo.RAMHigh == 0)
            {
                agentFunctionalInfo.RAMHigh = agentFunctionalInfo.RAMUtilization;
            }
            else if (component.componentsTechnicalInfo.RAMHigh < agentFunctionalInfo.RAMUtilization)
            {
                agentFunctionalInfo.RAMHigh = agentFunctionalInfo.RAMUtilization;
            }
            else
            {
                agentFunctionalInfo.RAMHigh = component.componentsTechnicalInfo.RAMHigh;
            }

            //sets Low RAM Utilization
            if (component.componentsTechnicalInfo.RAMLow == 0)
            {
                agentFunctionalInfo.RAMLow = agentFunctionalInfo.RAMUtilization;
            }
            else if (component.componentsTechnicalInfo.RAMLow > agentFunctionalInfo.RAMUtilization)
            {
                agentFunctionalInfo.RAMLow = agentFunctionalInfo.RAMUtilization;
            }
            else
            {
                agentFunctionalInfo.RAMLow = component.componentsTechnicalInfo.RAMLow;
            }

            CacheUpdateHelper.UpdateObjectReference(agentFunctionalInfo, component.componentsTechnicalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new()
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
           else        //What is wrong in that else part why the componentname,agentid,instanceid is not display
            {
                component.componentMaster.ExePath=componentMaster.ExePath;
                component.componentMaster.CmdParam=componentMaster.CmdParam;
                component.componentMaster.InstanceId = componentMaster.InstanceId;
                component.componentMaster.IsRunAsService=componentMaster.IsRunAsService;
                component.componentMaster.ServiceName=componentMaster.ServiceName;
            }
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id instanceId = new() { id = componentStatus.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component) && component != null)
            {
                component.status = componentStatus.ComponentState;
            }
        }
        public List<Component> GetComponentMaster()
        {
            List<Component> componentMasters = new();
            for(int i=0; i<_instanceIdWiseSessionCache.Count; i++)
            {
                var data = _instanceIdWiseSessionCache.ElementAt(i);
                if(data.Value != null && data.Value.componentMaster != null && data.Value.componentMaster.IsActive==true && data.Value.componentMaster.IsDelete == false)
                {
                    componentMasters.Add(data.Value);
                }
            }
            return componentMasters;
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(cId, out Component component) && component != null)
            {
                if(component.componentMaster != null)
                {
                    return (true, component.componentMaster);
                }
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _instanceIdWiseSessionCache.Count; i++)
            {
                var info = _instanceIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    if(info.componentsTechnicalInfo != null && info.componentsTechnicalInfo.InstanceId != 0 && info.componentsTechnicalInfo.ComponentId !=0)
                    {
                        list.Add(info.componentsTechnicalInfo);
                    }
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(cId, out Component component) && component != null)
            {
                if (component.componentMaster != null)
                {
                    return (true, component.componentsTechnicalInfo);
                }
            }
            return (false, null);
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id instanceId = new() { id = compInitReq.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new(),
                    isRequestSend= flag,
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
            component.isRequestSend= flag;
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                if(component.componentMaster!=null)
                {
                    component.componentMaster.IsActive = flag;
                }
               
                //_instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                if (component.componentMaster != null)
                {
                    component.componentMaster.IsDelete = flag;
                }

               // _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
        }

    }

    public class FileTypeWiseFileCache
    {
        private ConcurrentDictionary<Id, FileMasterInfo> _fileTypeWiseFileCache;
        public FileTypeWiseFileCache()
        {
            _fileTypeWiseFileCache = new();
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id fileId = new() { id = fileMasterInfo.FileType };
            if (!_fileTypeWiseFileCache.TryGetValue(fileId, out FileMasterInfo fileInfo))
            {
                fileInfo = new();
                _fileTypeWiseFileCache.TryAdd(fileId, fileInfo);
            }
            else
            {
                fileInfo.FileName = fileMasterInfo.FileName;
                fileInfo.Priority = fileMasterInfo.Priority;
                fileInfo.IsUploadBeforeBOD = fileMasterInfo.IsUploadBeforeBOD;
                fileInfo.DestinationPath = fileMasterInfo.DestinationPath;

            }
        }
        public List<FileMasterInfo> GetFileMasterInfo()
        {
            List<FileMasterInfo> fileMaster = new();
            for (int i = 0; i < _fileTypeWiseFileCache.Count; i++)
            {
                var data = _fileTypeWiseFileCache.ElementAt(i);
                if (data.Value != null && data.Value != null)
                {
                    fileMaster.Add(data.Value);
                }
            }
            return fileMaster;
        }
    }

    public class AgentSessionInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public string IP;
        public string AgentName;
        public SocketSession Session;
        public bool IsConnected;
    }

    public class Component
    {
        public int status;
        public bool isRequestSend;
        public bool isenabled;
        public ComponentMaster componentMaster;
        public ComponentsTechnicalInfo componentsTechnicalInfo;
    }

    public class ComponentMaster
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public int ComponentId;
        public string AgentName;
        public string ComponentName;
        public int InstanceId;
        public string ExePath;
        public string CmdParam;
        public bool IsRunAsService;
        public string ServiceName;
        public int Priority;
        public double CpuThresholdLimit;
        public double RamThresholdLimit;
        public bool IsActive=true;
        public bool IsDelete=false;
    }

    public class ComponentsTechnicalInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public string AgentName;
        public string ComponentName;
        public int ComponentId;
        public int InstanceId;
        public double RAMUtilization;
        public double CPUUtilization;
        public double CPUHigh;
        public double CPULow;
        public double RAMHigh;
        public double RAMLow;
        public string Timestamp;
    }

    public class FileMasterInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public int SegmentId;
        public int FileType;
        public string FileName;
        public int Priority;
        public string DestinationPath;
        public bool IsUploadBeforeBOD;
    }
}






@model LoginSignupCore.Models.ComponentLogViewModel
@{
    ViewData["Title"] = "Component Logs";
}

<div class="container mt-4">
    <div class="cstm_heading">
        <h1 class="d-flex">Real-Time Component Log Viewer</h1>
        <h5 class="text-muted">Broker ID: @Model.BrokerId | Site ID: @Model.SiteId</h5>
    </div>

    <div class="row mb-3 mt-4">
        <div class="col-md-5">
            <label for="componentSelect" class="form-label">Component</label>
            <select id="componentSelect" class="form-select" asp-items="@Model.Components">
                <option value="">-- Select a Component --</option>
            </select>
        </div>
        <div class="col-md-5">
            <label for="logTypeSelect" class="form-label">Log Level</label>
            <select id="logTypeSelect" class="form-select" asp-items="@Model.LogTypes">
                 <option value="">-- Select a Log Level --</option>
            </select>
        </div>
    </div>

    <hr />

    <h4>Logs</h4>
    <div id="log-display" class="p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; height: 600px; overflow-y: auto; font-family: monospace; white-space: pre-wrap;">
        <p class="text-muted">Select a component and log level to see logs.</p>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            let logInterval;

            function fetchLogs() {
                const componentValue = $('#componentSelect').val();
                const logType = $('#logTypeSelect').val();

                if (!componentValue || !logType) {
                    return; // Do nothing if selections are incomplete
                }
                
                // Parse the composite key from the component dropdown
                const ids = componentValue.split(':');
                const agentId = ids[0];
                const componentId = ids[1];
                const instanceId = ids[2];

                $.ajax({
                    url: '@Url.Action("GetLogs", "ComponentAssign")', // Correctly points to the new action
                    type: 'GET',
                    data: {
                        brokerId: @Model.BrokerId,
                        siteId: @Model.SiteId,
                        agentId: agentId,
                        componentId: componentId,
                        instanceId: instanceId,
                        logType: logType
                    },
                    success: function (logs) {
                        const logDisplay = $('#log-display');
                        logDisplay.empty();

                        if (logs.length === 0) {
                            logDisplay.html('<p class="text-muted">No logs found for this selection.</p>');
                            return;
                        }

                        $.each(logs, function (index, log) {
                            const timestamp = new Date(log.timestamp).toLocaleString();
                            const logClass = getLogLevelClass(log.logLevel);
                            const logHtml = `<div><span style="color: #6c757d;">[${timestamp}]</span> <span class="fw-bold ${logClass}">${getLogLevelName(log.logLevel)}:</span> <span>${log.message}</span></div>`;
                            logDisplay.append(logHtml);
                        });
                    },
                    error: function () {
                        $('#log-display').html('<p class="text-danger">An error occurred while fetching logs.</p>');
                    }
                });
            }

            function startLogFetching() {
                if (logInterval) clearInterval(logInterval);
                fetchLogs(); 
                logInterval = setInterval(fetchLogs, 3000); 
            }
            
            $('#componentSelect, #logTypeSelect').on('change', startLogFetching);

            function getLogLevelClass(level) {
                switch(level) {
                    case 0: return 'text-secondary'; // Verbose
                    case 1: return 'text-info';      // Debug
                    case 2: return 'text-primary';   // Info
                    case 3: return 'text-warning';   // Warning
                    case 4: return 'text-danger';    // Error
                    case 5: return 'text-danger fw-bold'; // Fatal
                    default: return 'text-dark';
                }
            }

            function getLogLevelName(level) {
                switch(level) {
                    case 0: return 'VERBOSE';
                    case 1: return 'DEBUG';
                    case 2: return 'INFO';
                    case 3: return 'WARNING';
                    case 4: return 'ERROR';
                    case 5: return 'FATAL';
                    default: return 'UNKNOWN';
                }
            }
        });
    </script>
}



