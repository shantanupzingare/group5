namespace Sharemodel
{
    public class Request
    {
        public string? Action { get; set; }
        public object? Payload { get; set; }
    }
    public class LoginPayload
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
    public class Studentpayload
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? Subject { get; set; }
        public int? Marks { get; set; }
    }
}



using System.Net.Sockets;
using System.Text;
using Newtonsoft.Json;

namespace UserInterface.Services
{
    public class TcpService
    {
        public static string SendRequest(object request)
        {
            var json = JsonConvert.SerializeObject(request);
            using TcpClient client = new TcpClient("127.0.0.1", 8888);
            NetworkStream stream = client.GetStream();
            byte[] data = Encoding.UTF8.GetBytes(json);
            stream.Write(data, 0, data.Length);

            byte[] buffer = new byte[4096];
            int read = stream.Read(buffer, 0, buffer.Length);
            return Encoding.UTF8.GetString(buffer, 0, read);
        }
    }
}



using Sharemodel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UserInterface.Services;

namespace UserInterface.ViewModels
{
   public class LoginViewModel
{
    public string? Username { get; set; }
    public string? Password { get; set; }

    public string Login()
    {
        var req = new Request
        {
            Action = "LOGIN",
            Payload = new LoginPayload { Username = Username, Password = Password }
        };
        return TcpService.SendRequest(req);
    }
}
}



using Sharemodel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UserInterface.Services;

namespace UserInterface.ViewModels
{
    public class StudentViewModel
   {
    public Studentpayload Student { get; set; } = new Studentpayload();

    public string Insert() => Send("INSERT");
    public string Update() => Send("UPDATE");
    public string Delete() => Send("DELETE");

        public string Fetch() => Send("FETCH");

    private string Send(string action)
    {
        var req = new Request
        {
            Action = action,
            Payload = Student
        };
        return TcpService.SendRequest(req);
    }
}

}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using UserInterface.ViewModels;

namespace UserInterface
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        private void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new LoginViewModel { Username = txtUser.Text, Password = txtPass.Password };
            var result = vm.Login();
            MessageBox.Show(result);
            if (result == "LOGIN_SUCCESS")
            {
                StudentWindow win = new StudentWindow();
                win.Show();
                this.Close();
            }
        }
    }
}


<Window x:Class="UserInterface.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Login" Height="330" Width="350" Background="#f7f7f7"
        WindowStartupLocation="CenterScreen">
    <Border BorderBrush="#ccc" BorderThickness="1" CornerRadius="10" Margin="10" Padding="20" Background="White">
        <StackPanel>
            <TextBlock Text="Login" FontSize="20" FontWeight="Bold" Margin="0,0,0,15" HorizontalAlignment="Center" Foreground="#333"/>

            <TextBlock Text="Username" FontWeight="SemiBold" Foreground="#666" Margin="0,5,0,2"/>
            <TextBox x:Name="txtUser" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Password" FontWeight="SemiBold" Foreground="#666" Margin="0,10,0,2"/>
            <PasswordBox x:Name="txtPass" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <Button Content="Login" Click="LoginButton_Click" Height="35" Margin="0,20,0,0"
                    Background="#0078D7" Foreground="White" FontWeight="Bold" BorderBrush="#0078D7"/>
        </StackPanel>
    </Border>
</Window>




using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using UserInterface.ViewModels;

namespace UserInterface
{
    /// <summary>
    /// Interaction logic for StudentWindow.xaml
    /// </summary>
    public partial class StudentWindow : Window
    {
        public ObservableCollection<StudentViewModel> Students { get; set; } = new ObservableCollection<StudentViewModel>();
        public StudentWindow()
        {
            InitializeComponent();
            dgStudents.ItemsSource= Students;
        }
        private void InsertButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            vm.Student.Name = txtName.Text;
            vm.Student.Email = txtEmail.Text;
            vm.Student.Subject = txtSubject.Text;
            vm.Student.Marks = int.Parse(txtMarks.Text);
            MessageBox.Show(vm.Insert());
        }

        private void UpdateButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            vm.Student.Name = txtName.Text;
            vm.Student.Email = txtEmail.Text;
            vm.Student.Subject = txtSubject.Text;
            vm.Student.Marks = int.Parse(txtMarks.Text);
            MessageBox.Show(vm.Update());
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            vm.Student.Id = int.Parse(txtId.Text);
            MessageBox.Show(vm.Delete());
        }
        private void FetchButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = new StudentViewModel();
            string jsonResponse = vm.Fetch();

            try
            {
                var studentList = JsonConvert.DeserializeObject<List<Sharemodel.Studentpayload>>(jsonResponse);

                if (studentList != null)
                {
                    Students.Clear();
                    foreach (var s in studentList)
                    {
                        Students.Add(new StudentViewModel { Student = s });
                    }
                    MessageBox.Show("Data fetched successfully!");
                }
                else
                {
                    MessageBox.Show("No student data received.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error parsing student data: {ex.Message}");
            }
        }

    }
}


<Window x:Class="UserInterface.StudentWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Student Form" Height="600" Width="600" Background="#f7f7f7"
        WindowStartupLocation="CenterScreen">
    <Border BorderBrush="#ccc" BorderThickness="1" CornerRadius="10" Margin="10" Padding="20" Background="White">
        <StackPanel>
            <TextBlock Text="Student Form" FontSize="22" FontWeight="Bold" Margin="0,0,0,15" HorizontalAlignment="Center" Foreground="#333"/>

            <TextBlock Text="Student ID" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtId" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Name" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtName" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Email" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtEmail" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Subject" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtSubject" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <TextBlock Text="Marks" Margin="0,5,0,2" FontWeight="SemiBold" Foreground="#555"/>
            <TextBox x:Name="txtMarks" Height="30" FontSize="14" Padding="5" Background="#fafafa" BorderBrush="#ccc" BorderThickness="1"/>

            <StackPanel Orientation="Horizontal" Margin="0,20,0,10" HorizontalAlignment="Center">
                <Button Content="Insert" Click="InsertButton_Click" Width="75" Margin="10,0"
                        Background="#28a745" Foreground="White" FontWeight="Bold" BorderBrush="#28a745"/>
                <Button Content="Update" Click="UpdateButton_Click" Width="75" Margin="10,0"
                        Background="#ffc107" Foreground="Black" FontWeight="Bold" BorderBrush="#ffc107"/>
                <Button Content="Delete" Click="DeleteButton_Click" Width="75" Margin="10,0"
                        Background="#dc3545" Foreground="White" FontWeight="Bold" BorderBrush="#dc3545"/>
                <Button Content="Fetch" Click="FetchButton_Click" Width="75" Margin="10,0"
                        Background="#007bff" Foreground="White" FontWeight="Bold" BorderBrush="#007bff"/>
            </StackPanel>

            <DataGrid x:Name="dgStudents" AutoGenerateColumns="False" Height="250" Margin="0,10,0,0" CanUserAddRows="False" IsReadOnly="True" >
                <DataGrid.Columns>
                    <DataGridTextColumn Header="ID" Binding="{Binding Id}" Width="Auto"/>
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                    <DataGridTextColumn Header="Email" Binding="{Binding Email}" Width="*"/>
                    <DataGridTextColumn Header="Subject" Binding="{Binding Subject}" Width="*"/>
                    <DataGridTextColumn Header="Marks" Binding="{Binding Marks}" Width="Auto"/>
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Border>
</Window>




using System.Net.Sockets;
using System.Text;
using Newtonsoft.Json;

namespace UserInterface.Services
{
    public class TcpService
    {
        public static string SendRequest(object request)
        {
            var json = JsonConvert.SerializeObject(request);
            using TcpClient client = new TcpClient("127.0.0.1", 8888);
            NetworkStream stream = client.GetStream();
            byte[] data = Encoding.UTF8.GetBytes(json);
            stream.Write(data, 0, data.Length);

            byte[] buffer = new byte[4096];
            int read = stream.Read(buffer, 0, buffer.Length);
            return Encoding.UTF8.GetString(buffer, 0, read);
        }
    }
}






﻿using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.BroadcastSystem;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ConsumerDBComponent.Common;
using static CTCL.BinaryProtocol.AssetManger.CTCL_AssetManger;
using CTCL.BinaryProtocol.Common.CTCL.Common;

namespace ConsumerDBComponent.MessageProcessor
{
    internal class BcastIndexProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response processBcastIndexMessageData(BCAST_MKT_INDEX BcastIndex)
        {
            Response response = new Response();

            try
            {
                DataTable dt = new DataTable();

                DataColumn COLUMN = new DataColumn();
                COLUMN.ColumnName = "SegmentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "SegmentToken";
                COLUMN.DataType = typeof(Int64);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "IndexName";
                COLUMN.DataType = typeof(string);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "IndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "HighIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "LowIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "OpeningIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "ClosingIndexValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "PercentChange";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "YearlyHigh";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "YearlyLow";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "UpMoves";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "DownMoves";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "Capitalisation";
                COLUMN.DataType = typeof(float);
                dt.Columns.Add(COLUMN);


                COLUMN = new DataColumn();
                COLUMN.ColumnName = "NeChange";
                COLUMN.DataType = typeof(char);
                dt.Columns.Add(COLUMN);


               

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "Filler1";
                COLUMN.DataType = typeof(char);
                dt.Columns.Add(COLUMN);


                for (int i=0;i< BcastIndex.NoOfRecords.NoOfRecords;i++)
                for (int i = 0; i < BcastIndex.NoOfRecords.NoOfRecords; i++)
                {
                    DataRow DR = dt.NewRow();
                    DR[0] = BcastIndex.BroadcastMessageHeader.MessageHeader.ExchangeSegmentId.SegmentId;
                    DR[10] = BcastIndex.Indexes[i].YearlyLow.IndexValue;
                    DR[11] = BcastIndex.Indexes[i].UpMoves.NoOfMoves;
                    DR[12] = BcastIndex.Indexes[i].DownMoves.NoOfMoves;
                    DR[13] =BcastIndex.Indexes[i].Capitalisation.MarketCapitalisation;
                    DR[14] = BcastIndex.Indexes[i].NetChangeIndicator.NetChangeIndicator[0];                  
                    DR[13] = BcastIndex.Indexes[i].Capitalisation.MarketCapitalisation;
                    DR[14] = BcastIndex.Indexes[i].NetChangeIndicator.NetChangeIndicator[0];
                    DR[15] = BcastIndex.Indexes[i].Filler1.Filler1[0];
                    DR[16] = DateTime.Now.Ticks;
                    DR[17] = DateTime.Now.Ticks;
                    dt.Rows.Add(DR);
                }
               

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                try
                {
                    PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
                    PersistSqlConn.Open();
                }
                    if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                    {
                        PersistSqlConn = new SqlConnection(Constant.DbConnectionString);
                        PersistSqlConn.Open();
                    }

                using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
                    using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                    {
                        using (SqlCommand cmd = new SqlCommand("[dbo].[usp_MarketIndex_insupd]"))
                        using (SqlConnection con = new SqlConnection(Constant.DbConnectionString))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;
                            cmd.Parameters.AddWithValue("@MarketIndex", dt);
                            con.Open();
                            cmd.ExecuteNonQuery();
                            con.Close();
                            using (SqlCommand cmd = new SqlCommand("[dbo].[usp_MarketIndex_insupd]"))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;
                                cmd.Parameters.AddWithValue("@MarketIndex", dt);
                                con.Open();
                                cmd.ExecuteNonQuery();
                                con.Close();
                            }
                        }
                    }

                    tran.Commit();
                        tran.Commit();

                    }
                    Log.Info("BCastIndex data saved to database.");
                    return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");
                }
                catch (Exception ex)
                {
                    PushDataForDeadPoolQ(BcastIndex);
                    return response.Set(StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
                }
                Log.Info("BCastIndex data saved to database.");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");

            }
            catch (Exception ex)
            {
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
            }
        }
        internal bool PushDataForDeadPoolQ(BCAST_MKT_INDEX BcastIndex)
        {
            bool result = true;
            bool response = true;

            CommonMessagePublisher messagePublisher = new CommonMessagePublisher();
            response = messagePublisher.PublishMessageInDeadPoolQ(BcastIndex); //publishing to DeadPoolQ
            if (!response)
            {
                return result = false;
            }
            return result;


        }

    }
}
                DataTable dt = new DataTable();

                if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.NSE_CM)
                { 
                {
                    DataColumn COLUMN = new DataColumn();
                    COLUMN.ColumnName = "intTokenNo";
                    COLUMN.DataType = typeof(int);

                    dt.Rows.Add(DR);
                }

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                { 
                     PersistSqlConn = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb);
                     PersistSqlConn.Open();
                }
                

                using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                try
                {
                    using (SqlConnection con = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb))
                    if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                    {
                        string procedureName = "";
                        string typeParameter = "";
                        
                        if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.NSE_CM)
                        {
                            procedureName = "[dbo].[usp_UpdDPR_upd]";
                            typeParameter = "@NSECMSecurityMasterDPR";
                        PersistSqlConn = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb);
                        PersistSqlConn.Open();
                    }

                        }
                        else if(dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.BSE_CM)
                        {
                            procedureName = "[dbo].[usp_BSE_UpdDPR_upd]";
                            typeParameter = "@BSECMSecurityMasterDPR";
                        }
                        using (SqlCommand cmd = new SqlCommand(procedureName))

                    using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                    {
                        using (SqlConnection con = new SqlConnection(Constant.DbConnectionStringCTCLCommonDb))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;  
                            cmd.Connection = con;
                            cmd.Parameters.AddWithValue(typeParameter, dt);
                            con.Open();
                            cmd.ExecuteNonQuery();
                            con.Close();
                            string procedureName = "";
                            string typeParameter = "";

                            if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.NSE_CM)
                            {
                                procedureName = "[dbo].[usp_UpdDPR_upd]";
                                typeParameter = "@NSECMSecurityMasterDPR";

                            }
                            else if (dprUpdate.messageHeader.ExchangeSegmentId.SegmentId == (int)CTCL_ExchangeIdentifier.BSE_CM)
                            {
                                procedureName = "[dbo].[usp_BSE_UpdDPR_upd]";
                                typeParameter = "@BSECMSecurityMasterDPR";
                            }
                            using (SqlCommand cmd = new SqlCommand(procedureName))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;
                                cmd.Parameters.AddWithValue(typeParameter, dt);
                                con.Open();
                                cmd.ExecuteNonQuery();
                                con.Close();
                            }
                        }
                    }

                    tran.Commit();
                        tran.Commit();

                    }
                    Log.Info("DPR Update data saved to database.");
                    return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");
                }
                Log.Info("DPR Update data saved to database.");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "BCastIndex data uploaded Sucessfully");

                catch (Exception ex)
                {
                    PushDataForDeadPoolQ(dprUpdate);
                    return response.Set(StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
                }           
            }
            catch (Exception ex)
            {
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Failure, "Error Occured at BCastIndex Data Insert :" + ex.Message);
            }
        }


        internal bool PushDataForDeadPoolQ(CTCL_DPR_UPDATE dprUpdate)
        {
            bool result = true;
            bool response = true;
                       
                CommonMessagePublisher messagePublisher = new CommonMessagePublisher();
                response = messagePublisher.PublishMessageInDeadPoolQ(dprUpdate); //publishing to DeadPoolQ
                if (!response)
                {
                    return result = false;
                }
            return result;
           
           
        }
    }
}

