Msg 2715, Level 16, State 3, Procedure usp_UpsertStudentData, Line 12
Column, parameter, or variable #1: Cannot find data type StudentDataType.
Parameter or variable '@StudentData' has an invalid data type.
Msg 1087, Level 16, State 1, Procedure usp_UpsertStudentData, Line 17
Must declare the table variable "@StudentData".


create table StudentData(
Id INT PRIMARY KEY,
Name NVARCHAR(100),
Email NVARCHAR(100),
Subject NVARCHAR(100),
Marks INT
);
SELECT * FROM StudentData;


CREATE PROCEDURE usp_UpsertStudentData
@StudentData StudentDataType READONLY
as
Begin
Set NOCOUNT ON;
MERGE INTO STUDENTDATA AS TARGET
USING @STUDENTDATA AS SOURCE
ON TARGET.ID=SOURCE.ID
WHEN MATCHED THEN
UPDATE SET
NAME=SOURCE.NAME,
EMAIL=SOURCE.EMAIL,
SUBJECT=SOURCE.SUBJECT,
MARKS=SOURCE.MARKS
WHEN NOT MATCHED BY TARGET THEN
INSERT(ID,NAME,EMAIL,SUBJECT,MARKS)
VALUES(SOURCE.ID,SOURCE.NAME,SOURCE.EMAIL,SOURCE.SUBJECT,SOURCE.MARKS);
END;


CREATE PROCEDURE usp_UpsertStudentData
    @StudentData StudentDataType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Deduplicate by keeping only the LAST row per ID
    ;WITH LastRecordPerID AS (
        SELECT *
        FROM (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY ID ORDER BY (SELECT NULL) DESC) AS rn
            FROM @StudentData
        ) AS numbered
        WHERE rn = 1
    )

    MERGE INTO StudentData AS target
    USING LastRecordPerID AS source
    ON target.ID = source.ID
    WHEN MATCHED THEN 
        UPDATE SET 
            Name = source.Name,
            Email = source.Email,
            Subject = source.Subject,
            Marks = source.Marks
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (ID, Name, Email, Subject, Marks)
        VALUES (source.ID, source.Name, source.Email, source.Subject, source.Marks);
END;


CREATE PROCEDURE usp_UpsertStudentData
    @StudentData StudentDataType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Step 1: Deduplicate source by keeping only the last row per Id
    WITH DeduplicatedSource AS (
        SELECT *
        FROM (
            SELECT *, 
                   ROW_NUMBER() OVER (PARTITION BY Id ORDER BY (SELECT NULL)) AS rn
            FROM @StudentData
        ) AS numbered
        WHERE rn = 1
    )

    -- Step 2: Delete existing rows in the target table that match incoming Ids
    DELETE FROM StudentData
    WHERE Id IN (SELECT Id FROM DeduplicatedSource);

    -- Step 3: Insert latest version of rows into the target table
    INSERT INTO StudentData (Id, Name, Email, Subject, Marks)
    SELECT Id, Name, Email, Subject, Marks
    FROM DeduplicatedSource;
END;



CREATE PROCEDURE usp_UpsertStudentData
    @StudentData StudentDataType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Deduplicate the source data by keeping only the LAST occurrence of each ID
    ;WITH LastRecordPerID AS (
        SELECT *
        FROM (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY ID ORDER BY (SELECT NULL) DESC) AS rn
            FROM @StudentData
        ) AS numbered
        WHERE rn = 1
    )

    -- Perform the UPSERT (update if exists, insert if not)
    MERGE INTO StudentData AS target
    USING LastRecordPerID AS source
    ON target.ID = source.ID
    WHEN MATCHED THEN 
        UPDATE SET 
            Name = source.Name,
            Email = source.Email,
            Subject = source.Subject,
            Marks = source.Marks
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (ID, Name, Email, Subject, Marks)
        VALUES (source.ID, source.Name, source.Email, source.Subject, source.Marks);
END;

using ExcelDataReader;
using System.Data;
using System.Data.SqlClient;
using System.IO;

namespace Bulkinsert1
{
    internal class Program
    {
        private static readonly string folderloc = @"C:\Users\Shantanu\Downloads";
        private static readonly string connectionstring = @"Data Source=10.100.1.57;Initial Catalog=Sample1;User ID=sa;Password=Sa@123;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
        private static readonly string targetTable = "StudentData";

        static void Main(string[] args)
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            // Process any existing Excel files on startup
            foreach (string filePath in Directory.GetFiles(folderloc, "*.xlsx"))
            {
                ProcessExcelFile(filePath);
            }

            //Watch for new files
            using FileSystemWatcher watcher = new FileSystemWatcher(folderloc, "*.xlsx")
            {
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite
            };

            watcher.Created += OnNewExcelFile;
            watcher.EnableRaisingEvents = true;

            Console.WriteLine("Watching folder for new Excel files...");
            Console.ReadLine();
        }

        private static void OnNewExcelFile(object sender, FileSystemEventArgs e)
        {
            try
            {
                ProcessExcelFile(e.FullPath);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
        private static void ProcessExcelFile(string filePath)
        {
            try
            {
                Console.WriteLine($"Processing File: {Path.GetFileName(filePath)}");
                System.Threading.Thread.Sleep(2000); // Ensure file write is complete

                using FileStream stream = File.Open(filePath, FileMode.Open, FileAccess.Read);
                using IExcelDataReader reader = ExcelReaderFactory.CreateReader(stream);

                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = _ => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

                DataTable dataTable = result.Tables[0];
                BulkInsertToSQL(dataTable);
                Console.WriteLine(" Data inserted successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file '{Path.GetFileName(filePath)}': {ex.Message}");
            }
        }

        private static void BulkInsertToSQL(DataTable dataTable)
        {
            using SqlConnection conn = new SqlConnection(connectionstring);
            using SqlCommand cmd = new SqlCommand("usp_UpsertStudentData", conn)
            {
                CommandType = CommandType.StoredProcedure
            };
            //MAP C# dATATABLE TO SQL TVP
            SqlParameter tvpParam = cmd.Parameters.AddWithValue("@StudentData", dataTable);
            tvpParam.SqlDbType = SqlDbType.Structured;
            conn.Open();
            cmd.ExecuteNonQuery();

           
        }
    }
}











-- SQL Stored Procedure (Make sure StudentDataType is already created)
-- If not, create it first:
-- CREATE TYPE StudentDataType AS TABLE (Id INT, Name NVARCHAR(100), Email NVARCHAR(100), Subject NVARCHAR(100), Marks INT);

CREATE PROCEDURE usp_UpsertStudentData
    @StudentData StudentDataType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Deduplicate the source data by keeping only the LAST occurrence of each ID
    ;WITH LastRecordPerID AS (
        SELECT *
        FROM (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY ID ORDER BY (SELECT NULL) DESC) AS rn
            FROM @StudentData
        ) AS numbered
        WHERE rn = 1
    )

    -- Perform the UPSERT (update if exists, insert if not)
    MERGE INTO StudentData AS target
    USING LastRecordPerID AS source
    ON target.ID = source.ID
    WHEN MATCHED THEN 
        UPDATE SET 
            Name = source.Name,
            Email = source.Email,
            Subject = source.Subject,
            Marks = source.Marks
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (ID, Name, Email, Subject, Marks)
        VALUES (source.ID, source.Name, source.Email, source.Subject, source.Marks);
END;

// ------------------------ C# Program ------------------------------

using ExcelDataReader;
using System.Data;
using System.Data.SqlClient;
using System.IO;

namespace Bulkinsert1
{
    internal class Program
    {
        private static readonly string folderloc = @"C:\\Users\\Shantanu\\Downloads";
        private static readonly string connectionstring = @"Data Source=10.100.1.57;Initial Catalog=Sample1;User ID=sa;Password=Sa@123;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";

        static void Main(string[] args)
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            foreach (string filePath in Directory.GetFiles(folderloc, "*.xlsx"))
            {
                ProcessExcelFile(filePath);
            }

            using FileSystemWatcher watcher = new FileSystemWatcher(folderloc, "*.xlsx")
            {
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite
            };

            watcher.Created += OnNewExcelFile;
            watcher.EnableRaisingEvents = true;

            Console.WriteLine("Watching folder for new Excel files...");
            Console.ReadLine();
        }

        private static void OnNewExcelFile(object sender, FileSystemEventArgs e)
        {
            try
            {
                ProcessExcelFile(e.FullPath);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static void ProcessExcelFile(string filePath)
        {
            try
            {
                Console.WriteLine($"Processing File: {Path.GetFileName(filePath)}");
                System.Threading.Thread.Sleep(2000);

                using FileStream stream = File.Open(filePath, FileMode.Open, FileAccess.Read);
                using IExcelDataReader reader = ExcelReaderFactory.CreateReader(stream);

                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = _ => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

                DataTable dataTable = result.Tables[0];
                BulkInsertToSQL(dataTable);
                Console.WriteLine("Data inserted successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file '{Path.GetFileName(filePath)}': {ex.Message}");
            }
        }

        private static void BulkInsertToSQL(DataTable dataTable)
        {
            using SqlConnection conn = new SqlConnection(connectionstring);
            using SqlCommand cmd = new SqlCommand("usp_UpsertStudentData", conn)
            {
                CommandType = CommandType.StoredProcedure
            };

            SqlParameter tvpParam = cmd.Parameters.AddWithValue("@StudentData", dataTable);
            tvpParam.SqlDbType = SqlDbType.Structured;

            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }
}

