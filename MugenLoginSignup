using CTCL.BinaryProtocol.Common.CMA.Enum;
using Exchange.WebSocketServer.SocketManager;
using LoginSignupCore.Global;
using LoginSignupCore.Models;
using LoginSignupCore.Models.Others;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using Newtonsoft.Json;
using Utility.Queueing;

namespace LoginSignupCore.Core
{
    public class InteractiveProcessQueue
    {
        private ProcessQueue<DataFlowModel> interactiveMessageQueue;
        Thread thread;
        ManualResetEvent _mre;
        public InteractiveProcessQueue()
        {
            interactiveMessageQueue = new ProcessQueue<DataFlowModel>();
            _mre = new ManualResetEvent(false);
            DrainerThreadInit();
        }

        public void Enqueue(DataFlowModel message)
        {
            interactiveMessageQueue.Enqueue(message);
        }
        private void DrainerThreadInit()
        {
            thread = new Thread(new ThreadStart(DrainMessage));
            thread.Start();
        }
        private void DrainMessage()
        {
            while (true)
            {
                if (interactiveMessageQueue.TryDequeue(out DataFlowModel message))
                {
                    try
                    {
                        //Process message
                        ProcessMessage(message);
                    }
                    catch (System.Exception ex)
                    {
                        Log.Error(message, $"Exception occured on message process {ex.Message}");
                    }
                }
            }
        }
        private void ProcessMessage(DataFlowModel message)
        {
            try
            {
                if (message.Data != null)
                {
                    string reqData = message.Data.ToString();
                    var baseResponse = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                    if (baseResponse != null)
                    {
                        var opcode = (CMA_OpCode)baseResponse.MessageCode;
                        switch (opcode)
                        {
                            case CMA_OpCode.AGENT_HANDSHAKE_REQ:
                                {
                                    Log.Info($"Received AGENT_HANDSHAKE_REQ");
                                    var agentHandshakeReq = JsonConvert.DeserializeObject<AgentHandshakeReq>(reqData);
                                    if (agentHandshakeReq != null)
                                    {
                                        var data = CoreProcess.ipSessionCache.Get(agentHandshakeReq.IP);

                                        //update socket session in sgent wise cache

                                        if (data.Item1)
                                        {
                                            data.Item2.Session = message.Token;
                                            AgentSessionWs agentSessionWs = new()
                                            {
                                                AgentId = data.Item2.AgentId,
                                                BrokerId = data.Item2.BrokerId,
                                                SiteId = data.Item2.SiteId,
                                            };
                                            CoreProcess.webSocketIdWiseSession.AddOrUpdate(new WebSocketSessionToken() { webSocketSessionToken = message.Token.Context.Channel.Id.AsShortText() }, agentSessionWs);
                                            CoreProcess.agentSessionCache.AddOrUpdate(data.Item2);
                                            MsgHeader res = new()
                                            {
                                                MessageCode = (int)CMA_OpCode.AGENT_HANDSHAKE_RES,
                                                AgentId = data.Item2.AgentId,
                                                BrokerId = data.Item2.BrokerId,
                                                SiteId = data.Item2.SiteId
                                            };
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = res });
                                        }
                                        else
                                        {
                                            Log.Error($"Data not found | {agentHandshakeReq.IP} not found");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing AGENT_HANDSHAKE_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.LOGIN_REQ:
                                {
                                    Log.Info($"Received LoginRequest");
                                    var loginReq = JsonConvert.DeserializeObject<LoginRequest>(reqData);
                                    if (loginReq != null)
                                    {

                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing LoginRequest");
                                    }
                                }
                                break;

                            case CMA_OpCode.COMPONENT_INFO_REQ:
                                {
                                    Log.Info($"Received COMPONENT_INFO_REQ");
                                    var compInfoReq = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                                    if (compInfoReq != null)
                                    {
                                        var compList = CoreProcess.agentSessionCache.GetComponentMaster(compInfoReq.BrokerId, compInfoReq.SiteId, compInfoReq.AgentId);
                                        if (compList.Item1)
                                        {
                                            var responseData = Helper.PrepareComponentInfoResponse(compList.Item2);
                                            responseData.MessageCode = (int)CMA_OpCode.COMPONENT_INFO_RES;
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = responseData });
                                        }
                                        else
                                        {
                                            Log.Error($"Error while fetching Compoent Master Data");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing COMPONENT_INFO_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.FILE_INFO_REQ:
                                {
                                    Log.Info($"Received FILE_INFO_REQ");
                                    var fileInfoReq = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                                    if (fileInfoReq != null)
                                    {
                                        var fileList = CoreProcess.agentSessionCache.GetFileMasterInfo(fileInfoReq.BrokerId, fileInfoReq.SiteId, fileInfoReq.AgentId);
                                        if (fileList.Item1)
                                        {
                                            var responseData = Helper.PrepareFileInfoResponse(fileList.Item2);
                                            var masterPath = CoreProcess.agentSessionCache.GetMasterPath(fileInfoReq.BrokerId, fileInfoReq.SiteId);
                                            responseData.MessageCode = (int)CMA_OpCode.FILE_INFO_RES;
                                            if (masterPath.Item1 && masterPath.Item2 != null)
                                            {
                                                responseData.MasterPath = masterPath.Item2;
                                            }
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = responseData });
                                        }
                                        else
                                        {
                                            Log.Error($"Error while fetching FILE_INFO_REQ Data");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing FILE_INFO_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.FILE_UPLOAD_CONFIRMATION:
                                {
                                    Log.Info($"Received FILE_UPLOAD_CONFIRMATION");
                                    var fileStatus = JsonConvert.DeserializeObject<FileStatus>(reqData);
                                    if (fileStatus != null)
                                    {
                                        CoreProcess.agentSessionCache.AddOrUpdate(fileStatus);
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing FILE_UPLOAD_CONFIRMATION");
                                    }
                                }
                                break;

                            case CMA_OpCode.COMPONENT_STATE_UPDATE:
                                {
                                    Log.Info($"Received COMPONENT_STATE_UPDATE");
                                    var compStatus = JsonConvert.DeserializeObject<ComponentStatus>(reqData);
                                    if (compStatus != null)
                                    {
                                        CoreProcess.agentSessionCache.AddOrUpdate(compStatus);
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing COMPONENT_STATE_UPDATE");
                                    }
                                }
                                break;

                            case CMA_OpCode.CMA_TECHNICAL_PARAM_REQ:
                                {
                                    Log.Info($"Received CMA_TECHNICAL_PARAM_REQ");
                                    var techInfo = JsonConvert.DeserializeObject<ComponentTechincalInfo>(reqData);
                                    if (techInfo != null)
                                    {
                                        var info = Helper.PrepareTechnicalParamModel(techInfo);
                                        if (info.InstanceId != 0)
                                        {
                                            CoreProcess.agentSessionCache.AddOrUpdate(info);
                                        }
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {

                                        Log.Error($"Error while procesing CMA_TECHNICAL_PARAM_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.END_MSG_DOWNLOAD:
                                {
                                    Log.Info($"Received END_MSG_DOWNLOAD");
                                    var session = CoreProcess.agentSessionCache.GetSession(baseResponse.BrokerId, baseResponse.SiteId, baseResponse.AgentId);
                                    if (session.Item1 && session.Item2 != null)
                                    {
                                        session.Item2.IsConnected = true;
                                    }
                                }
                                break;

                            default:
                                break;
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                Log.Error($"Error occured during ProcessMessage");
            }
        }
    }
    public class DataFlowModel
    {
        public SocketSession Token;
        public object Data;
    }
}


using BinaryProtocol.Common;
using Exchange.Logs;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Processor;
using Serilog;
using Serilog.Core;
using Serilog.Events;

namespace LoginSignupCore.Core
{
    public class CoreProcess
    {
        public static Response response;
        private static LogProcessor logProcessor;
        public static WebSocketIdWiseSession webSocketIdWiseSession;
        public static SocketManager socketManager;
        public static AgentSessionCache agentSessionCache;
        public static IPSessionCache ipSessionCache;
        public static DBProcessor dBProcessor;

        public static async Task<Response> Initialize()
        {
            response = new();

            LogConfiguration logConfiguration = new LogConfiguration
            {
                FilesizeLimitBytes = 50000000,
                LogFileNameWithPath = Config.logfile,
                LoggingLevelSwitch = new LoggingLevelSwitch
                {
                    MinimumLevel = Config.logLevel == 0 ? LogEventLevel.Debug : (LogEventLevel)Config.logLevel,
                },
                OutputTemplate = "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u5}] {Message:lj}{NewLine}{Exception}",
                RetainedFileCount = Config.logFileCount,
                RollingInterval = RollingInterval.Day,
                RollOnFileSizeLimit = true,
            };

            LogType logType = (LogType)Config.logLevel;

            if (logProcessor == null)
            {
                logProcessor = new LogProcessor(logConfiguration);
            }

            dBProcessor = new();
            ipSessionCache = new();
            agentSessionCache = new();
            webSocketIdWiseSession = new();
            socketManager = new();
            CacheOnLoad.LoadAllCacheData();
            await socketManager.Initialize();               
            return new Response()
            {
                Message = ""
            };
        }

        public static Response SendToLogQueue(LogObject data)
        {
            if (!data.Equals(default(LogObject)) && logProcessor != null)
            {
                return logProcessor.Enqueue(data);
            }
            else if (logProcessor == null)
            {
                return response.Set(StatusCode.OMS_Failure, "logProcessor is null");
            }
            else
            {
                return response.Set(StatusCode.OMS_Failure, "data is null");
            }
        }
    }
}


using System.Runtime.InteropServices;

namespace LoginSignupCore.Core
{
    public class exitHook
    {
        private const int MF_BYCOMMAND = 0x00000000;
        public const int SC_CLOSE = 0xF060;

        [DllImport("user32.dll")]
        public static extern int DeleteMenu(IntPtr hMenu, int nPosition, int wFlags);

        [DllImport("user32.dll")]
        private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

        [DllImport("kernel32.dll", ExactSpelling = true)]
        private static extern IntPtr GetConsoleWindow();

        static exitHook()
        {
            DeleteMenu(GetSystemMenu(GetConsoleWindow(), false), SC_CLOSE, MF_BYCOMMAND);
        }

        public static void exitHookInit()
        {
            string strExit, strExitconfirm;

            Console.CancelKeyPress += Console_CancelKeyPress;
            Console.WriteLine("running");


        }

        private static void Console_CancelKeyPress(object? sender, ConsoleCancelEventArgs args)
        {
            args.Cancel = true;
            //ask();

        }

        public static void ask()
        {
            Console.WriteLine("Type exit and press Enter to Close the Programm ");
        }
    }
}


using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using Newtonsoft.Json;
using Utility;
using ComponentInfo = LoginSignupCore.Models.Response.ComponentInfo;
using FileInfo = LoginSignupCore.Models.Response.FileInfo;


namespace LoginSignupCore.Core
{
    public class Helper
    {
        private static Conversion conversion;

        static Helper()
        {
            conversion = new();
        }

        public static string SerializeObject(object obj)
        {
            try
            {
                return JsonConvert.SerializeObject(obj);
            }
            catch (Exception ex)
            {
                return "Error in serialize :" + ex.Message;
            }

        }

		public static ComponentInfo PrepareComponentInfoResponse(List<Component> compList)
		{
			ComponentInfo componentInfo = new();
			if (compList != null)
			{
				componentInfo.Data = new();
				for (int i = 0; i < compList.Count; i++)
				{
					ComponentInfoData componentInfoData = new();
					componentInfoData.ComponentType = compList[i].componentMaster.ComponentId;
					componentInfoData.InstanceId = compList[i].componentMaster.InstanceId;
					componentInfoData.CmdParameters = compList[i].componentMaster.CmdParam;
					componentInfoData.ExecutablePath = compList[i].componentMaster.ExePath;
					componentInfoData.Priority = compList[i].componentMaster.Priority;
					componentInfoData.ServiceName = compList[i].componentMaster.ServiceName;

					componentInfo.Data.Add(componentInfoData);
				}
			}
			return componentInfo;
		}
		public static FileInfo PrepareFileInfoResponse(List<FileMasterInfo> fileList)
		{
			FileInfo fileInfo = new();
			if (fileList != null)
			{
				fileInfo.Files = new();
				for (int i = 0; i < fileList.Count; i++)
				{
					FilePathInfo filePathInfo = new();
					filePathInfo.FileName = fileList[i].FileName;
					filePathInfo.FilePriority = fileList[i].Priority;
					filePathInfo.Segment = fileList[i].SegmentId;
					filePathInfo.FileType = fileList[i].FileType;
					filePathInfo.IsUploadBeforeBod = fileList[i].IsUploadBeforeBOD;
					filePathInfo.DestinationPath = fileList[i].DestinationPath;

                    fileInfo.Files.Add(filePathInfo);
                }
            }
            return fileInfo;
        }
        public static ComponentInitReq PrepareComponentInitReq(ComponentMaster componentMaster, CMA_OpCode opCode)
        {
            ComponentInitReq componentInitReq = new()
            {
                AgentId = componentMaster.AgentId,
                BrokerId = componentMaster.BrokerId,
                SiteId = componentMaster.SiteId,
                MessageCode = (int)opCode,
                ComponentType = componentMaster.ComponentId,
                InstanceId = componentMaster.InstanceId,
                IsRunAsService = componentMaster.IsRunAsService,
                RequestId = GenerateRequestId(componentMaster.ComponentId, componentMaster.InstanceId, componentMaster.AgentId)
            };
            return componentInitReq;
        }
        public static ComponentsTechnicalInfo PrepareTechnicalParamModel(ComponentTechincalInfo technicalInfo)
        {
            ComponentsTechnicalInfo componentsTechnicalInfo = new()
            {
                BrokerId = technicalInfo.BrokerId,
                SiteId = technicalInfo.SiteId,
                AgentId = technicalInfo.AgentId,
                ComponentId = technicalInfo.ComponentType,
                InstanceId = technicalInfo.InstanceId,
                CPUUtilization = technicalInfo.CPUPercentage,
                RAMUtilization = technicalInfo.RAMUsage,
                ComponentName = ((ComponentType)technicalInfo.ComponentType).ToString(),
                AgentName =  CoreProcess.agentSessionCache.GetSession(technicalInfo.BrokerId, technicalInfo.SiteId,technicalInfo.AgentId).Item2?.AgentName??string.Empty,
                Timestamp = DateTime.Now.ToString("dd/MM/yyyyTHH:mm:ss")

            };
            return componentsTechnicalInfo;
        }
        public static string GenerateRequestId(int compId, int instanceId, int agentInstanceId)
        {
            int agentCompId = (int)ComponentType.AgentWorker;
            //Length 2
            string agentId = agentCompId.ToString("D2");
            //Length 4
            string agentInstId = agentInstanceId.ToString("D4");
            //Length 2
            string destCompId = compId.ToString("D2");
            //Length 2
            string destInsId = "";
            if (instanceId < 0)
            {
                destInsId = "01";
            }
            else
            {
                destInsId = instanceId.ToString("D2");
            }
            //Length 4
            string year = DateTime.Now.Year.ToString("D4");
            //Length 2
            string month = DateTime.Now.Month.ToString("D2");
            //Length 2
            string date = DateTime.Now.Day.ToString("D2");
            //Length 14
            string id = (++Config.Id).ToString("D14");

            string requestId = string.Concat(agentId, agentInstId, destCompId, destInsId, year, month, date, id);
            if (requestId.Length == 32)
                return requestId;
            return DateTime.Now.Ticks.ToString("D32");
        }
    }
}


using BinaryProtocol.Common;
using SocketSession = Exchange.WebSocketServer.SocketManager.SocketSession;
using LoginSignupCore.Global;
using Exchange.WebSocketServer.SocketManager;
using WebSocketSessionToken = Exchange.WebSocketServer.SocketManager.WebSocketSessionToken;
using Utility.Queueing;
using LoginSignupCore.Models;

namespace LoginSignupCore.Core
{
    public class SocketManager
    {
        private ProcessQueue<DataFlowModel> queue;
        private Thread thread;
        private InteractiveProcessQueue _interactiveProcessQueue;
        public async Task Initialize()
        {
            queue = new();
            thread = new Thread(new ThreadStart(ListenQueue));
            thread.Start();
            _interactiveProcessQueue = new InteractiveProcessQueue();
            WebsocketManager.OnOpenConnection += WebsocketManager_OnOpenConnection;
            WebsocketManager.OnStringMessageReceived += WebsocketManager_OnMessageReceived;
            WebsocketManager.OnErrorListener += WebsocketManager_OnErrorListener;
            WebsocketManager.OnCloseConnection += WebsocketManager_OnCloseConnection;

            await Exchange.WebSocketServer.Global.Startup.Setup();
        }

        private void WebsocketManager_OnOpenConnection(SocketSession socketSession)
        {
            Log.Info($"On Ws open con-> {socketSession.Context.Channel.Id.AsShortText()}");
            //UserSession userSession = new UserSession
            //{
            //    SocketSession = socketSession,
            //    WebSocketSessionToken = new WebSocketSessionToken() { webSocketSessionToken = socketSession.Context.Channel.Id.AsShortText() }
            //};
            //CoreProcess.webSocketIdWiseSession.AddOrUpdateWebSocketToken(userSession);
        }
        private void WebsocketManager_OnMessageReceived(SocketSession socketSession, object receivedmsg)
        {
            _interactiveProcessQueue.Enqueue(new() { Token = socketSession, Data = receivedmsg});
        }
        private static void WebsocketManager_OnErrorListener(SocketSession socketSession, Exception ex)
        {
            Log.Error(ex);
        }
        public static void WebsocketManager_OnCloseConnection(SocketSession socketSession)
        {
            if(socketSession != null && socketSession.Context != null && socketSession.Context.Channel != null)
            {
                WebSocketSessionToken webSocketSessionToken = new WebSocketSessionToken() { webSocketSessionToken = socketSession.Context.Channel.Id.AsShortText() };
                CoreProcess.webSocketIdWiseSession.Remove(webSocketSessionToken);
                Log.Info("Ws Close Evt: " + socketSession.Context.Channel.Id.AsShortText());
            }
        }
        public static void Send(SocketSession socketSession, object data)
        {
            if(socketSession!=null)
                WebsocketManager.Send(socketSession, data);
        }
        public void Enqueue(DataFlowModel data)
        {
            queue.Enqueue(data);
        }
        private void ListenQueue()
        {
            while (true)
            {
                if (queue.TryDequeue(out DataFlowModel res))
                {
                    Send(res.Token, res.Data);
                }
            }
        }
    }
}


using AgentWorker.Global;
using AgentWorker.Models.Others;
using AgentWorker.Models.Request;
using AgentWorker.Models.Response;
using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using Newtonsoft.Json;
using Utility.Queueing;
using ComponentInfo = AgentWorker.Models.Response.ComponentInfo;
using FileInfoModel = AgentWorker.Models.Response.FileInfo;

namespace AgentWorker.Core
{
	public class InteractiveProcessQueue
	{
		private ProcessQueue<string> interactiveMessageQueue;
		Thread thread;
		ManualResetEvent _mre;
		ManualResetEvent _uploadWait;
		ManualResetEvent _componentWait;

		public InteractiveProcessQueue()
		{
			interactiveMessageQueue = new ProcessQueue<string>();
			_mre = new ManualResetEvent(false);
			_uploadWait = new ManualResetEvent(false);
			_componentWait = new ManualResetEvent(false);
			DrainerThreadInit();
		}

		public void Enqueue(string message)
		{
			interactiveMessageQueue.Enqueue(message);
		}
		private void DrainerThreadInit()
		{
			thread = new Thread(new ThreadStart(DrainMessage));
			thread.Start();
		}
		private void DrainMessage()
		{
			while (true)
			{
				if (interactiveMessageQueue.TryDequeue(out string message))
				{
					try
					{
						//Process message
						ProcessMessage(message);
					}
					catch (System.Exception ex)
					{
						Log.Error(message, $"Exception occured on message process {ex.Message}");

					}
				}
			}
		}
		private void ProcessMessage(string message)
		{
			var baseResponse = JsonConvert.DeserializeObject<MsgHeader>(message);
			if(baseResponse != null) 
			{
				var opcode = (CMA_OpCode)baseResponse.MessageCode;
				switch(opcode)
                {
                    case CMA_OpCode.AGENT_HANDSHAKE_RES:
                        {
                            Log.Info($"Received AGENT_HANDSHAKE_RES");
                            var handshakeRes = JsonConvert.DeserializeObject<MsgHeader>(message);
                            if (handshakeRes != null)
                            {
								Config.AgentWorkerId = handshakeRes.AgentId;
								Config.BrokerId = handshakeRes.BrokerId;
								Config.SiteId = handshakeRes.SiteId;

								//starting current server cpu and ram utilization
								//CoreProcess.SendTechnicalDataOfServer();

                                //send Login Req
                                //var loginReq = PrepareLoginReq();
                                //CoreProcess.wsClientManager.Enqueue(loginReq);

                                MsgHeader fileInfoReq = new() 
								{
									MessageCode = (int)CMA_OpCode.FILE_INFO_REQ,
                                    AgentId = Config.AgentWorkerId,
                                    BrokerId = Config.BrokerId,
                                    SiteId = Config.SiteId,
                                };
                                CoreProcess.wsClientManager.Enqueue(fileInfoReq);
                            }
							else
							{
								Log.Error($"Error while procesing AGENT_HANDSHAKE_RES");
							}
                        }
                        break;

                    case CMA_OpCode.LOGIN_RESPONSE:
						{
							Log.Info($"Received Login Response");
							var loginResponse = JsonConvert.DeserializeObject<StatusMessage>(message);
							if(loginResponse != null && loginResponse.IsSucessStatus)
							{
								MsgHeader fileInfoReq = new()
								{
									MessageCode = (int)CMA_OpCode.FILE_INFO_REQ,
									AgentId = Config.AgentWorkerId,	
									BrokerId = Config.BrokerId,	
									SiteId = Config.SiteId,	
								};
								CoreProcess.wsClientManager.Enqueue(fileInfoReq);
                            }
                            else
                            {
                                Log.Error($"Error while procesing LOGIN_RESPONSE");
                            }
                        }
						break;

                    case CMA_OpCode.FILE_INFO_RES:
                        {
                            Log.Info($"Received FILE_INFO_RES");
                            var fileInfoResponse = JsonConvert.DeserializeObject<FileInfoModel>(message);
                            if (fileInfoResponse != null)
                            {
								Config.MasterPath = fileInfoResponse.MasterPath;
								CoreProcess.filePathInfo = fileInfoResponse.Files;

								//Prepare ComponentInfo Download Req
								MsgHeader compInfoHeader = new() 
								{
									MessageCode = (int)CMA_OpCode.COMPONENT_INFO_REQ,
                                    AgentId = Config.AgentWorkerId,
                                    BrokerId = Config.BrokerId,
                                    SiteId = Config.SiteId,
                                };
                                CoreProcess.wsClientManager.Enqueue(compInfoHeader);
                            }
                            else
                            {
                                Log.Error($"Error while procesing FILE_INFO_RES");
                            }
                        }
                        break;

                    case CMA_OpCode.COMPONENT_INFO_RES:
                        {
                            Log.Info($"Received COMPONENT_INFO_RES");
                            var componentInfoResponse = JsonConvert.DeserializeObject<ComponentInfo>(message);
                            if (componentInfoResponse != null && componentInfoResponse.Data != null)
                            {
								for(int i=0; i<componentInfoResponse.Data.Count; i++)
								{
									CoreProcess.compDataCache.AddOrUpdate(componentInfoResponse.Data[i]);
									if (!CoreProcess.componentManager.TryGetValue(((ComponentType)componentInfoResponse.Data[i].ComponentType, componentInfoResponse.Data[i].InstanceId), out var componentManager)) 
									{
										componentManager = new(componentInfoResponse.Data[i]);
										CoreProcess.componentManager.Add(((ComponentType)componentInfoResponse.Data[i].ComponentType, componentInfoResponse.Data[i].InstanceId), componentManager);
										if(componentInfoResponse.Data[i].ComponentType!=-1)
										{
                                            CoreProcess.interfaceProcessor.InitNew(componentInfoResponse.Data[i].ComponentType, componentInfoResponse.Data[i].InstanceId);
                                            CoreProcess.SetExistingProcess((ComponentType)componentInfoResponse.Data[i].ComponentType, componentInfoResponse.Data[i].InstanceId);
                                        }

                                    }
                                }
                                //Prepare END MSG DOWNLOAD
                                MsgHeader endMsg = new()
                                {
                                    MessageCode = (int)CMA_OpCode.END_MSG_DOWNLOAD,
                                    AgentId = Config.AgentWorkerId,
                                    BrokerId = Config.BrokerId,
                                    SiteId = Config.SiteId,
                                };
                                CoreProcess.wsClientManager.Enqueue(endMsg);
                            }
                            else
                            {
                                Log.Error($"Error while procesing COMPONENT_INFO_RES");
                            }
                        }
                        break;

                    case CMA_OpCode.START_FILE_UPLOAD:
                        {
							if (!Config.isFileBODDoneToday)
							{
								Log.Info($"Received START_FILE_UPLOAD");
                                var fileUpload = JsonConvert.DeserializeObject<FileUploadReq>(message);
								if(fileUpload != null )
                                {
                                    CoreProcess.StartComponent(ComponentType.CONTRACT_MASTER_READER, -1, false, fileUpload.RequestId);
                                    while (true)
                                    {
                                        _uploadWait.WaitOne(5000);
                                        if (CoreProcess.GetIsRunning(ComponentType.CONTRACT_MASTER_READER, -1))
                                        {
                                            break;
                                        }
                                    }
                                    ProcessFileUpload();
                                }
							}
							else
							{
								bool status = false;
								var messages = "All mandatory files is already uploaded";
								SendEndFileUploadRes(status, messages);
							}
                            
                        }
                        break;

                    case CMA_OpCode.COMPONENT_START:
                        {
                            Log.Info($"Received COMPONENT_START");
                            var componentInitResponse = JsonConvert.DeserializeObject<ComponentInitReq>(message);
							if(componentInitResponse != null)
							{
								var startResp = CoreProcess.StartComponent((ComponentType)componentInitResponse.ComponentType, componentInitResponse.InstanceId, componentInitResponse.IsRunAsService, componentInitResponse.RequestId);
								if (startResp.StatusCode == StatusCode.Success)
									Log.Info(startResp.Message);
								else
									Log.Error(startResp.Message);
							}
                        }
						break;

					case CMA_OpCode.COMPONENT_STOP:
						Log.Info($"Received COMPONENT_STOP");
						var componentInitEndResponse = JsonConvert.DeserializeObject<ComponentInitReq>(message);
						if (componentInitEndResponse != null)
						{
							var startResp = CoreProcess.StopComponent((ComponentType)componentInitEndResponse.ComponentType, componentInitEndResponse.InstanceId);
							if (startResp.StatusCode == StatusCode.Success)
								Log.Info(startResp.Message);
							else
								Log.Error(startResp.Message);
						}
						break;

                    case CMA_OpCode.START_AFTER_BOD_FILE_UPLOAD:
                        {
                            Log.Info($"Received START_AFTER_BOD_FILE_UPLOAD");
                            var fileUpload = JsonConvert.DeserializeObject<FileUploadReq>(message);
                            if (fileUpload != null)
                            {
                                ProcessAfterBODFileUpload();
                            }

                        }
                        break;
                    default:
						break;
				}
			}
		}
		private void ProcessFileUpload()
		{
			//perform file upload here
			string message = string.Empty;
			bool status;
			var list = CoreProcess.filePathInfo.OrderBy(x => x.FilePriority).ToList();
			if(list != null)
			{
				for(int i=0; i<list.Count; i++) 
				{
					var segmentId = list[i].Segment;
					var fileType = list[i].FileType;
					var sourcePath = Config.MasterPath + "/" + list[i].FileName;

					//var res = CoreProcess.fileDataCache.Get(segmentId, fileType);
					if(/*res.Item1 && */list[i].IsUploadBeforeBod)
					{
						//var destinationPath = res.Item2.FilePath + "/" + list[i].FileName;
						var destinationPath = list[i].DestinationPath + "/" + list[i].FileName;
						var resp = CoreProcess.CopyFileData(sourcePath, destinationPath);
						if(resp.StatusCode == StatusCode.Success)
						{
							SendFileUploadStatus(list[i], true, resp.Message);
							Log.Info(resp.Message);
						}
						else
						{
							SendFileUploadStatus(list[i], false, resp.Message);
							Log.Error(resp.Message);
						}

						while (true)
						{
							_uploadWait.WaitOne(5000);
							if (list[i].IsFileUploadAck)
							{
								break;
							}
						}
					}
                    Thread.Sleep(3000);
                }
				message = "All mandatory file before bod process uploaded";
				status = true;
				Config.isFileBODDoneToday = true;
			}
			else
			{
				message = "no file found to upload";
				status = false;
			}
			SendEndFileUploadRes(status, message);
		}
		private void SendFileUploadStatus(FilePathInfo filePathInfo, bool status, string message)
		{
			FileStatus fileStatus = new()
			{
				MessageCode = (int)CMA_OpCode.FILE_UPLOAD_CONFIRMATION,
				BrokerId = Config.BrokerId,
				SiteId = Config.SiteId,
				AgentId = Config.AgentWorkerId,
				FileName = filePathInfo.FileName,
				FileType = filePathInfo.FileType,
				Segment = filePathInfo.Segment,
				IsSucessStatus = status,
				Message = message,
				TimeStamp = DateTime.Now
			};
			CoreProcess.wsClientManager.Enqueue(fileStatus);
		}
        private LoginRequest PrepareLoginReq()
        {
            LoginRequest request = new()
            {
                MessageCode = (int)CMA_OpCode.LOGIN_REQ,
                SiteId = Config.SiteId,
                AgentId = Config.AgentWorkerId,
                BrokerId = Config.BrokerId
            };
            return request;
        }
		private void SendEndFileUploadRes(bool status, string message)
		{
			//send appropriate status to FE
			StatusMessage statusMessage = new ();
			statusMessage.MessageCode = (int)CMA_OpCode.END_FILE_UPLOAD;
			statusMessage.SiteId = Config.SiteId;
			statusMessage.AgentId = Config.AgentWorkerId;
			statusMessage.BrokerId = Config.BrokerId;
			statusMessage.IsSucessStatus = status;
			statusMessage.Message = message;	
			CoreProcess.wsClientManager.Enqueue(statusMessage);
		}
		private void ProcessAfterBODFileUpload()
		{
            var list = CoreProcess.filePathInfo.Where(y => y.IsUploadBeforeBod == false).OrderBy(x => x.FilePriority).ToList();
            if (list != null)
			{
                for (int i = 0; i < list.Count; i++)
                {
                    var segmentId = list[i].Segment;
                    var fileType = list[i].FileType;

                    if (!list[i].IsUploadBeforeBod)
                    {
						if (list[i].FileName == "span")
                        {
							//var prefix = "nsccl.";
							//var date = DateTime.Now.ToString("yyyyMMdd");
							//var spanFileCount = CoreProcess.spanFileInfo.Count + 1;
							//var suffix = "i" + spanFileCount.ToString("D2") + ".spn";

							//var fileName = prefix + date + "." + suffix;

                            var sourcePath = Config.MasterPath + "/" + "span";
                            //var destinationPath = list[i].DestinationPath + "/" + fileName;
                            //var resp = CoreProcess.CopyFileData(sourcePath, destinationPath);

                            //if (resp.StatusCode == StatusCode.Success)
                            {
                                //CoreProcess.spanFileInfo.TryAdd(spanFileCount, new(){ FileName = fileName, TimeStamp = DateTime.Now });
                                CoreProcess.InitWatcher(1, sourcePath);
                                Console.WriteLine($"Watcher init for varelm {sourcePath}");
                                //FileSystemWatcher fileSystemWatcher = new(sourcePath);
                                //fileSystemWatcher.Created += new FileSystemEventHandler(OnChanged);
                                //fileSystemWatcher.EnableRaisingEvents = true;
                                //SendFileUploadStatus(list[i], true, "Sucess");
                                //Log.Info(resp.Message);
                            }
                            //else
                            //{
                            //    SendFileUploadStatus(list[i], false, "Failure");
                            //    Log.Error($"Failure while copying span file");
                            //}
                        }
						else if (list[i].FileName == "varelm")
						{
                            //var prefix = "C_VAR_";
                            //var date = DateTime.Now.ToString("ddMMyyyy");
							//var elmFileCount = CoreProcess.varElmFileInfo.Count + 1;
							
							//var fileName = prefix + date + "_" + elmFileCount + ".DAT";

                            var sourcePath = Config.MasterPath + "/" + "varelm";
							//var destinationPath = list[i].DestinationPath + "/" + fileName;
							//var resp = CoreProcess.CopyFileData(sourcePath, destinationPath);

							//if(resp.StatusCode == StatusCode.Success)
							{
								//CoreProcess.varElmFileInfo.TryAdd(elmFileCount, new() { FileName = fileName, TimeStamp = DateTime.Now });
								CoreProcess.InitWatcher(2,sourcePath);
                                Console.WriteLine($"Watcher init for varelm {sourcePath}");

                                //FileSystemWatcher fileSystemWatcher2 = new(sourcePath);
                                //fileSystemWatcher2.Created += new FileSystemEventHandler(OnChanged);
                                //fileSystemWatcher2.EnableRaisingEvents = true;
                                //SendFileUploadStatus(list[i], true, "Sucess");
                                Log.Info("Sucess");
                            }
                            //else
                            //{
                            //    SendFileUploadStatus(list[i], false, resp.Message);
                            //    Log.Error(resp.Message);
                            //}
                        }
                    }
                }
            }
        }
        private void OnChanged(object source, FileSystemEventArgs e)
        {
            System.IO.FileInfo fileInfo = new(e.FullPath);
			var fileName = fileInfo.Name;
			var filePath = e.FullPath;

			string[] pathInfo = filePath.Split('\\');
			if(pathInfo.Length == 3)
			{
				string[] innerArr = pathInfo[1].Split('/');
				if(innerArr.Length == 2)
                {
                    if (innerArr[1] == "span")
                    {
                        var spanFileInfo = CoreProcess.filePathInfo.Where(y => y.FileName == "span").FirstOrDefault();
                        if (spanFileInfo != null)
                        {
                            var destinationPath = spanFileInfo.DestinationPath + "/" + fileName;

                            var resp = CoreProcess.CopyFileData(filePath, destinationPath);
                            if (resp.StatusCode == StatusCode.Success)
                            {
                                var spanFileCount = CoreProcess.spanFileInfo.Count + 1;
                                CoreProcess.spanFileInfo.TryAdd(spanFileCount, new() { FileName = fileName, TimeStamp = DateTime.Now });
                                SendAfterBodFileUploadStatus(spanFileInfo, true, resp.Message, fileName);
                                Log.Info(resp.Message);
                            }
                        }
                    }
                    else if (innerArr[1] == "varelm")
                    {
                        var varElmInfo = CoreProcess.filePathInfo.Where(y => y.FileName == "varelm").FirstOrDefault();
                        if (varElmInfo != null)
                        {
                            var destinationPath = varElmInfo.DestinationPath + "/" + fileName;

                            var resp = CoreProcess.CopyFileData(filePath, destinationPath);
                            if (resp.StatusCode == StatusCode.Success)
                            {
                                var elmFile = CoreProcess.varElmFileInfo.Count + 1;
                                CoreProcess.varElmFileInfo.TryAdd(elmFile, new() { FileName = fileName, TimeStamp = DateTime.Now });
                                SendAfterBodFileUploadStatus(varElmInfo, true, resp.Message, fileName);
                                Log.Info(resp.Message);
                            }
                        }
                    }
                }
			}
        }
        private void SendAfterBodFileUploadStatus(FilePathInfo filePathInfo, bool status, string message, string fileName)
        {
            FileStatus fileStatus = new()
            {
                MessageCode = (int)CMA_OpCode.FILE_UPLOAD_CONFIRMATION,
                BrokerId = Config.BrokerId,
                SiteId = Config.SiteId,
                AgentId = Config.AgentWorkerId,
                FileName = fileName,
                FileType = filePathInfo.FileType,
                Segment = filePathInfo.Segment,
                IsSucessStatus = status,
                Message = message,
                TimeStamp = DateTime.Now
            };
            CoreProcess.wsClientManager.Enqueue(fileStatus);
        }
    }
}


using AgentWorker.Global;
using AgentWorker.Listener;
using BinaryProtocol.Common;
using CTCL.CacheManagement.ComponentSessionManager;
using Utility.ComponentInstance;

namespace AgentWorker.Core
{
    public class InterfaceProcessor
    {
        ComponentInstanceSetup componentInstanceSetup;
        private static Dictionary<string, ListenerOfMQ> listenerFromMQ; // All Listener 
        public ComponentSessionManager componentSessionManager;

        public InterfaceProcessor()
        {
            //componentInstanceSetup = new ComponentInstanceSetup(Config.connectionString);
            listenerFromMQ = new();
            componentSessionManager = new();
        }
        public Response Init()
        {
            Response response = new Response();
            var omsInterfaces = componentInstanceSetup.GetInterface(ComponentType.AgentWorker, Config.AgentWorkerId); // interfaces.Tables[0];

            if (omsInterfaces.StatusCode != StatusCode.Success)
            {
                return response.Set(StatusCode.OMS_Error, "My Interfaces couldn't be loaded.." + omsInterfaces.Message);
            }

            //int i = 0;
            foreach (var component in (List<ComponentInstanceInterface>)omsInterfaces.ExtraInfo)
            {
                var queueConfiguration = new QueueConfiguration
                {
                    ExchangeName = component.Configuration.ExchangeName,
                    HostName = component.Configuration.HostName,
                    MQName = component.Configuration.MQName,
                    PassWord = component.Configuration.PassWord,
                    Port = component.Configuration.Port,
                    UserName = component.Configuration.UserName,
                    VirtualHost = component.Configuration.VirtualHost
                };
                //AgentWorker as Destination
                if (component.DestComponentInfo.ComponentType == ComponentType.AgentWorker && component.DestComponentInfo.InstanceId == Config.AgentWorkerId)
                {
                    ListenerOfMQ listenerOfMQ;
                    if (!listenerFromMQ.TryGetValue(component.Route, out listenerOfMQ))
                    {
                        listenerOfMQ = new ListenerOfMQ(queueConfiguration);
                        listenerFromMQ.Add(component.Route, listenerOfMQ);
                    }
                    //Add Source
                    listenerOfMQ.AddSource(component.SourceComponentInfo);
                }
            }
            return response.Set(StatusCode.Success, "Interfaces loaded.." + omsInterfaces.Message);
        }
        public Response InitNew(int srcComponentId, int srcInstanceId)
        {
            Response response = new Response();

            string nvcRoute = $"{((ComponentType)srcComponentId).ToString()}{srcInstanceId}_{ComponentType.AgentWorker}{Config.AgentWorkerId}|" +
                $"{((ComponentType)srcComponentId).ToString()}{srcInstanceId}_{ComponentType.AgentWorker}{Config.AgentWorkerId}|" +
                $"{Config.RabbitLogin}|{Config.RabbitPwd}|/|{Config.RabbitIp}|{Config.RabbitPort}";

            ComponentType srcCompId = (ComponentType)srcComponentId;
            int srcInstId = srcInstanceId;

            ComponentType destCompId = (ComponentType)ComponentType.AgentWorker;
            int destInstId = Config.AgentWorkerId;

            var sep = nvcRoute.Split('|');
            if (sep.Length != 7)
            {
                return response.Set(StatusCode.Failure, "Route is not proper!!!");
            }

            string ExName = sep[0];
            string MQName = sep[1];
            string UserName = sep[2];
            string PassWord = sep[3];
            string VirtualHost = sep[4];
            string HostName = sep[5];
            int Port = Convert.ToInt32(sep[6]);

            ComponentInstanceInterface componentInstanceInterface = new();
            componentInstanceInterface.Configuration = new()
            {
                ExchangeName = ExName,
                MQName = MQName,
                UserName = UserName,
                PassWord= PassWord,
                VirtualHost = VirtualHost,
                HostName = HostName,
                Port = Port,
            };
            componentInstanceInterface.Route = nvcRoute;
            componentInstanceInterface.DestComponentInfo = new ComponentInfo
            {
                ComponentType = destCompId,
                InstanceId = destInstId
            };

            componentInstanceInterface.SourceComponentInfo = new ComponentInfo
            {
                ComponentType = srcCompId,
                InstanceId = srcInstId
            };

            ListenerOfMQ listenerOfMQ;
            if (!listenerFromMQ.TryGetValue(componentInstanceInterface.Route, out listenerOfMQ))
            {
                listenerOfMQ = new ListenerOfMQ(componentInstanceInterface.Configuration);
                listenerFromMQ.Add(componentInstanceInterface.Route, listenerOfMQ);
            }
            //Add Source
            listenerOfMQ.AddSource(componentInstanceInterface.SourceComponentInfo);
            InitListeners(listenerOfMQ);
            return response.Set(StatusCode.Success, "Interfaces loaded..");
        }
        public void InitListeners(ListenerOfMQ mq)
        {
            ConsoleLog.ConsoleWrite("INIT RABBIT");

            var componentInfoData = mq.GetComponentInfo();
            ComponentSession dbSession = new();
            dbSession.ComponentType = componentInfoData.Item1;
            dbSession.instanceId = componentInfoData.Item2;
            componentSessionManager.Add(dbSession);
            var sessionAdd = componentSessionManager.Get(componentInfoData.Item1, componentInfoData.Item2);
            if (sessionAdd.Item1.StatusCode == StatusCode.Success)
            {
                mq.AddComponentSession(sessionAdd.Item2);
            }

            var mqRes = mq.Initialize();
            // ConsoleLog.ConsoleWrite($"INIT RABBIT COMPLETE {componentInfoData.Item1}");
            ConsoleLog.ConsoleWrite($"INIT RABBIT COMPLETE ");
        }
    }
}


using AgentWorker.Global;
using AgentWorker.Models.Request;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using CTCL.BinaryProtocol.Common.CTCL;
using CTCL.WebSocketDotNetty;
using Utility.Queueing;

namespace AgentWorker.Core
{
	public class WebSocketClientManager
    {
        private InteractiveProcessQueue _interactiveProcessQueue;
		private WebSocketClient _client;
        private ProcessQueue<object> queue;
        private Thread thread;

        public WebSocketClientManager(string url)
        {
            queue = new ProcessQueue<object>();
            _interactiveProcessQueue = new InteractiveProcessQueue();
			_client = new WebSocketClient();
			_client.OnMessageReceived += OnDataReceived;
			_client.OnClientConnect += OnClientConnect;
			_client.OnClientDisconnect += OnClientDisConnect;
			_client.init();
            thread = new Thread(new ThreadStart(ListenQueue));
            thread.Start();
            Init(url);
		}

		private void Init(string url)
		{
			Uri uri = new Uri(url);
			_client.ConnectAsync(uri);
		}

		private void OnDataReceived(object message, bool isBinaryMessage)
		{
			var data = message.ToString();
			_interactiveProcessQueue.Enqueue(data);
		}

		private void OnClientConnect()
		{
			Log.Info("Web socket connected");

            AgentHandshakeReq handshakeReq = PrepareHandshakeReq();
            SendNew(handshakeReq);
		}

		private void OnClientDisConnect()
		{
			Log.Info("Web socket Disconnected");
		}

		private void Send(object res)
		{
            _client.SendAsync(res);
        }
        private void SendNew(object res)
        {
            _client.SendAsyncNew(res);
        }

        public void Enqueue(object data)
        {
            queue.Enqueue(data);
        }

        private void ListenQueue()
        {
            while (true)
            {
                if (queue.TryDequeue(out object res))
                {
                    Process(res);
                }
            }
        }

        private void Process(object res)
        {
            try
            {
                SendNew(res);
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
        }
        private AgentHandshakeReq PrepareHandshakeReq()
        {
            AgentHandshakeReq handshakeReq = new()
            {
                MessageCode = (int)CMA_OpCode.AGENT_HANDSHAKE_REQ,
                IP = Config.LocalIp
            };
            return handshakeReq;
        }
    }
}


using BinaryProtocol.Common;
using Exchange.Logs;
using Serilog.Core;
using Serilog.Events;
using Serilog;
using AgentWorker.Global;
using AgentWorker.Processor;
using System.Net;
using AgentWorker.MasterCache;
using AgentWorker.Models.Response;
using System.Diagnostics;
using CTCL.BinaryProtocol.Common.CMA.Enum;

namespace AgentWorker.Core
{
    public class CoreProcess
    {
        public static Response response;
        private static LogProcessor logProcessor;
        public static InterfaceProcessor interfaceProcessor;
        public static ComponentHandshakeManager handshakeManager;
        public static FileDataCache fileDataCache;
        public static WebSocketClientManager wsClientManager;
        public static List<FilePathInfo> filePathInfo;
        public static ComponentDataCache compDataCache;
        public static Dictionary<(ComponentType, int), ComponentManager> componentManager;
        public static Dictionary<int, SpanFileInfo> spanFileInfo;
        public static Dictionary<int, SpanFileInfo> varElmFileInfo;
        public static Dictionary<int, FileSystemWatcher> fileSystemWatcherDict;

        public static Response Initialize()
        {
            response = new();
            LogConfiguration logConfiguration = new LogConfiguration
            {
                FilesizeLimitBytes = 50000000,
                LogFileNameWithPath = Config.logfile,
                LoggingLevelSwitch = new LoggingLevelSwitch
                {
                    MinimumLevel = Config.logLevel == 0 ? LogEventLevel.Debug : (LogEventLevel)Config.logLevel,
                },
                OutputTemplate = "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u5}] {Message:lj}{NewLine}{Exception}",
                RetainedFileCount = Config.logFileCount,
                RollingInterval = RollingInterval.Day,
                RollOnFileSizeLimit = true,
            };

            LogType logType = (LogType)Config.logLevel;

            if (logProcessor == null)
            {
                logProcessor = new LogProcessor(logConfiguration);
            }

            spanFileInfo = new();
            varElmFileInfo = new();
            fileDataCache = new();
            compDataCache = new();
            handshakeManager = new();
            componentManager = new();
            fileSystemWatcherDict = new();
            InitLocalIp();
            //Config.GetConfigurationSettings();
            //CacheOnLoad.LoadAllCacheData();
            interfaceProcessor = new();
            //interfaceProcessor.Init();
            //interfaceProcessor.InitListeners();
            wsClientManager = new(Config.WebSocketUrl);
            return new Response()
            {
                Message = ""
            };
        }
        public static Response SendToLogQueue(LogObject data)
        {
            if (!data.Equals(default(LogObject)) && logProcessor != null)
            {
                return logProcessor.Enqueue(data);
            }
            else if (logProcessor == null)
            {
                return response.Set(StatusCode.OMS_Failure, "logProcessor is null");
            }
            else
            {
                return response.Set(StatusCode.OMS_Failure, "data is null");
            }
        }
        public static Response InitLocalIp()
        {
            Response response = new Response();
            Global.Log.Info($"Fetching Local IP adress");
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    Config.LocalIp = ip.ToString();
                    Global.Log.Info($"Local IP adress {Config.LocalIp}");
                }
            }
            return response.Set(StatusCode.Success, "Sucess");
        }

        public static Response StartComponent(ComponentType componentType, int instanceId, bool isRunAsService, string requestID)
        {
            Response response = new Response();
            if (componentManager.TryGetValue((componentType, instanceId), out var component) && component != null)
            {
                response = component.StartComponent(isRunAsService, requestID);
            }
            else
            {
                response.Set(StatusCode.Failure, $"Component infomation is not found for {componentType} and instanceID {instanceId}");
            }

            ComponentStatus componentStatus = new()
            {
                ComponentType = (int)componentType,
                InstanceId = instanceId,
                IsSucessStatus = false,
                Message = response.Message,
                MessageCode = 0
            };
            //send on web socket

            return response;
        }

        public static Response StopComponent(ComponentType componentType, int instanceId)
        {
            Response response = new Response();
            if (componentManager.TryGetValue((componentType, instanceId), out var component) && component != null)
            {
                response = component.StopComponent();
            }
            else
            {
                response.Set(StatusCode.Failure, $"Component infomation is not found for {componentType} and instanceID {instanceId}");
            }

            //send on web socket 
            var resp = Helper.Helper.PrepareComponentStatus((int)componentType, instanceId, response.StatusCode == StatusCode.Success ? (int)CMA_StatusCode.Stopped : (int)CMA_StatusCode.Completed, "");
            if (response.StatusCode == StatusCode.Success)
            {
                SetIsRunning(componentType, instanceId, false);
            }
            wsClientManager.Enqueue(resp);
            return response;
        }

        public static Response CopyFileData(string sourcePath, string destinationPath)
        {
            Response response = new();

            try
            {
                if (!File.Exists(destinationPath))
                {
                    File.Copy(sourcePath, destinationPath);
                    response.Set(StatusCode.Success, $"File copied from {sourcePath} to {destinationPath} sucessfully");
                }
                else
                {
                    response.Set(StatusCode.Failure, $"File already exists");
                }
            }
            catch (Exception ex)
            {
                response.Set(StatusCode.Failure, $"Exception occured while copy file {ex}");
            }

            return response;
        }

        public static void SetIsRunning(ComponentType componentType, int instanceId, bool flag)
        {
            Response response = new Response();
            if (componentManager.TryGetValue((componentType, instanceId), out var component) && component != null)
            {
                component.SetIsRunning(flag);
            }
        }

        public static bool GetIsRunning(ComponentType componentType, int instanceId)
        {
            Response response = new Response();
            if (componentManager.TryGetValue((componentType, instanceId), out var component) && component != null)
            {
                return component.GetIsRunning();
            }
            return false;
        }

        public static void SetExistingProcess(ComponentType componentType, int instanceId)
        {
            if (componentManager.TryGetValue((componentType, instanceId), out var component) && component != null)
            {
                component.SetExistingProcess();
            }
        }

        public static void SendTechnicalDataOfServer()
        {
            ManualResetEvent _mre = new ManualResetEvent(false);
            Task.Factory.StartNew(() =>
            {
                while (true)
                {
                    _mre.WaitOne(10000);
                    var cpu = GetCPUValue();
                    var ram = GetMemValue();

                    //send to FE on websocket
                    ComponentTechincalInfo componentTechincalInfo = new()
                    {
                        MessageCode = (int)CMA_OpCode.CMA_TECHNICAL_PARAM_REQ,
                        ComponentType = -1,
                        InstanceId = Config.AgentWorkerId,
                        CPUPercentage = cpu,
                        RAMUsage = ram,
                    };
                    wsClientManager.Enqueue(componentTechincalInfo);
                }
            });
        }

        private static int GetCPUValue()
        {
            int result = 0;
            try
            {
                var cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
                cpuCounter.NextValue();
                Thread.Sleep(1000);
                return (int)cpuCounter.NextValue();
            }
            catch (Exception ex)
            {
                Global.Log.Error($"Exception occured while fetching server cpu | {ex}");
            }
            return result;
        }

        private static int GetMemValue()
        {
            int result = 0;
            try
            {
                var memCounter = new PerformanceCounter("Memory", "% Committed Bytes in  Use");
                return (int)memCounter.NextValue();
            }
            catch (Exception ex)
            {
                Global.Log.Error($"Exception occured while fetching server ram | {ex}");
            }
            return result;
        }

        public class SpanFileInfo
        {
            public string FileName;
            public DateTime TimeStamp;
        }

        public static void InitWatcher(int id, string sourcePath)
        {
            //FileWatcherClass fileWatcherClass = new();
            FileSystemWatcher fileSystemWatcher = new(sourcePath);
            fileSystemWatcher.Created += new FileSystemEventHandler(OnChanged);
            fileSystemWatcher.EnableRaisingEvents = true;
            fileSystemWatcherDict.TryAdd(id, fileSystemWatcher);

            Console.WriteLine($"Watcher init for span {sourcePath}");
        }
        private static void OnChanged(object source, FileSystemEventArgs e)
        {
            Console.WriteLine($"Onchange invoked {e.FullPath}");
            System.IO.FileInfo fileInfo = new(e.FullPath);
            var fileName = fileInfo.Name;
            var filePath = e.FullPath;

            DirectoryInfo diretory = new DirectoryInfo(filePath);
            string foldername = diretory.Parent.Name;

            if (foldername == "span")
            {
                var spanFileInfo = CoreProcess.filePathInfo.Where(y => y.FileName == "span").FirstOrDefault();
                if (spanFileInfo != null)
                {
                    var destinationPath = spanFileInfo.DestinationPath + "/" + fileName;

                    var resp = CoreProcess.CopyFileData(filePath, destinationPath);
                    if (resp.StatusCode == StatusCode.Success)
                    {
                        var spanFileCount = CoreProcess.spanFileInfo.Count + 1;
                        CoreProcess.spanFileInfo.TryAdd(spanFileCount, new() { FileName = fileName, TimeStamp = DateTime.Now });
                        SendAfterBodFileUploadStatus(spanFileInfo, true, resp.Message, fileName);
                        Global.Log.Info(resp.Message);
                    }
                }
            }
            else if (foldername == "varelm")
            {
                var varElmInfo = CoreProcess.filePathInfo.Where(y => y.FileName == "varelm").FirstOrDefault();
                if (varElmInfo != null)
                {
                    var destinationPath = varElmInfo.DestinationPath + "/" + fileName;

                    var resp = CoreProcess.CopyFileData(filePath, destinationPath);
                    if (resp.StatusCode == StatusCode.Success)
                    {
                        var elmFile = CoreProcess.varElmFileInfo.Count + 1;
                        CoreProcess.varElmFileInfo.TryAdd(elmFile, new() { FileName = fileName, TimeStamp = DateTime.Now });
                        SendAfterBodFileUploadStatus(varElmInfo, true, resp.Message, fileName);
                        Global.Log.Info(resp.Message);
                    }
                }
            }


        }
        private static void SendAfterBodFileUploadStatus(FilePathInfo filePathInfo, bool status, string message, string fileName)
        {
            FileStatus fileStatus = new()
            {
                MessageCode = (int)CMA_OpCode.FILE_UPLOAD_CONFIRMATION,
                BrokerId = Config.BrokerId,
                SiteId = Config.SiteId,
                AgentId = Config.AgentWorkerId,
                FileName = fileName,
                FileType = filePathInfo.FileType,
                Segment = filePathInfo.Segment,
                IsSucessStatus = status,
                Message = message,
                TimeStamp = DateTime.Now
            };
            CoreProcess.wsClientManager.Enqueue(fileStatus);
        }
    }
    public class FileWatcherClass
    {
        public FileSystemWatcher fileSystemWatcher;
    }
}


using AgentWorker.Global;
using AgentWorker.Models.Response;
using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using System.Diagnostics;
using System.Management;
using System.ServiceProcess;

namespace AgentWorker.Core
{
	public class ComponentManager
	{
		private ComponentType componentType;
		private int InstanceId;
		private string exePath=string.Empty;
		private string CmdParameters;
		private Process _process;
		private int PID;
		private string processName;
		ManualResetEvent _mre;
		private bool isRunAsService;
		private string serviceName;
		private bool isRunning;
		private CancellationTokenSource CancellationTokenSource;
		private CancellationToken token;
		public ComponentManager(ComponentInfoData componentInfoData)
		{
			componentType = (ComponentType)componentInfoData.ComponentType;
			InstanceId = componentInfoData.InstanceId;
			exePath = string.IsNullOrEmpty(componentInfoData.ExecutablePath)?string.Empty: componentInfoData.ExecutablePath;
			CmdParameters = componentInfoData.CmdParameters;
			_mre = new ManualResetEvent(false);
			serviceName = componentInfoData.ServiceName;
		}

		public Response StartComponent(bool isRunAsServiceInput, string requestId)
		{
			Response response= new Response();
			isRunAsService= isRunAsServiceInput;
			
			if (_process != null && !_process.HasExited)
			{
				StopComponent();
			}

			if (isRunAsService)
			{
				ServiceController service = new ServiceController(serviceName);
				try
				{
					TimeSpan timeout = TimeSpan.FromMilliseconds(Config.serviceTimerOut);

					service.Start();
					service.WaitForStatus(ServiceControllerStatus.Running, timeout);
					response.Set(StatusCode.Success, $"Service started {serviceName}");

					string query = $"Select ProcessId FROM Win32_Service WHERE Name = {serviceName}";
					ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);
					ManagementObjectCollection collections = searcher.Get();

					foreach (ManagementObject collection in collections)
					{
						int processId = 0;
						processId = Convert.ToInt32(collection["ProcessId"]);
						Process process = Process.GetProcessById(processId);
						if (process != null)
						{
							_process = process;
							processName = _process.ProcessName.Trim();
							StartComponentOperationInfoTracking();
							// send message on websocket of running  process;
						}
					}
				}
				catch (Exception ex)
				{
					Log.Error($"Exception occured while running service {serviceName} | {ex}");
					response.Set(StatusCode.Failure, $"Exception occured while running service {serviceName} | {ex}");
				}
			}
			else
			{
				var cmdParameters = $"{CmdParameters} --rid={requestId}"; 
				_process = new Process();
				_process.StartInfo = new ProcessStartInfo()
				{
					FileName = exePath,
					Arguments = cmdParameters,
					UseShellExecute = true,
					RedirectStandardOutput = false,
					RedirectStandardError = false,
					CreateNoWindow = false
				};
				try
				{
					_process.Start();
					PID = _process.Id;
					processName = _process.ProcessName.Trim();
					ConsoleLog.ConsoleWrite($"Process started with PID {_process.Id} | Name {_process.ProcessName} | instanceId {InstanceId}");
					response.Set(StatusCode.Success, $"Process started with PID {_process.Id} | Name {_process.ProcessName} | instanceId {InstanceId}");
				 	//StartComponentOperationInfoTracking();
				}

				catch (Exception ex)
				{
					Log.Error($"Exception occured while running the process | instanceId {InstanceId} {ex} ");
					response.Set(StatusCode.Failure, $"Exception occured while running the process | instanceId {InstanceId} {ex}");
				}
			}

			return response;
		}

		public Response StopComponent()
		{
			Response response= new Response();
			if (isRunAsService)
			{
				ServiceController service = new ServiceController(serviceName);
				try
				{
					TimeSpan timeout = TimeSpan.FromMilliseconds(Config.serviceTimerOut);
					CancellationTokenSource.Cancel();
					service.Stop();
					service.WaitForStatus(ServiceControllerStatus.Stopped, timeout);
                    SetIsRunning(false);
                    response.Set(StatusCode.Success, $"Service stopped {serviceName}");
				
				}
				catch(Exception ex)
				{
					Log.Error($"Exception occured while stopping service {serviceName}");
					response.Set(StatusCode.Failure, $"Exception occured while stopping service {serviceName}");
				}
			}
			else
			{
				if (_process != null && !_process.HasExited)
				{
					try
					{
						if(CancellationTokenSource!=null)
							CancellationTokenSource.Cancel();
						_process.Kill();
						_process.WaitForExit();
						SetIsRunning(false);
						ConsoleLog.ConsoleWrite($"Process stopped {PID} | Name {processName} | instanceId {InstanceId}");
						response.Set(StatusCode.Success, $"Process stopped {PID} | Name {processName} | instanceId {InstanceId}");
					}
					catch (Exception ex)
					{
						Log.Error($"An error occured while stopping the process | instanceId {InstanceId} : {ex}");
						response.Set(StatusCode.Failure, $"An error occured while stopping the process | instanceId {InstanceId} : {ex}");
					}

				}
				else
				{
					Log.Info($"Process is already stopped or was never started | instanceId {InstanceId} ");
					response.Set(StatusCode.Failure, $"Process is already stopped or was never started {processName} | instanceId {InstanceId}");
				}
			}
			return response;
		}

		public bool GetIsRunning()
		{
			return isRunning;
		}

		public void SetIsRunning(bool flag)
		{
			isRunning = flag;
			if(isRunning)
            {
                if (_process == null || _process.Id == 0 || _process.HasExited)
                {
                    SetExistingProcess();
                }
            }
			else
			{
				_process = null;
			}
		}
		
		public void SetExistingProcess()
		{
			try
			{
				string wmiQery = string.Format("select CommandLine, ProcessId, Name from Win32_Process where ExecutablePath='{0}'", exePath.Replace("\\", "\\\\"));
				ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmiQery);
				ManagementObjectCollection collections = searcher.Get();

				foreach (ManagementObject collection in collections)
				{
					Console.WriteLine("{0} | {1} | {2}", collection["CommandLine"], collection["ProcessId"], collection["Name"]);

					string ags = $"{collection["Name"]} {componentType}_{InstanceId}";

					var processId = GetProcessIdOfExistingProcess(ags);
					Process process = Process.GetProcessById(processId);
					if (process != null)
					{
						_process = process;
						processName = _process.ProcessName;
						StartComponentOperationInfoTracking();
						// send message on websocket of running  process;
					}
				}
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured while setting existing process | {ex}");
				// send message on websocket;
			}
			
		}

		private void StartComponentOperationInfoTracking()
		{
			if(CancellationTokenSource != null)
			{
				CancellationTokenSource.Cancel();
			}
			CancellationTokenSource = new CancellationTokenSource();
			token = CancellationTokenSource.Token;
			try
			{
				Task.Factory.StartNew(() =>
				{
					while (true)
					{
						_mre.WaitOne(10000);
						if (token.IsCancellationRequested) break;
						
						var cpu = GetCPU();
						var ram = GetRam();
						Console.WriteLine($"{componentType} | {InstanceId} | CPU usage {cpu:F2}% | Working SET Memory {ram:F2} MB");
						//send to FE on websocket
						ComponentTechincalInfo componentTechincalInfo = new()
						{
							MessageCode = (int)CMA_OpCode.CMA_TECHNICAL_PARAM_REQ,
							ComponentType = (int)componentType,
							InstanceId = InstanceId,
							CPUPercentage = cpu,
							RAMUsage = ram,
							TimeStamp = DateTime.Now
						};
						CoreProcess.wsClientManager.Enqueue(componentTechincalInfo);
					};
				}, token);
			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured in technical parametrs {ex}");
			}
		}

		private double GetCPU()
		{
			try
            {
                if (_process != null && !_process.HasExited)
                {
                    _process.Refresh();
                    TimeSpan startCpu = _process.TotalProcessorTime;
                    DateTime startTIme = DateTime.UtcNow;
                    Thread.Sleep(1000);
                    TimeSpan endCPU = _process.TotalProcessorTime;
                    DateTime endTime = DateTime.UtcNow;

                    double cpuUsedMs = (endCPU - startCpu).TotalMilliseconds;
                    double totalMS = (endTime - startTIme).TotalMilliseconds;
                    return cpuUsedMs / Environment.ProcessorCount / totalMS * 100;
                }
                return 0.0;
            }
			catch (Exception ex)
            {
                Log.Error($"Error while Getting CPU | {ex.Message}");
                return 0.0;
            }
		}

		private double GetRam()
		{
			try
            {
                if (_process != null && !_process.HasExited)
                {
                    _process.Refresh();
                    Thread.Sleep(1000);
                    return (_process.WorkingSet64) / 1024.0 / 1024.0;
                }
                return 0.0;
            }
			catch (Exception ex)
			{
				Log.Error($"Error while Getting RAM | {ex.Message}");
				return 0.0;
			}
		}

		private int GetProcessIdOfExistingProcess(string args)
		{
			int processId = 0;
			try
			{
				Process process = new Process();
				process.StartInfo = new ProcessStartInfo()
				{
					FileName = Config.batchFilePath,
					Arguments = args,
					UseShellExecute = false,
					RedirectStandardOutput = true,
					RedirectStandardError = true,
					CreateNoWindow = true,
				};
				process.Start();

				string[] output = process.StandardOutput.ReadToEnd().Split("\r\n");
				string error = process.StandardError.ReadToEnd();
				//set processId
				if (!string.IsNullOrEmpty(output[0]))
				{
					processId = Convert.ToInt32(output[0]);
				}
				process.WaitForExit();

			}
			catch (Exception ex)
			{
				Log.Error($"Exception occured while reading batch output | {ex}");
			}
			
			return processId;
		}

	}

}


namespace AgentWorker.Core
{
    using Microsoft.Extensions.Configuration;
    using System;

    public static class AppSettingHelper
    {
        static AppSettingHelper()
        {
            Configuration = new ConfigurationBuilder()
             .SetBasePath(ProcessDirectory)
             .AddJsonFile("appsettings.json")
             .Build();
        }

        public static string ProcessDirectory
        {
            get
            {
                return AppDomain.CurrentDomain.BaseDirectory;
            }
        }

        public static IConfigurationRoot Configuration { get; }
    }
}

using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using System.Text;
using LoginSignupCore.Global;

namespace LoginSignupCore.Controllers
{
    public class AccountController : Controller
	{
		public IActionResult Index()
		{
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                return RedirectToAction("Login", "Account");

            }
            return View();
		}
		private readonly ApplicatonDBContext _dbcontext;
		public AccountController (ApplicatonDBContext context)
		{
			_dbcontext = context;
		}
		[HttpGet]
		public IActionResult Register() 
		{
            return View(new RegisterViewModel());
		}

        private string EncryptPass(string password)
        {
            string msg = "";
            byte[] encode = new byte[password.Length];
            encode = Encoding.UTF8.GetBytes(password);
            msg = Convert.ToBase64String(encode);
            return msg;
        }

        [HttpPost]
        public IActionResult Register(RegisterViewModel user)
        {
            if (ModelState.IsValid)
			{
                user.Password = EncryptPass(user.Password);
                user.ConfirmPassword = EncryptPass(user.ConfirmPassword);
                _dbcontext.Accounts.Add(user);
				_dbcontext.SaveChanges();
				return RedirectToAction("Login", "Account");
			}
            return View(user);
        }

        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost] 
        public async Task<IActionResult> Login(User model)
        {
            if (ModelState.IsValid)
			{
				var user=_dbcontext.Accounts.FirstOrDefault(u=>u.Email==model.Email);
				if (user!=null && user.Password == EncryptPass(model.Password)) 
				{
                    List<Claim> claims = new List<Claim>()
                    {
                        new Claim(ClaimTypes.NameIdentifier, model.Email),
                        new Claim(ClaimTypes.Name,user.Id.ToString()),
                        new Claim("OtherProperties", "Example Role")
                    };
                    ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims,
                        CookieAuthenticationDefaults.AuthenticationScheme);

                    LoginSignupCore.Models.globals.User_ID = user.Id;

                    AuthenticationProperties properties = new AuthenticationProperties()
                    {
                        AllowRefresh = true,
                        IsPersistent = model.KeepLoggedin
                    };
                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
                        new ClaimsPrincipal(claimsIdentity), properties);
                    HttpContext.Session.SetString("UserName",model.Email);
                    //TempData["Email"] = model.Email;
                    return RedirectToAction("Monitoring", "Main");
                }
				else
				{
					ViewData["Message"] = "Invalid email or password";
					ModelState.AddModelError("", "Invalid email or password");
					return View();
                }
			}
            return View(model);
        }

        public async Task<IActionResult> Logout()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            HttpContext.Session.Clear();
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            LoginSignupCore.Models.globals.User_ID = 0;
            return RedirectToAction("Login","Account");
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}





using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class AgentMasterController : Controller
    {

        private readonly AgentRepository _agentRepository;
        public AgentMasterController()
        {
            _agentRepository = new();
        }

        [HttpGet]
        public IActionResult Index()
        {
            return View();
        }
        [HttpGet]
        public IActionResult AgentMaster()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return RedirectToAction("AgentMasters");

        }
        [HttpPost]
        public IActionResult Agent(AgentMaster agentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var agent = new AgentMaster()
            {
                AgentId = 0,
                AgentName = agentMaster.AgentName,
                BrokerId = agentMaster.BrokerId,
                SiteName = agentMaster.SiteName,
                BrokerSiteId = agentMaster.BrokerSiteId,
                nvcInstanceIP = agentMaster.nvcInstanceIP,
                DtmCreationDate = DateTime.Now,
                IntCreatedBy = globals.User_ID,
                Remarks = agentMaster.Remarks
            };

            //remove validation for other fields
            //var requiredfields = typeof(AgentMaster).GetProperties().Where(p => Attribute.IsDefined(p, typeof(RequiredAttribute))).Select(p=>p.Name);
            //foreach (var key in ModelState.Keys)
            //{
            //    if (!requiredfields.Contains(key) && ModelState[key].Errors.Count > 0)
            //        ModelState[key].Errors.Clear();
            //}

            if (ModelState.IsValid)
            {
                try
                {
                    _agentRepository.InsertUpdateData(agent);
                }
                catch (Exception ex)
                {
                    throw;
                }
                BrokerSites sites = new BrokerSites()
                {
                    IntBrokerId = agentMaster.BrokerSiteId,
                    Id = agentMaster.BrokerSiteId,
                    NvcSiteName = agentMaster.SiteName
                };
                return RedirectToAction("AgentMasters", agentMaster);
            }
            else
            {
                foreach (var item in ModelState.Values.SelectMany(v => v.Errors))
                {
                    Console.WriteLine(item.ErrorMessage);
                }
                return RedirectToAction("AgentMasters", agentMaster);
            }
           
            
        }
       
        public IActionResult AgentMasters(AgentMaster master)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            AgentMastersViewModel AgentsView = new();
            try
            {
                AgentsView.Agents = _agentRepository.GetAllAgents(master.BrokerId, master.BrokerSiteId);
                AgentsView.Agent = new();
                AgentsView.Agent.BrokerSiteId = master.BrokerSiteId;
                AgentsView.Agent.BrokerId = master.BrokerId;
                AgentsView.Agent.SiteName = master.SiteName;
                AgentsView.Agent.AgentId = master.AgentId;
            }
            catch (Exception ex)
            {
                throw;
            }
            return View(AgentsView);
        }
        //[HttpGet]
        //public IActionResult AgentMasters(int siteid, int brokerid,string sitename)
        //{
        //    ClaimsPrincipal claimUser = HttpContext.User;
        //    if (!claimUser.Identity.IsAuthenticated)
        //    {
        //        return RedirectToAction("Login", "Account");

        //    }
        //    AgentMastersViewModel AgentsView = new();
        //    try
        //    {
        //        AgentsView.Agents = _agentRepository.GetAllAgents(brokerid, siteid);
        //        AgentsView.Agent = new();
        //        AgentsView.Agent.BrokerSiteId = siteid;
        //        AgentsView.Agent.BrokerId = brokerid;
        //        AgentsView.Agent.SiteName = sitename;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //    }
        //    return View(AgentsView);
        //}

        [HttpGet("Agent/{id}/{sitename}")]
        public IActionResult Agent(int id, string sitename)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            AgentMaster agentMaster = _agentRepository.GetAgentById(id);
            return RedirectToAction("AgentMasters",agentMaster);
        }
        [HttpPost]
        public IActionResult Edit(AgentMaster agentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            int id = Convert.ToInt32(Request.Form["Id"]);
            var IsActive = Request.Form["mvalue"];
            ViewBag.mvalue = IsActive;
            var agent = new AgentMaster()
            {
                AgentId = agentMaster.AgentId,
                IsActive = agentMaster.IsActive,
                DtmUpdationDate = DateTime.Now,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Agent updated."
            };
            try
            {
                int rows = _agentRepository.UpdateIsActiveData(agent);
                agentMaster.AgentId = 0;
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentMasters", agentMaster);
        }
        [HttpPost]
        public IActionResult Update(AgentMaster agentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var agent = new AgentMaster()
            {
                AgentId = agentMaster.AgentId,
                AgentName = agentMaster.AgentName,
                nvcInstanceIP = agentMaster.nvcInstanceIP,
                DtmUpdationDate = DateTime.Now,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Agent Updated."
            };
            try
            {
                int rows = _agentRepository.UpdateData(agent);
                agentMaster.AgentId = 0;
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentMasters", agentMaster);

        }
        [HttpGet("AgentMaster/Delete/{id}/{bid}/{sid}/{sitename}")]
        public IActionResult Delete(int id, int bid, int sid,string sitename)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var agent = new AgentMaster()
            {
                AgentId = id,
                BrokerId= bid,
                BrokerSiteId=sid,
                SiteName = sitename,
                IsDeleted = 1,
                DtmUpdationDate = DateTime.Now,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Agent Deleted."
            };
            try
            {
                int rows = _agentRepository.DeleteData(agent);
                agent.AgentId = 0;
            }
            catch (Exception ex)
            {
                throw;
            }

            return RedirectToAction("AgentMasters", agent);

        }
        [HttpGet("AgentMaster/UpdateIsActive/{id}/{bid}/{sid}")]
        public IActionResult UpdateIsActive(int isActive, int bid, int sid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var agent = new AgentMaster()
            {
                AgentId = isActive,
                IsDeleted = 1,
                DtmUpdationDate = DateTime.Now,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Agent updated."
            };
            try
            {
                int rows = _agentRepository.UpdateIsActiveData(agent);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentMasters", new { siteid = sid, brokerid = bid });

        }
        [HttpGet]
        public IActionResult AgentsStatus(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<AgentMaster> AgentsView = new();
            try
            {
                AgentsView = _agentRepository.GetAllAgents(brokerid,siteid );
            }
            catch (Exception ex)
            {
                throw;
            }
            return View(AgentsView);
        }
        [HttpGet("AgentMaster/AgentFile/{id}/{brid}/{sid}/{sitename}")]
        public IActionResult AgentFile(int id,int brid,int sid, string sitename)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            AgentMaster agentMaster = _agentRepository.GetAgentById(id);
            agentMaster.SiteName = sitename;
            agentMaster.BrokerId = brid;
            agentMaster.BrokerSiteId= sid;
           
            return PartialView("Agent", agentMaster);
        }
        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}




using LoginSignupCore.Core;
using LoginSignupCore.Data;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
using System.Security.Policy;

namespace LoginSignupCore.Controllers
{
    public class AgentwiseFilesController : Controller
    {
        private readonly AgentwiseFilesRepository agentwiseFilesRepository;
        public AgentwiseFilesController()
        {
            agentwiseFilesRepository = new();
        }
        public IActionResult AgentWiseFileMaster(int agentId, int brokerid, int siteid)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");

            }
            AgentwiseFileViewModel AgentwiseFileView = new();
            try
            {
                AgentwiseFileView.Files = agentwiseFilesRepository.GetAllFilesAgentWise(agentId);
                AgentwiseFileView.File = new();
                AgentwiseFileView.File.AgentId = agentId;
                AgentwiseFileView.File.BrokerId = brokerid;
                AgentwiseFileView.File.SiteId = siteid;
                AgentwiseFileView.File.AgentName = CoreProcess.agentSessionCache.GetSession(brokerid, siteid, agentId).Item2?.AgentName??string.Empty;

            }
            catch (Exception ex)
            {
                throw;
            }
            return View(AgentwiseFileView);
        }
        [HttpPost]
        public IActionResult FileUpdate(AgentwiseFiles agentwiseFiles)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");
            }
            agentwiseFiles.DtmCreationDate = DateTime.Now;
            var claim = claimUser.Claims.Where(x => x.ValueType == ClaimTypes.Name).FirstOrDefault();
            agentwiseFiles.IntCreatedBy = claim==null?0:Convert.ToInt32(claim.Value);
            agentwiseFiles.Remarks = string.IsNullOrEmpty(agentwiseFiles.Remarks) ? string.Empty : agentwiseFiles.Remarks; 
            try
            {
                agentwiseFilesRepository.InsertAgentWiseFilesData(agentwiseFiles);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentWiseFileMaster", new { agentId = agentwiseFiles.AgentId, brokerid = agentwiseFiles.BrokerId, siteid = agentwiseFiles.SiteId });

        }

        //[HttpGet]
        [HttpGet("AgentwiseFile/File/{AgentId}/{brokerid}/{siteid}")]
        public IActionResult File(int AgentId, int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            var file = new AgentwiseFiles()
            {
                Id = 0,
                AgentId = AgentId,
                BrokerId =brokerid,
                SiteId = siteid,
                AgentName = CoreProcess.agentSessionCache.GetSession(brokerid,siteid,AgentId).Item2?.AgentName??string.Empty

            };
            var data = new FilesViewModel()
            {
                file = file,
                list = agentwiseFilesRepository.GetFileDropDowmList()
            };
            return PartialView("File", data);
        }


        [HttpGet("AgentwiseFiles/Delete/{id}/{aid}/{brokerid}/{siteid}")]
        public IActionResult Delete(int id, int aid, int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var file = new AgentwiseFiles()
            {
                Id = id,
                AgentId = aid,
                IsDeleted = 1,
                DtmUpdationDate = DateTime.Now.Date,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Deleted AgentwiseFile"
            };
            try
            {
                agentwiseFilesRepository.UpdateIsDelete(file);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentWiseFileMaster", new { agentId = aid, brokerid = brokerid, siteid = siteid });


        }
        [HttpPost]
        public IActionResult Edit(AgentwiseFiles fileMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var file = new AgentwiseFiles()
            {
                Id = fileMaster.Id,
                AgentId = fileMaster.AgentId,
                IsActive = fileMaster.IsActive,
                DtmUpdationDate = DateTime.Now.Date,
                IntUpdatedBy = globals.User_ID,
                Remarks = "IsActive AgentwiseFile updated"
            };
            try
            {
                agentwiseFilesRepository.UpdateIsActive(file);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("AgentWiseFileMaster", new { agentId = fileMaster.AgentId, brokerid = fileMaster.BrokerId, siteid = fileMaster.SiteId });
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}




//using LoginSignupCore.Data;
//using LoginSignupCore.Models;
//using Microsoft.AspNetCore.Mvc;
//using System.Security.Claims;
//using Microsoft.AspNetCore.Authentication;
//using Microsoft.AspNetCore.Authentication.Cookies;
//using Microsoft.EntityFrameworkCore;
//using System.Data;
//using Microsoft.Data.SqlClient;
//using Microsoft.AspNetCore.Mvc.Rendering;

//namespace LoginSignupCore.Controllers
//{
//    public class AlertController : Controller
//    {
//        private readonly ApplicatonDBContext _dbcontext;
       
//        public IActionResult Alert()
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");

//            }
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            globals.Parameter_Name = "Please Select";

//            GetDropdownList();
//            GetDropdownComponentList();
//            GetDropdownParameterList("");
//            return View();
//        }

//        public AlertController(ApplicatonDBContext context)
//        {
//            _dbcontext = context;
//        }

//        [HttpPost]
//        public IActionResult Alert(AlertThreshold alertThreshold)
//        {
//            ViewBag.successStatus = 0;
//            try
//            {
//                var pId = Request.Form["BrokerSiteId"];
//                var pCompId = Request.Form["IntComponentId"];
//                var pParamId = Request.Form["IntParamId"];
//                ViewBag.ComponentName = Request.Form["ComponentName"];
//                ViewBag.ParameterName = Request.Form["ParameterName"];

//                alertThreshold.IntCreatedBy = globals.User_ID;
//                alertThreshold.BitIsDelete = 0;
//                alertThreshold.BitIsActive = 1;
//                alertThreshold.DtmCreatedOn = DateTime.Now.Date;
//                _dbcontext.AlertThresholds.Add(alertThreshold);
//                _dbcontext.SaveChanges();
//                ViewBag.successStatus = 1;
//                GetDropdownList();
//                GetDropdownComponentList();
//                GetDropdownParameterList("");
//                GetDropdownListReload(pId);
//                GetDropdownComponentListReload(pCompId);
//                GetDropdownParameterListReload(pId);
//                return View(alertThreshold);
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return View(alertThreshold);
//        }

//        [HttpPost]
//        public IActionResult AlertUpdate(AlertThreshold alertThreshold)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");

//            }
//            ViewBag.successStatus = 0;
//            try
//            {
//                        int id = Convert.ToInt32(Request.Form["Id"]);
//                        int intParamId = Convert.ToInt32(Request.Form["IntParamId"]);
//                        int intComponentId = Convert.ToInt32(Request.Form["IntComponentId"]);
//                        string componentName = Request.Form["ComponentName"];
//                        string brokerSiteId = Request.Form["BrokerSiteId"];                        

//                        int intThresholdValue = Convert.ToInt32(Request.Form["IntThresholdValue"]);
//                        DateTime dtmupdateon = DateTime.Now;
//                        int intUpdatedBy = globals.User_ID;
//                        var bitIsActive = 0;
//                        string mvalue = Request.Form["BitIsActive"];

//                        if (mvalue == "1")
//                        {
//                            bitIsActive = 1;
//                        }
//                        else if (mvalue == "on") 
//                        {
//                            bitIsActive = 1;
//                        }
//                        else if (mvalue == "1,on") 
//                        {
//                            bitIsActive = 1;
//                        }
//                        else if (mvalue == "0,on")
//                        {
//                            bitIsActive = 1;
//                        }
//                        else
//                        {
//                            bitIsActive = 0;
//                        }

//                        try
//                        {
//                            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                            {
//                                if (cmd.Connection.State != ConnectionState.Open)
//                                {
//                                    cmd.Connection.Open();
//                                }
//                                cmd.CommandText = "update AlertThreshold set IntParamId='" + intParamId + "',IntComponentId='" + intComponentId + "',ComponentName='" + componentName + "', BrokerSiteId='" + brokerSiteId + "', intThresholdValue ='" + intThresholdValue + "' , iniUpdatedBy ='" + intUpdatedBy + "',dtmUpdatedOn='" + dtmupdateon + "', bitIsActive = '" + bitIsActive + "' where Id = '" + id + "'";
//                                cmd.ExecuteNonQuery();
//                                cmd.Connection.Close();

//                                ViewBag.Status = 1;

//                                ViewBag.model = alertThreshold;
//                                return RedirectToAction("DisplayData", "Alert");
//                            }

//                        }
//                        catch (Exception ee)
//                        {
//                            ViewBag.Status = 0;
//                            return RedirectToAction("Alert", "Alert");

//                        }
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return RedirectToAction("Alert", "Alert");
//        }

//        [HttpPost]
//        public IActionResult Clear(AlertThreshold alertThreshold)
//        {
//            ViewBag.successStatus = null;
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            return RedirectToAction("Alert", "Alert");
//        }
       
//        public async Task<IActionResult> Logout()
//        {
//            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
//            globals.User_ID = 0;
//            return RedirectToAction("Login", "Account");
            
//        }


//        [HttpPost]
//        public IActionResult Edit(VwAlertThreshold _alertThreshold)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");
//            }

//            int id = Convert.ToInt32(Request.Form["Id"]);
//            var bitIsActive = Request.Form["mvalue"];
//            ViewBag.mvalue = bitIsActive;

//            int paramId = Convert.ToInt32(Request.Form["ParamId"]);
//            var brokerSiteName = Request.Form["BrokerSiteName"];
//            var nvcComponentName = Request.Form["ComponentName"];
//            var intComponentId = Request.Form["Intcomponentid"];
//            var brokerSiteId = Request.Form["BrokerSiteId"];
//            ViewBag.sitename = brokerSiteName;
//            ViewBag.ComponentName = nvcComponentName;
//            ViewBag.Intcomponentid = intComponentId;
//            ViewBag.BrokerSiteId = brokerSiteId;
//            ViewBag.ParamId = paramId;

//            globals.Broker_Site = brokerSiteId;
//            globals.BrokerId_update = Convert.ToString(brokerSiteId);
//            globals.Component_ID = Convert.ToInt32(intComponentId);

//            GetDropdownList();
//            GetDropdownComponentList();
//            GetDropdownParameterList("");
//            return View(_alertThreshold);
//        }

//        public void GetDropdownList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentsid = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public void GetDropdownListReload(string brokerSiteId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 and cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) = '" + brokerSiteId + "' order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Broker_Site = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownParameterList(string pBrokerSiteId)
//        {
            
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            if (string.IsNullOrEmpty(pBrokerSiteId))
//            {
//                cmd.CommandText = "select  parameterName, cast(paramId as varchar) paramId from ComponentParameter order by ParameterName";
//            }
//            else
//            {
//                cmd.CommandText = "select  parameterName, cast(paramId as varchar) paramId from ComponentParameter where brokerSiteId = '" + pBrokerSiteId + "' order by ParameterName";
//            }
            
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelParametersid = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public void GetDropdownParameterListReload(string brokerSiteId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            if (string.IsNullOrEmpty(brokerSiteId))
//            {
//                cmd.CommandText = "select parameterName, cast(paramId as varchar) paramId from ComponentParameter order by ParameterName";
//            }
//            else
//            {
//                cmd.CommandText = "select parameterName, cast(paramId as varchar) paramId from ComponentParameter where brokerSiteId = '" + brokerSiteId + "' order by ParameterName";
//            }
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Parameter_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownComponentListReload(string intComponentId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where c.intComponentId = '" + intComponentId + "' and  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Component_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownComponentList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public IActionResult DisplayData()
//        {

//            List<VwAlertThreshold> alertThresholds = new List<VwAlertThreshold>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "Select [id],[intParamID] , [intComponentId] , [ComponentName] , [BrokerSiteName] , [BrokerSiteID] , [intThresholdValue] , [ParameterName] , [ParamId] , cast([bitIsActive] as int) bitIsActive from vwAlertThreshold order by brokerSitename";

//            Microsoft.Data.SqlClient.SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {

//                    alertThresholds.Add(new VwAlertThreshold
//                    {
//                        Id = dataread.GetInt32(0),
//                        IntParamId = dataread.GetInt32(1),
//                        IntComponentId = dataread.GetInt32(2),
//                        ComponentName = dataread.GetString(3),
//                        BrokerSiteName = dataread.GetString(4),
//                        BrokerSiteId = dataread.GetString(5),
//                        IntThresholdValue = dataread.GetInt32(6),
//                        ParameterName = dataread.GetString(7),
//                        ParamId = dataread.GetInt32(8),
//                        BitIsActive = dataread.GetInt32(9)
//                    }); ; ; ;
                    
//                }
//                cmd.Connection.Close();
                
//                ViewBag.model = alertThresholds;
//                return View();
//            }
//            return View(); 
//        }


//    }   
//}



using LoginSignupCore.Core;
using Component = LoginSignupCore.MasterCache.Component;
using Microsoft.AspNetCore.Mvc;
using System.Security.Policy;
using LoginSignupCore.Models;
using LoginSignupCore.MasterCache;
using Microsoft.Extensions.Logging;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using Newtonsoft.Json;
using LoginSignupCore.Data;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class BODProcessController : Controller
    {
        private readonly BrokerRepository brokerRepository;
        private readonly BrokerSiteRepository brokerSiteRepository;
        public BODProcessController()
        {
            brokerRepository = new();
            brokerSiteRepository = new();
        }
        public IActionResult Index(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            AgentMaster agent = new AgentMaster()
            {
                BrokerSiteId = siteid,
                BrokerId = brokerid,
                AgentName =  brokerRepository.GetBrokerById(brokerid).NvcBrokerName,
                SiteName = brokerSiteRepository.GetBrokerSitesById(siteid).NvcSiteName,
            };
            return View(agent);
        }
        public IActionResult StartComponent(int brokerid, int siteid, int isAjax= 0)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<Component> componentMasters = new List<Component>();
            var componentMaster = CoreProcess.agentSessionCache.GetComponentMaster(brokerid, siteid);
            if (componentMaster.Item1 == true && componentMaster.Item2 != null && componentMaster.Item2.Count > 0)
            {
                componentMasters = componentMaster.Item2.Where(x => x.componentMaster.IsActive == true && x.componentMaster.IsDelete == false).OrderBy(p => p.componentMaster.Priority).ToList();

                if (componentMasters.Any())
                {
                    componentMasters[0].isenabled = true;
                    for (int i = 1; i < componentMasters.Count; i++)
                    {

                        if (componentMasters[i - 1].isRequestSend == true && componentMasters[i - 1].status == (int)CMA_StatusCode.Completed)
                        {
                            componentMasters[i].isenabled = true;
                        }
                        else
                        {
                            componentMasters[i].isenabled = true;
                        }
                    }
                }

            }
            BODUploadComponent comp = new BODUploadComponent();
            comp.component.componentMaster = new();
            comp.component.componentMaster.BrokerId = brokerid;
            comp.component.componentMaster.SiteId = siteid;
            comp.Components = componentMasters;



            if (isAjax == 1)
            {
                var json = JsonConvert.SerializeObject(componentMasters);
                return Json(json);
            }
            return View(comp);
        }
        public IActionResult UploadFile(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            List<FileMasterInfo> fileMasters = new List<FileMasterInfo>();
            var fileMaster = CoreProcess.agentSessionCache.GetFileMasterInfo(brokerid, siteid);
            if (fileMaster.Item1 == true && fileMaster.Item2.Count > 0)
            {
                fileMasters = fileMaster.Item2.Where(x => x.IsUploadBeforeBOD == true).ToList();
            }
            BODUploadFileView file = new BODUploadFileView();
            file.fileMasterInfo.BrokerId = brokerid;
            file.fileMasterInfo.SiteId = siteid;
            //file.fileMasterInfo.SiteId = fileMasters.FirstOrDefault().SiteId;
            file.fileMastersInfo = fileMasters;

            return View(file);
        }
        public IActionResult UploadFileAfterBOD(int brokerid, int siteid)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<FileMasterInfo> fileMasters = new List<FileMasterInfo>();
            var fileMaster = CoreProcess.agentSessionCache.GetFileMasterInfo(brokerid, siteid);
            if (fileMaster.Item1 == true && fileMaster.Item2.Count > 0)
            {
                fileMasters = fileMaster.Item2.Where(x => x.IsUploadBeforeBOD == false).ToList();
            }
            BODUploadFileView file = new BODUploadFileView();
            file.fileMasterInfo.BrokerId = brokerid;
            file.fileMasterInfo.SiteId = siteid;
            file.fileMastersInfo = fileMasters;

            return View(file);
        }
        public IActionResult TechnicalInfo(int brokerid, int siteid ,int isAjax = 0)
        {
            if(!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<ComponentsTechnicalInfo> infos = new();
            var info = CoreProcess.agentSessionCache.GetTechnicalInfo(brokerid, siteid);
            if (info != null)
            {
                infos = info;
            }
            TechnicalInfoViewModel tecinfo = new TechnicalInfoViewModel();
            tecinfo.BrokerId = brokerid;
            tecinfo.SiteId = siteid;
            tecinfo.TechnicalInfos = infos;

            if (isAjax == 1)
            {
                var json = JsonConvert.SerializeObject(infos);
                return Json(json);
            }
            return View(tecinfo);
        }

        [HttpGet]
        public IActionResult Cancel(int brokerId, int siteId)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return RedirectToAction("Index", new {brokerId=brokerId, siteId = siteId});
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}


using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using System.Data;
namespace LoginSignupCore.Controllers
{
    public class BrokerMasterController : Controller
    {

        private readonly ApplicatonDBContext _dbcontext;
        private readonly BrokerRepository brokerRepository;

        public BrokerMasterController(ApplicatonDBContext context)
        {
            _dbcontext = context;
            brokerRepository = new();
        }
        public IActionResult BrokerMaster()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            return View();
        }

        [HttpPost]
        public IActionResult Clear(BrokerMaster brokerMaster)
        {
            ViewBag.successStatus = null;
            return RedirectToAction("BrokerMaster", "BrokerMaster");
        }

        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            globals.User_ID = 0;
            return RedirectToAction("Login", "Account");
        }

        [HttpGet]
        public IActionResult BrokerMaster(int id)
        {
           // ViewBag.successStatus = 0;
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                return RedirectToAction("Login", "Account");
            }
            var res = brokerRepository.GetBrokerById(id);
            return PartialView("BrokerMaster", res);
        }

        [HttpPost]
        public IActionResult BrokerMaster(BrokerMaster brokerMaster)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");
            }
            // ViewBag.successStatus = 0;
            try
            {
                brokerMaster.IntCreatedBy = globals.User_ID;
                brokerMaster.IsDeleted = 0;
                brokerMaster.IsActive = 1;
                brokerMaster.DtmCreationDate = DateTime.Now.Date;
                _dbcontext.BrokerMasters.Add(brokerMaster);
                _dbcontext.SaveChanges();
               // ViewBag.successStatus = 1;
               //brokerMaster = null;
                //return View(brokerMaster);
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return RedirectToAction("DisplayData","BrokerMaster");
        }

        public IActionResult DisplayData(BrokerMaster brokermaster)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }

            List<BrokerMaster> brokerMasters = new List<BrokerMaster>();
            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd.Connection.State != ConnectionState.Open)
            {
                cmd.Connection.Open();
            }
            cmd.CommandText = "Select id, isnull(NvcBrokerName,'') NvcBrokerName, IsActive  from BrokerMaster where IsDeleted = 0";

            Microsoft.Data.SqlClient.SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
            if (dataread.HasRows)
            {
                while (dataread.Read())
                {

                    brokerMasters.Add(new BrokerMaster
                    {
                        Id = dataread.GetInt32(0),
                        NvcBrokerName = dataread.GetString(1),
                        IsActive = dataread.GetInt32(2)
                    });

                }
                cmd.Connection.Close();
            }
            BrokerView viewbroker = new();
                viewbroker.brokers = brokerMasters;
                viewbroker.broker = brokermaster;
            return View(viewbroker);
        }
        [HttpPost]
        public IActionResult BrokerMasterUpdate(BrokerMaster brokerMaster)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");

            }
           ViewBag.successStatus = 0;
            try
            {
                var id = Convert.ToInt32(Request.Form["Id"]);
                var brokerName = Request.Form["NvcBrokerName"];
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 0;
                string mvalue = Request.Form["IsActive"];

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "0,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                    {
                        if (cmd.Connection.State != ConnectionState.Open)
                        {
                            cmd.Connection.Open();
                        }
                        cmd.CommandText = "update BrokerMaster set NvcBrokerName='" + brokerName + "',intUpdatedBy = '" + intUpdatedBy + "', dtmUpdationDate = '" + dtmupdateon + "', IsActive = '" + isActive + "'  where Id = '" + id + "'";
                        cmd.ExecuteNonQuery();
                        cmd.Connection.Close();

                        ViewBag.Status = 1;
                        ViewBag.successStatus = 1;

                        ViewBag.model = brokerMaster;
                        return RedirectToAction("DisplayData", "BrokerMaster");
                    }

                }
                catch (Exception ee)
                {
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("BrokerMaster", "BrokerMaster");

                }
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return RedirectToAction("BrokerMaster", "BrokerMaster");
        }


        public IActionResult Update(int id, int isActive)
        {

            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");
            }
            var comp = new ComponentMaster()
            {
                Id = id,
                BitIsActive = isActive,
                DtmUpdatedOn = DateTime.Now,
                IntUpdatedBy = globals.User_ID
            };
            try
            {
                var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                {
                    if (cmd.Connection.State != ConnectionState.Open)
                    {
                        cmd.Connection.Open();
                    }
                    cmd.CommandText = "update BrokerMaster set IsActive='" + comp.BitIsActive + "',intUpdatedBy = '" + comp.IntUpdatedBy + "', dtmUpdationDate = '" + comp.DtmUpdatedOn + "'  where Id = '" + comp.Id + "'";
                    cmd.ExecuteNonQuery();
                    cmd.Connection.Close();

                    ViewBag.Status = 1;
                    ViewBag.successStatus = 1;

                    //ViewBag.model = _brokerMaster;

                }
                return RedirectToAction("DisplayData", "BrokerMaster");
            }
            catch (Exception ex)
            {
                ViewBag.Status = 0;
                ViewBag.successStatus = 0;
                //ViewBag.model = _brokerMaster;
                return RedirectToAction("DisplayData", "BrokerMaster");
            }

        }
        [HttpPost]
        public IActionResult Edit(BrokerMaster _brokerMaster)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {

                return RedirectToAction("Login", "Account");

            }

            int id = Convert.ToInt32(Request.Form["Id"]);
            var IsActive = Request.Form["mvalue"];
            ViewBag.mvalue = IsActive;
            var res =brokerRepository.GetBrokerById(id);
            res.IsActive = _brokerMaster.IsActive;
            return RedirectToAction("DisplayData",res);
        }


    }
}




using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System.Data;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class BrokerSiteController : Controller
    {
        private readonly ApplicatonDBContext _dbcontext;
        private readonly BrokerSiteRepository _brokerSiteRepository;
        public BrokerSiteController(ApplicatonDBContext context)
        {
            _dbcontext = context;
            _brokerSiteRepository = new();
        }

        [HttpGet]
        public IActionResult BrokerSites(int brokerid,string brokerName,int id=0)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }

            //globals.BrokerIdList = "Please Select";
            GetDropdownList();
            DisplayData();
            BrokerSites sites = new BrokerSites()
            {
                IntBrokerId = brokerid
            };
            if(id!=0)
            {
                sites = _brokerSiteRepository.GetBrokerSitesById(id);
            }
            return View(sites);
        }
        [HttpGet]
         public IActionResult cancel(int brokerid , string brokername)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            return RedirectToAction("BrokerSites", new { brokerid = brokerid, brokerName = brokername});
        }

        [HttpPost]
        public IActionResult GetBrokerSites(BrokerMaster brokerMaster)
        {
            
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            

            globals.BrokerId = brokerMaster.Id;
            globals.BrokerName = brokerMaster.NvcBrokerName;
            //globals.BrokerIdList = "Please Select";
            // GetDropdownList();
            DisplayData();
            return RedirectToAction("BrokerSites", new {  brokerid = brokerMaster.Id, brokerName=brokerMaster.NvcBrokerName });
        }
        

        public void GetDropdownList()
        {
            List<string>[] Lista = new List<string>[2];
            Lista[0] = new List<string>();
            Lista[1] = new List<string>();     

            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            {
                if (cmd.Connection.State != ConnectionState.Open)
                {
                    cmd.Connection.Open();
                }
                cmd.CommandText = "Select nvcBrokerName Text,cast(id as varchar) Value from BrokerMaster order by nvcBrokerName";
                using SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();

                if (dataread.HasRows)
                {
                    while (dataread.Read())
                    {
                        Lista[0].Add(dataread.IsDBNull(0) ? "": dataread.GetString(0));
                        Lista[1].Add(dataread.IsDBNull(1) ? "" : dataread.GetString(1));
                    }
                }                
            } 
            ViewData["BrokerNameList"] = Lista;
        }


        [HttpPost]
        public IActionResult BrokerSites(BrokerSites _brokerSites)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            string name = Request.Form["Para"];

            globals.BrokerIdList = name;
            ViewBag.successStatus = 0;
            try
            {
                if (ModelState.IsValid)
                {
                    (bool, string) result;
                    if (_brokerSites.Id != 0)
                    {
                        //update
                        result = _brokerSiteRepository.UpdateBrokerSiteData(_brokerSites); 
                    }
                    else
                    {
                        result = _brokerSiteRepository.InsertBrokerSiteData(_brokerSites);
                    }
                    ViewBag.successStatus = result.Item1 == true ? 1 : 0;

                    return RedirectToAction("BrokerSites", new { brokerid = _brokerSites.IntBrokerId,id=0 });
                }
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return RedirectToAction("BrokerSites", new { brokerid = _brokerSites.IntBrokerId });
           // return View(_brokerSites);
        }

        [HttpPost]
        public IActionResult Edit(BrokerSites brokerSites)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            try
            {
                var id = Convert.ToInt32(Request.Form["Id"]);
                var brokerName = Request.Form["NvcBrokerName"];
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 0;
                string mvalue =Convert.ToString( Request.Form["IsActive"]);

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                    {
                        if (cmd.Connection.State != ConnectionState.Open)
                        {
                            cmd.Connection.Open();
                        }
                        cmd.CommandText = "update brokerSites set intUpdatedBy = '" + intUpdatedBy + "', dtmUpdationDate = '" + dtmupdateon + "', IsActive = '" + isActive + "'  where Id = '" + id + "'";
                        cmd.ExecuteNonQuery();
                        cmd.Connection.Close();

                        ViewBag.Status = 1;
                        ViewBag.successStatus = 1;
                        ViewBag.model = brokerSites;
                        return RedirectToAction("BrokerSites", "BrokerSite");
                    }

                }
                catch (Exception ee)
                {     
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("BrokerSite", "BrokerSite");

                }
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return RedirectToAction("BrokerMaster", "BrokerMaster");
        }

        //public void GetDropdownList()
        //{
        //    List<SelectListItem> Lista = new List<SelectListItem>();
        //    Lista.Add(new SelectListItem { Text = "", Value = "", Selected = true });
        //    var componentData = GetBrokerList();

        //    foreach (var brokerlist in componentData)
        //    {
        //        Lista.Add(item: new SelectListItem { Text = brokerlist.NvcBrokerName, Value = brokerlist.NvcBrokerName });
        //    }
        //    ViewData["YourListofclassnames"] = Lista;
        //}

        public List<BrokerMaster> GetBrokerList()
        {
            string jointvalue = "";
            List<BrokerMaster> brokerMasters = new List<BrokerMaster>();
            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            {
                if (cmd.Connection.State != ConnectionState.Open)
                {
                    cmd.Connection.Open();
                }
                cmd.CommandText = "Select Cast(Id as varchar) +' - '+ NvcBrokerName  jointval from BrokerMaster order by NvcBrokerName";
                using SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();

                if (dataread.HasRows)
                {
                    while (dataread.Read())
                    {
                        jointvalue = dataread.GetString(0);

                        brokerMasters.Add(new BrokerMaster
                        {
                            NvcBrokerName = dataread.GetString(0)
                        }); ; ;
                    }
                    ViewBag.modelComponentsid = new SelectList(brokerMasters, "NvcBrokerName", "NvcBrokerName");
                }
                return brokerMasters;
            }
        }

        [HttpPost]
        public IActionResult Clear(BrokerMaster brokerMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            globals.BrokerId = 0;
            globals.BrokerName = null;
            globals.BrokerIdList = null;
            DisplayData();
            return RedirectToAction("BrokerSites", "BrokerSite");

        }

        public IActionResult DisplayData()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }

            List<BrokerSites> brokerSites = new List<BrokerSites>();
            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd.Connection.State != ConnectionState.Open)
            {
                cmd.Connection.Open();
            }
            cmd.CommandText = "Select id, intBrokerId,isnull(NvcSiteName,'') NvcSiteName, IsActive  from BrokerSites where intbrokerid = '" + globals.BrokerId + "' and IsDeleted = 0";

            using Microsoft.Data.SqlClient.SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
            if (dataread.HasRows)
            {
                while (dataread.Read())
                {

                    brokerSites.Add(new BrokerSites
                    {
                        Id = dataread.GetInt32(0),
                        IntBrokerId=dataread.GetInt32(1),
                        NvcSiteName = dataread.GetString(2),
                        IsActive = dataread.GetInt32(3)
                    });

                }
                cmd.Connection.Close();

                ViewBag.model = brokerSites;
                return View();
            }
            return View();
        }

        [HttpGet]
        public IActionResult Sites(int key, string name)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }

            var list = _dbcontext.BrokerSites.Where(x => x.IntBrokerId == key).ToList();
            var sites = new SiteViewModel()
            {
                brokerName = name,
                sites = list
            };
            return View(sites);
        }

        [HttpGet]
        public IActionResult Site(int brokerid, int siteid)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }

            BrokerSites site = _dbcontext.BrokerSites.Where(x => x.IntBrokerId == brokerid && x.Id == siteid).First();
           
            return View(site);
        }
        [HttpGet]
        public IActionResult SiteFile(int id)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var brokersite = _brokerSiteRepository.GetBrokerSitesById(id);
            return PartialView("site", brokersite);
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}




using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Data;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class BrokerSiteControllerbk : Controller
    {
        private readonly ApplicatonDBContext _dbcontext;
        public BrokerSiteControllerbk(ApplicatonDBContext context)
        {
            _dbcontext = context;
        }

        [HttpGet]
        public IActionResult BrokerSites()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }

            //globals.BrokerIdList = "Please Select";
            //GetDropdownList();
            DisplayData();
            return View();
        }

        [HttpPost]
        public IActionResult GetBrokerSites()
        {
            
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            int brokerid = Convert.ToInt32( Request.Form["brokerid"]);
            string brokername = Request.Form["NvcBrokerName"];

            globals.BrokerId = brokerid;
            globals.BrokerName = brokername;
            //globals.BrokerIdList = "Please Select";
            // GetDropdownList();
            DisplayData();
            return RedirectToAction("BrokerSites", "BrokerSite");
        }
        

        //public void GetDropdownList()
        //{
        //    List<SelectList> Lista = new List<SelectList>();
        //    Lista.Add(new SelectList { Text = "", Value = "", Selected = true });
        //    Lista = CommonDropDowns.GetBrokerName(brokerMasters);

        //    foreach (var brokers in brokerData)
        //    {
        //        Lista.Add(item: new SelectList { Text = brokers.nvcBrokerName, Value = brokers.ParameterName });
        //    }
        //    ViewData["BrokerNameList"] = Lista;
        //}


        [HttpPost]
        public IActionResult BrokerSites(BrokerSites _brokerSites)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            string name = Request.Form["Para"];

            globals.BrokerIdList = name;
            ViewBag.successStatus = 0;
            try
            {
                if (globals.BrokerId != 0)
                {
                    _brokerSites.IntBrokerId = globals.BrokerId;
                    _brokerSites.IntCreatedBy = globals.User_ID;
                    _brokerSites.IsDeleted = 0;
                    _brokerSites.IsActive = 1;
                    _brokerSites.DtmCreationDate = DateTime.Now.Date;
                    _dbcontext.BrokerSites.Add(_brokerSites);
                    _dbcontext.SaveChanges();
                    ViewBag.successStatus = 1;
                    _brokerSites = null;
                    DisplayData();
                    return View(_brokerSites);
                }
                else
                {
                    ViewBag.successStatus = 0;
                }
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return View(_brokerSites);
        }

        [HttpPost]
        public IActionResult Edit(BrokerSites brokerSites)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            try
            {
                var id = Convert.ToInt32(Request.Form["Id"]);
                var brokerName = Request.Form["NvcBrokerName"];
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 0;
                string mvalue =Convert.ToString( Request.Form["IsActive"]);

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                    {
                        if (cmd.Connection.State != ConnectionState.Open)
                        {
                            cmd.Connection.Open();
                        }
                        cmd.CommandText = "update brokerSites set intUpdatedBy = '" + intUpdatedBy + "', dtmUpdationDate = '" + dtmupdateon + "', IsActive = '" + isActive + "'  where Id = '" + id + "'";
                        cmd.ExecuteNonQuery();
                        cmd.Connection.Close();

                        ViewBag.Status = 1;
                        ViewBag.successStatus = 1;

                        ViewBag.model = brokerSites;
                        return RedirectToAction("BrokerSites", "BrokerSite");
                    }

                }
                catch (Exception ee)
                {
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("BrokerSite", "BrokerSite");

                }
            }
            catch (Exception ex)
            {
                ViewBag.successStatus = 0;
            }
            return RedirectToAction("BrokerMaster", "BrokerMaster");
        }

        //public void GetDropdownList()
        //{
        //    List<SelectListItem> Lista = new List<SelectListItem>();
        //    Lista.Add(new SelectListItem { Text = "", Value = "", Selected = true });
        //    var componentData = GetBrokerList();

        //    foreach (var brokerlist in componentData)
        //    {
        //        Lista.Add(item: new SelectListItem { Text = brokerlist.NvcBrokerName, Value = brokerlist.NvcBrokerName });
        //    }
        //    ViewData["YourListofclassnames"] = Lista;
        //}

        //public List<BrokerMaster> GetBrokerList()
        //{
        //    string jointvalue = "";
        //    List<BrokerMaster> brokerMasters = new List<BrokerMaster>();
        //    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
        //    {
        //        if (cmd.Connection.State != ConnectionState.Open)
        //        {
        //            cmd.Connection.Open();
        //        }
        //        cmd.CommandText = "Select Cast(Id as varchar) +' - '+ NvcBrokerName  jointval from BrokerMaster order by NvcBrokerName";
        //        SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();

        //        if (dataread.HasRows)
        //        {
        //            while (dataread.Read())
        //            {
        //                jointvalue = dataread.GetString(0);

        //                brokerMasters.Add(new BrokerMaster
        //                {
        //                    NvcBrokerName = dataread.GetString(0)
        //                }); ; ;
        //            }
        //            ViewBag.modelComponentsid = new SelectList(brokerMasters, "NvcBrokerName", "NvcBrokerName");
        //        }
        //        return brokerMasters;
        //    }
        //}

        [HttpPost]
        public IActionResult Clear(BrokerMaster brokerMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            globals.BrokerId = 0;
            globals.BrokerName = null;
            globals.BrokerIdList = null;
            DisplayData();
            return RedirectToAction("BrokerSites", "BrokerSite");

        }

        public IActionResult DisplayData()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            List<BrokerSites> brokerSites = new List<BrokerSites>();
            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd.Connection.State != ConnectionState.Open)
            {
                cmd.Connection.Open();
            }
            cmd.CommandText = "Select id, isnull(NvcSiteName,'') NvcSiteName, IsActive  from BrokerSites where intbrokerid = '" + globals.BrokerId + "' and IsDeleted = 0";

            Microsoft.Data.SqlClient.SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
            if (dataread.HasRows)
            {
                while (dataread.Read())
                {

                    brokerSites.Add(new BrokerSites
                    {
                        Id = dataread.GetInt32(0),
                        NvcSiteName = dataread.GetString(1),
                        IsActive = dataread.GetInt32(2)
                    }); ; ; ;

                }
                cmd.Connection.Close();

                ViewBag.model = brokerSites;
                return View();
            }
            return View();
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }


    }
}


using LoginSignupCore.Core;
using LoginSignupCore.Data;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.ComponentModel;
using System.Security.Claims;
using System.Security.Policy;
using Component = LoginSignupCore.Models.Component;

namespace LoginSignupCore.Controllers
{

    public class ComponentAssignController: Controller
    {
        private readonly ComponentRepository componentRepository;
        public ComponentAssignController()
        {
            componentRepository = new();
        }
        [HttpGet]
        public IActionResult ComponentsMaster(int agentId, int brokerid,int siteid,int id=0)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ComponentViewModel ComponentsView = new();
            try
            {
                ComponentsView.Components = componentRepository.GetAllComponentAgentWise(agentId);
                ComponentsView.Component = new();
                ComponentsView.Component.AgentId = agentId;
                ComponentsView.Component.BrokerId = brokerid;
                ComponentsView.Component.SiteId = siteid;
                ComponentsView.Component.Id = id;
                ComponentsView.Component.AgentName = CoreProcess.agentSessionCache.GetSession(brokerid, siteid, agentId).Item2?.AgentName??string.Empty;

            }
            catch (Exception ex)
            {
                throw;
            }
            return View(ComponentsView);
        }
        [HttpPost]
        public IActionResult Component(Component componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = new Component()
            {
                Id= componentMaster.Id,
                BrokerId = componentMaster.BrokerId,
                SiteId = componentMaster.SiteId,
                AgentId= componentMaster.AgentId,
                ComponentType= componentMaster.ComponentType,
                ExePath= componentMaster.ExePath,
                InstanceId = componentMaster.InstanceId,
                CmdParam= string.IsNullOrEmpty(componentMaster.CmdParam) ?"": componentMaster.CmdParam,
                IsRunAsService = componentMaster.IsRunAsService,
                ServiceName = componentMaster.ServiceName,
                Priority=componentMaster.Priority,
                DtmCreationDate = DateTime.Now.Date,
                IntCreatedBy = globals.User_ID,
                Remarks = componentMaster.Remarks,
                ComponentName = componentMaster.ComponentName,
                AgentName = CoreProcess.agentSessionCache.GetSession(componentMaster.BrokerId, componentMaster.SiteId, componentMaster.AgentId).Item2?.AgentName??string.Empty
            };
            if (ModelState.IsValid)
            {
                try
                {
                    componentRepository.InsertAgentWiseComponentData(component);
                }
                catch (Exception ex)
                {
                    throw;
                }
             return RedirectToAction("ComponentsMaster", new { agentId = componentMaster.AgentId, brokerid = componentMaster.BrokerId, siteid = componentMaster.SiteId });

            }
            foreach (var item in ModelState.Values.SelectMany(v => v.Errors))
            {
                Console.WriteLine(item.ErrorMessage);
            }
            List<ComponentDropDown> list = componentRepository.GetComponentDropDowmList(component.AgentId);
            if (list != null && list.Count > 0)
                //ViewBag.ComponentDropDown = list;
            componentMaster.com = list;
             return RedirectToAction("Component", new { agentId = componentMaster.AgentId, brokerid = componentMaster.BrokerId, siteid = componentMaster.SiteId });
            //return PartialView(component);
        }
       [HttpGet("ComponentAssign/ComponentFile/{agentId}/{brokerid}/{siteid}/{id?}")]
        public IActionResult ComponentFile(int agentId, int brokerid, int siteid,int id=0)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            Component comp = new Component();
            if (id != 0)
            {
                 comp = componentRepository.GetComponentById(id);
                comp.BrokerId = brokerid;
                comp.SiteId = siteid;
                comp.AgentName =  CoreProcess.agentSessionCache.GetSession(brokerid,siteid,agentId).Item2?.AgentName??string.Empty;


            }
            else
            {
                 comp = new Component()
                {
                    Id = 0,
                    AgentId = agentId,
                    BrokerId = brokerid,
                    SiteId= siteid
                };
            }

            List<ComponentDropDown> list = componentRepository.GetComponentDropDowmList(agentId);
            if (list != null && list.Count > 0)
                comp.com = list;

            return PartialView("Component", comp);
            //return RedirectToAction("ComponentsMaster", new { agentId = comp.AgentId, brokerid = comp.BrokerId, siteid = comp.SiteId });
        }
       
        public IActionResult Update(Component componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = new Component()
            {
                Id = componentMaster.Id,
                AgentId = componentMaster.AgentId,
                ComponentType = componentMaster.ComponentType,
                ExePath = componentMaster.ExePath,
                CmdParam = componentMaster.CmdParam ?? string.Empty,
                IsRunAsService = componentMaster.IsRunAsService,
                ServiceName = componentMaster.ServiceName,
                Priority = componentMaster.Priority,
                DtmUpdationDate = DateTime.Now.Date,
                IntUpdatedBy = globals.User_ID,
                Remarks = componentMaster.Remarks
            };
            try
            {
                componentRepository.UpdateData(component);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("ComponentsMaster", new { agentId = componentMaster.AgentId, brokerid =componentMaster.BrokerId, siteid =componentMaster.SiteId });

        }
      
        public IActionResult Delete(Component componentmaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = new Component()
            {
                Id = componentmaster.Id,
                AgentId = componentmaster.AgentId,
                IsDeleted = 1,
                DtmUpdationDate = DateTime.Now.Date,
                IntUpdatedBy = globals.User_ID,
                Remarks = "Deleted AgentwiseComponent",
                BrokerId = componentmaster.BrokerId,
                SiteId = componentmaster.SiteId
                
            };
            try
            {
                componentRepository.UpdateIsDelete(component);
                CompInitReq req = new CompInitReq()
                {
                    BrokerId = componentmaster.BrokerId,
                    SiteId = componentmaster.SiteId,
                    AgentId = componentmaster.AgentId,
                    CompId = componentmaster.ComponentType,
                    InstanceId = componentmaster.InstanceId
                };
                bool flag = true;
                CoreProcess.agentSessionCache.UpdateIsDeleteFlag(req, flag);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("ComponentsMaster", new { agentId = component.AgentId, brokerid = component.BrokerId, siteid = component.SiteId });

        }
        public IActionResult Edit(Component componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = new Component()
            {
                Id = componentMaster.Id,
                AgentId = componentMaster.AgentId,
                IsActive = componentMaster.IsActive,
                DtmUpdationDate = DateTime.Now.Date,
                IntUpdatedBy = globals.User_ID,
                Remarks = "IsActive AgentwiseComponent updated"
            };
            try
            {
                componentRepository.UpdateIsActive(component);
                CompInitReq req = new CompInitReq()
                {
                    BrokerId = componentMaster.BrokerId,
                    SiteId = componentMaster.SiteId,
                    AgentId = componentMaster.AgentId,
                    CompId = componentMaster.ComponentType,
                    InstanceId = componentMaster.InstanceId
                };
                bool flag = componentMaster.IsActive==1 ? true : false;
                CoreProcess.agentSessionCache.UpdateIsActiveFlag(req,flag);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("ComponentsMaster", new { agentId = componentMaster.AgentId, brokerid = componentMaster.BrokerId, siteid = componentMaster.SiteId });

        }
        public IActionResult Status(int brokerid, int siteid, int isAjax = 0)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            List<ComponentStatus> status = CoreProcess.agentSessionCache.GetComponentStatus(brokerid, siteid);
            //ViewBag.model = componentMasters;
            ComponentViewStatus comp = new ComponentViewStatus();
            comp.ComponentsStatus = status;
            comp.BrokerId = brokerid;
            comp.SiteId = siteid;

            if (isAjax == 1 )
            {
                var json = JsonConvert.SerializeObject(status);
                return Json(json);
            }
            return View(comp);
        }
        [HttpGet]
        public IActionResult Cancel(int agentId,int siteId, int brokerId)
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");

            }
            return RedirectToAction("ComponentsMaster",new { agentId = agentId, brokerid = brokerId, siteid = siteId});
        }

        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}


using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using System.Data;
using CTCL.BinaryProtocol.Common.CTCL.Enum;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Linq;

namespace LoginSignupCore.Controllers
{
    public class ComponentMasterController : Controller
    {
        private readonly ComponentMasterRepository componentMasterRepository;
        private readonly ApplicatonDBContext _dbcontext;

        public ComponentMasterController(ApplicatonDBContext context)
        {
            componentMasterRepository = new();
            _dbcontext = context;
        }
        public IActionResult Components()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            return View();
        }

        [HttpGet]
        public IActionResult ComponentFile(int id)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = componentMasterRepository.GetcompById(id);
            return PartialView("Components", component);
        }



        public IActionResult Clear()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = null;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }

        public async Task<IActionResult> Logout()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            globals.User_ID = 0;
            return RedirectToAction("Login", "Account");
        }

        [HttpPost]
        public IActionResult Components(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;

            try
            {
                if (ModelState.IsValid)
                {
                    componentMasterRepository.InsertComponentMasterData(componentMaster);
                    ViewBag.successStatus = 1;
                    return RedirectToAction("DisplayData");
                }
            }
            catch (Exception ex)
            {
                // ViewBag.successStatus = 0;
                string msg = string.Empty;
                if (!string.IsNullOrEmpty(ex.Message))
                {
                    var arr = ex.Message.Split(".");
                    msg = arr[1]+":"+arr[3];
                    //ViewBag.message = msg;
                }
                if (ex.Message.Contains("unique_priority"))
                {
                    TempData["ErrorMessage"] = "Priority already exists, Kindly modify the priority and retry! ";
                }
                else if (ex.Message.Contains("PK__Componen__238B7F484AB5AB5F"))
                {
                    TempData["ErrorMessage"] = "CompomnentId already exists, Kindly modify the componentid and retry!";
                }
                return RedirectToAction("DisplayData", componentMaster);
            }
            return RedirectToAction("DisplayData", componentMaster);
        }

        public IActionResult DisplayData(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var componentMasters = componentMasterRepository.Get();
            componentMaster.Components = componentMasters;
            //ViewBag.model = componentMasters;
            return View(componentMaster);
        }

        [HttpPost]
        public IActionResult ComponentMasterUpdate(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            try
            {
                var id = componentMaster.Id;
                var componentName = componentMaster.NvcComponentName;
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 1;
                string mvalue = Request.Form["BitIsActive"];

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "0,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    if (ModelState.IsValid)
                    {
                        var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                        {
                            if (cmd.Connection.State != ConnectionState.Open)
                            {
                                cmd.Connection.Open();
                            }
                            cmd.CommandText = "update ComponentMaster set intComponentId='" + componentMaster.IntComponentId + "',NvcComponentName='" + componentName + "',numCpuThreshold ='" + componentMaster.CpuThreshold + "',numRamThreshold = '" + componentMaster.RamThreshold + "',intPriority = '" + componentMaster.IntPriority+ "',intUpdatedBy ='" + intUpdatedBy + "',dtmUpdatedOn='" + dtmupdateon + "',BitIsActive='" + 1 + "' where intId='" + componentMaster.Id + "'";
                            cmd.ExecuteNonQuery();
                            cmd.Connection.Close();

                            ViewBag.Status = 1;
                            ViewBag.successStatus = 1;

                            ViewBag.model = componentMaster;
                            return RedirectToAction("DisplayData", "ComponentMaster");
                        }
                    }

                }
                catch (Exception ee)
                {
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("Edit", "ComponentMaster");

                }
            }
            catch (Exception ex)
            {
                ViewBag.Status = 0;
                ViewBag.successStatus = 0;
                return RedirectToAction("Edit", "ComponentMaster");
            }
            ViewBag.Status = 0;
            ViewBag.successStatus = 0;
            TempData["componentmaster"] = componentMaster;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }


        public IActionResult Edit(ComponentMaster _componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var data = new ComponentMaster()
            {
                Id = _componentMaster.Id,
                //BitIsActive = Convert.ToInt32(Request.Form["mvalue"]),
                BitIsActive = _componentMaster.BitIsActive,
                NvcComponentName = _componentMaster.NvcComponentName,
                CpuThreshold = _componentMaster.CpuThreshold,
                IntPriority = _componentMaster.IntPriority


            };
            //int id = Convert.ToInt32(Request.Form["IntComponentId"]);
            //var IsActive = Request.Form["mvalue"];
            //ViewBag.mvalue = IsActive;

            return RedirectToAction("DisplayData", data);
        }


        public IActionResult UpdateIsActive(int id, int isActive)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var comp = new ComponentMaster()
            {
                Id = id,
                BitIsActive = isActive,
                DtmUpdatedOn = DateTime.Now,
                IntUpdatedBy = globals.User_ID
            };
            try
            {
                int rows = componentMasterRepository.UpdateIsActiveData(comp);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("DisplayData");

        }



        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }

    }
}




using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using System.Data;
using CTCL.BinaryProtocol.Common.CTCL.Enum;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Linq;

namespace LoginSignupCore.Controllers
{
    public class ComponentMasterController : Controller
    {
        private readonly ComponentMasterRepository componentMasterRepository;
        private readonly ApplicatonDBContext _dbcontext;

        public ComponentMasterController(ApplicatonDBContext context)
        {
            componentMasterRepository = new();
            _dbcontext = context;
        }
        public IActionResult Components()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            return View();
        }

        [HttpGet]
        public IActionResult ComponentFile(int id)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = componentMasterRepository.GetcompById(id);
            return PartialView("Components", component);
        }



        public IActionResult Clear()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = null;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }

        public async Task<IActionResult> Logout()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            globals.User_ID = 0;
            return RedirectToAction("Login", "Account");
        }

        [HttpPost]
        public IActionResult Components(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;

            try
            {
                if (ModelState.IsValid)
                {
                    componentMasterRepository.InsertComponentMasterData(componentMaster);
                    ViewBag.successStatus = 1;
                    return RedirectToAction("DisplayData");
                }
            }
            catch (Exception ex)
            {
                // ViewBag.successStatus = 0;
                string msg = string.Empty;
                if (!string.IsNullOrEmpty(ex.Message))
                {
                    var arr = ex.Message.Split(".");
                    msg = arr[1]+":"+arr[3];
                    //ViewBag.message = msg;
                }
                if (ex.Message.Contains("unique_priority"))
                {
                    TempData["ErrorMessage"] = "Priority already exists, Kindly modify the priority and retry! ";
                }
                else if (ex.Message.Contains("PK__Componen__238B7F484AB5AB5F"))
                {
                    TempData["ErrorMessage"] = "CompomnentId already exists, Kindly modify the componentid and retry!";
                }
                return RedirectToAction("DisplayData", componentMaster);
            }
            return RedirectToAction("DisplayData", componentMaster);
        }

        public IActionResult DisplayData(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var componentMasters = componentMasterRepository.Get();
            componentMaster.Components = componentMasters;
            //ViewBag.model = componentMasters;
            return View(componentMaster);
        }

        [HttpPost]
        public IActionResult ComponentMasterUpdate(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            try
            {
                var id = componentMaster.Id;
                var componentName = componentMaster.NvcComponentName;
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 1;
                string mvalue = Request.Form["BitIsActive"];

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "0,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    if (ModelState.IsValid)
                    {
                        var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                        {
                            if (cmd.Connection.State != ConnectionState.Open)
                            {
                                cmd.Connection.Open();
                            }
                            cmd.CommandText = "update ComponentMaster set intComponentId='" + componentMaster.IntComponentId + "',NvcComponentName='" + componentName + "',numCpuThreshold ='" + componentMaster.CpuThreshold + "',numRamThreshold = '" + componentMaster.RamThreshold + "',intPriority = '" + componentMaster.IntPriority+ "',intUpdatedBy ='" + intUpdatedBy + "',dtmUpdatedOn='" + dtmupdateon + "',BitIsActive='" + 1 + "' where intId='" + componentMaster.Id + "'";
                            cmd.ExecuteNonQuery();
                            cmd.Connection.Close();

                            ViewBag.Status = 1;
                            ViewBag.successStatus = 1;

                            ViewBag.model = componentMaster;
                            return RedirectToAction("DisplayData", "ComponentMaster");
                        }
                    }

                }
                catch (Exception ee)
                {
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("Edit", "ComponentMaster");

                }
            }
            catch (Exception ex)
            {
                ViewBag.Status = 0;
                ViewBag.successStatus = 0;
                return RedirectToAction("Edit", "ComponentMaster");
            }
            ViewBag.Status = 0;
            ViewBag.successStatus = 0;
            TempData["componentmaster"] = componentMaster;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }


        public IActionResult Edit(ComponentMaster _componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var data = new ComponentMaster()
            {
                Id = _componentMaster.Id,
                //BitIsActive = Convert.ToInt32(Request.Form["mvalue"]),
                BitIsActive = _componentMaster.BitIsActive,
                NvcComponentName = _componentMaster.NvcComponentName,
                CpuThreshold = _componentMaster.CpuThreshold,
                IntPriority = _componentMaster.IntPriority


            };
            //int id = Convert.ToInt32(Request.Form["IntComponentId"]);
            //var IsActive = Request.Form["mvalue"];
            //ViewBag.mvalue = IsActive;

            return RedirectToAction("DisplayData", data);
        }


        public IActionResult UpdateIsActive(int id, int isActive)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var comp = new ComponentMaster()
            {
                Id = id,
                BitIsActive = isActive,
                DtmUpdatedOn = DateTime.Now,
                IntUpdatedBy = globals.User_ID
            };
            try
            {
                int rows = componentMasterRepository.UpdateIsActiveData(comp);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("DisplayData");

        }



        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }

    }
}





using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using System.Data;
using CTCL.BinaryProtocol.Common.CTCL.Enum;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Linq;

namespace LoginSignupCore.Controllers
{
    public class ComponentMasterController : Controller
    {
        private readonly ComponentMasterRepository componentMasterRepository;
        private readonly ApplicatonDBContext _dbcontext;

        public ComponentMasterController(ApplicatonDBContext context)
        {
            componentMasterRepository = new();
            _dbcontext = context;
        }
        public IActionResult Components()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!(claimUser.Identity.IsAuthenticated))
            {
                globals.User_ID = 0;
                return RedirectToAction("Login", "Account");
            }
            return View();
        }

        [HttpGet]
        public IActionResult ComponentFile(int id)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var component = componentMasterRepository.GetcompById(id);
            return PartialView("Components", component);
        }



        public IActionResult Clear()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = null;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }

        public async Task<IActionResult> Logout()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            globals.User_ID = 0;
            return RedirectToAction("Login", "Account");
        }

        [HttpPost]
        public IActionResult Components(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;

            try
            {
                if (ModelState.IsValid)
                {
                    componentMasterRepository.InsertComponentMasterData(componentMaster);
                    ViewBag.successStatus = 1;
                    return RedirectToAction("DisplayData");
                }
            }
            catch (Exception ex)
            {
                // ViewBag.successStatus = 0;
                string msg = string.Empty;
                if (!string.IsNullOrEmpty(ex.Message))
                {
                    var arr = ex.Message.Split(".");
                    msg = arr[1]+":"+arr[3];
                    //ViewBag.message = msg;
                }
                if (ex.Message.Contains("unique_priority"))
                {
                    TempData["ErrorMessage"] = "Priority already exists, Kindly modify the priority and retry! ";
                }
                else if (ex.Message.Contains("PK__Componen__238B7F484AB5AB5F"))
                {
                    TempData["ErrorMessage"] = "CompomnentId already exists, Kindly modify the componentid and retry!";
                }
                return RedirectToAction("DisplayData", componentMaster);
            }
            return RedirectToAction("DisplayData", componentMaster);
        }

        public IActionResult DisplayData(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var componentMasters = componentMasterRepository.Get();
            componentMaster.Components = componentMasters;
            //ViewBag.model = componentMasters;
            return View(componentMaster);
        }

        [HttpPost]
        public IActionResult ComponentMasterUpdate(ComponentMaster componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            ViewBag.successStatus = 0;
            try
            {
                var id = componentMaster.Id;
                var componentName = componentMaster.NvcComponentName;
                var dtmupdateon = DateTime.Now;
                var intUpdatedBy = globals.User_ID;
                var isActive = 1;
                string mvalue = Request.Form["BitIsActive"];

                if (mvalue == "1")
                {
                    isActive = 1;
                }
                else if (mvalue == "on")
                {
                    isActive = 1;
                }
                else if (mvalue == "1,on")
                {
                    isActive = 1;
                }
                else if (mvalue == "0,on")
                {
                    isActive = 1;
                }
                else
                {
                    isActive = 0;
                }

                try
                {
                    if (ModelState.IsValid)
                    {
                        var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
                        {
                            if (cmd.Connection.State != ConnectionState.Open)
                            {
                                cmd.Connection.Open();
                            }
                            cmd.CommandText = "update ComponentMaster set intComponentId='" + componentMaster.IntComponentId + "',NvcComponentName='" + componentName + "',numCpuThreshold ='" + componentMaster.CpuThreshold + "',numRamThreshold = '" + componentMaster.RamThreshold + "',intPriority = '" + componentMaster.IntPriority+ "',intUpdatedBy ='" + intUpdatedBy + "',dtmUpdatedOn='" + dtmupdateon + "',BitIsActive='" + 1 + "' where intId='" + componentMaster.Id + "'";
                            cmd.ExecuteNonQuery();
                            cmd.Connection.Close();

                            ViewBag.Status = 1;
                            ViewBag.successStatus = 1;

                            ViewBag.model = componentMaster;
                            return RedirectToAction("DisplayData", "ComponentMaster");
                        }
                    }

                }
                catch (Exception ee)
                {
                    ViewBag.Status = 0;
                    ViewBag.successStatus = 0;
                    return RedirectToAction("Edit", "ComponentMaster");

                }
            }
            catch (Exception ex)
            {
                ViewBag.Status = 0;
                ViewBag.successStatus = 0;
                return RedirectToAction("Edit", "ComponentMaster");
            }
            ViewBag.Status = 0;
            ViewBag.successStatus = 0;
            TempData["componentmaster"] = componentMaster;
            return RedirectToAction("DisplayData", "ComponentMaster");
        }


        public IActionResult Edit(ComponentMaster _componentMaster)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var data = new ComponentMaster()
            {
                Id = _componentMaster.Id,
                //BitIsActive = Convert.ToInt32(Request.Form["mvalue"]),
                BitIsActive = _componentMaster.BitIsActive,
                NvcComponentName = _componentMaster.NvcComponentName,
                CpuThreshold = _componentMaster.CpuThreshold,
                IntPriority = _componentMaster.IntPriority


            };
            //int id = Convert.ToInt32(Request.Form["IntComponentId"]);
            //var IsActive = Request.Form["mvalue"];
            //ViewBag.mvalue = IsActive;

            return RedirectToAction("DisplayData", data);
        }


        public IActionResult UpdateIsActive(int id, int isActive)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            var comp = new ComponentMaster()
            {
                Id = id,
                BitIsActive = isActive,
                DtmUpdatedOn = DateTime.Now,
                IntUpdatedBy = globals.User_ID
            };
            try
            {
                int rows = componentMasterRepository.UpdateIsActiveData(comp);
            }
            catch (Exception ex)
            {
                throw;
            }
            return RedirectToAction("DisplayData");

        }



        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }

    }
}




//using LoginSignupCore.Models;
//using Microsoft.AspNetCore.Authentication.Cookies;
//using Microsoft.AspNetCore.Authentication;
//using Microsoft.AspNetCore.Mvc;
//using System.Security.Claims;
//using Microsoft.EntityFrameworkCore;
//using LoginSignupCore.Data;
//using System.Data;
//using Microsoft.Data.SqlClient;
//using Microsoft.AspNetCore.Mvc.Rendering;

//namespace LoginSignupCore.Controllers
//{
//    public class FunctionalController : Controller
//    {
//        private readonly ApplicatonDBContext _dbcontext;

//        public FunctionalController(ApplicatonDBContext context)
//        {
//            _dbcontext = context;
//        }
//        public IActionResult FunctionalParam()
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!(claimUser.Identity.IsAuthenticated))
//            {
//                globals.User_ID = 0;
//                return RedirectToAction("Login", "Account");
//            }
//            ViewBag.successStatus = null;
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            globals.Instance_Name = "Please Select";
//            GetDropdownList();
//            GetDropdownComponentList();
//            GetDropdownInstanceList();
//            return View();
//        }

//        [HttpPost]
//        public IActionResult Clear(ComponentParameter componentParameter)
//        {
//            ViewBag.successStatus = null;
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            globals.Instance_Name = "Please Select";
//            return RedirectToAction("FunctionalParam", "Functional");
//        }

//        public async Task<IActionResult> Logout()
//        {
//            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
//            globals.User_ID = 0;
//            return RedirectToAction("Login", "Account");
//        }

//        [HttpPost]
//        public IActionResult FunctionalParam(ComponentParameter componentParameter)
//        {
//            ViewBag.successStatus = 0;
//            try
//            {
//                string pId = Request.Form["BrokerSiteId"];
//                string pCompId = Request.Form["ComponentId"];
//                string pInstId = Request.Form["InstanceId"];

//                componentParameter.IntCreatedBy = globals.User_ID;
//                componentParameter.BitIsDelete = 0;
//                componentParameter.BitIsActive = 1;
//                componentParameter.DtmCreatedOn = DateTime.Now.Date;
//                _dbcontext.ComponentParameters.Add(componentParameter);
//                _dbcontext.SaveChanges();
//                ViewBag.successStatus = 1;
//                GetDropdownList();
//                GetDropdownComponentList();
//                GetDropdownInstanceList();
//                GetDropdownListReload(pId);
//                GetDropdownComponentListReload(pCompId);
//                GetDropdownInstanceListReload(pInstId);
//                return View();
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return View();
//        }

//        public void GetDropdownListReload(string brokerSiteId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 and cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) = '" + brokerSiteId + "' order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Broker_Site = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentsid = new SelectList(Lista, "Text", "Value");
//            }
//        }


//        public void GetDropdownComponentListReload(string intComponentId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where c.intComponentId = '" + intComponentId + "' and  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Component_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownComponentList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public void GetDropdownInstanceListReload(string intInstanceId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcInstanceName ,cast(intInstanceId as varchar) IntInstanceId from InstanceMaster i where IntInstanceId = '" + intInstanceId + "' and bitIsActive = 1 and bitIsDelete = 0 order by nvcInstanceName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Instance_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownInstanceList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcInstanceName ,cast(intInstanceId as varchar) IntInstanceId from InstanceMaster i where bitIsActive = 1 and bitIsDelete = 0 order by nvcInstanceName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelInstanceName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public IActionResult DisplayData()
//        {

//            List<VwComponentParameter> componentParameters = new List<VwComponentParameter>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            //cmd.CommandText = "Select isnull(paramid,0) ParamId, isnull(brokerSiteId,'') BrokerSiteId, isnull(componentid,'') ComponentId, isnull(instanceid,'') InstanceId, isnull(ParameterName,'') ParameterName, isnull(remarks,'') Remarks, Cast(bitIsActive as Integer) bitIsActive from ComponentParameter where bitAttributeType = 0 and  bitIsDelete = 0"; // bitAttributeType 0 is used for Functional Parameters
//            cmd.CommandText = "SELECT Cast([intcomponentid] as Varchar) IntComponentId ,[nvccomponentName] ,Cast([intinstanceid] as varchar) intInstanceId ,[nvcInstanceName] ,[BrokerSiteName] ,[varBrokerId] ,[ParamId] ,[ParameterName] ,[intSiteId] ,[nvcBrokerName] ,[nvcSiteName] ,[BrokerSiteId] ,[bitAttributeType], bitIsActive, Remarks FROM [vwComponentParameter] where bitAttributeType = 0"; // bitAttributeType 0 is used for Functional Parameters
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {

//                    componentParameters.Add(new VwComponentParameter
//                    {
//                        Intcomponentid = dataread.GetString(0),
//                        NvccomponentName = dataread.GetString(1),
//                        Intinstanceid = dataread.GetString(2),
//                        NvcInstanceName = dataread.GetString(3),
//                        BrokerSiteName = dataread.GetString(4),
//                        ParamId = dataread.GetInt32(6),
//                        ParameterName = dataread.GetString(7),
//                        BrokerSiteId = dataread.GetString(11),
//                        BitIsActive = dataread.GetInt32(13),
//                        Remarks = dataread.GetString(14)

//                    }); ; ; ;

//                }
//                cmd.Connection.Close();

//                ViewBag.model = componentParameters;
//                return View();
//            }
//            return View();
//        }


//        [HttpPost]
//        public IActionResult FunctionalUpdate(ComponentParameter componentParameter)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");

//            }

//            ViewBag.successStatus = 0;
//            try
//            {
//                var paramId = Convert.ToInt32(Request.Form["ParamId"]);

//                var brokerSiteId = Request.Form["BrokerSiteId"];

//                var instanceId = Request.Form["InstanceId"];



//                if ((brokerSiteId.ToString().Length < 1))
//                {
//                    brokerSiteId = globals.BrokerId_update;
//                }
//                else
//                {
//                    brokerSiteId = Request.Form["BrokerSiteId"];
//                }


//                if ((instanceId.ToString().Length < 1))
//                {
//                    instanceId = globals.Instance_id;
//                }
//                else
//                {
//                    instanceId = Request.Form["InstanceId"];
//                }

//                var parameterName = Request.Form["ParameterName"];
//                var remarks = Request.Form["Remarks"];
//                var dtmupdateon = DateTime.Now;
//                var intUpdatedBy = globals.User_ID;
//                var bitIsActive = 0;
//                string componentid = Request.Form["ComponentId"];
//                string mvalue = Request.Form["BitIsActive"];

//                if ((componentid.ToString().Length < 1))
//                {
//                    componentid = Convert.ToString(globals.Component_ID);
//                }
//                else
//                {
//                    componentid = Request.Form["ComponentId"];
//                }

//                if (mvalue == "1")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "on")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "1,on")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "0,on")
//                {
//                    bitIsActive = 1;
//                }
//                else
//                {
//                    bitIsActive = 0;
//                }

//                try
//                {
//                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                    {
//                        if (cmd.Connection.State != ConnectionState.Open)
//                        {
//                            cmd.Connection.Open();
//                        }
//                        cmd.CommandText = "update ComponentParameter set BrokerSiteId='" + brokerSiteId + "',ComponentId='" + componentid + "',InstanceId='" + instanceId + "', ParameterName = '" + parameterName + "', Remarks = '" + remarks + "' , intUpdatedBy = '" + intUpdatedBy + "', dtmUpdatedOn = '" + dtmupdateon + "', bitIsActive = '" + bitIsActive + "'  where ParamId = '" + paramId + "' and bitAttributeType = 0";
//                        cmd.ExecuteNonQuery();
//                        cmd.Connection.Close();

//                        ViewBag.Status = 1;

//                        ViewBag.model = componentParameter;
//                        return RedirectToAction("DisplayData", "Functional");
//                    }

//                }
//                catch (Exception ee)
//                {
//                    globals.Instance_id = " ";
//                    globals.Component_ID = 0;
//                    globals.BrokerId_update = " ";
//                    ViewBag.Status = 0;
//                    return RedirectToAction("FunctionalParam", "Functional");

//                }
//            }
//            catch (Exception ex)
//            {
//                globals.Instance_id = " ";
//                globals.Component_ID = 0;
//                globals.BrokerId_update = " ";
//                ViewBag.successStatus = 0;
//            }
//            return RedirectToAction("FunctionalParam", "Functional");
//        }


//        [HttpPost]
//        public IActionResult Edit(VwComponentParameter _componentParameter)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");
//            }

//            int id = Convert.ToInt32(Request.Form["ParamId"]);
//            var bitIsActive = Request.Form["mvalue"];
//            var brokerSiteName = Request.Form["BrokerSiteName"];
//            var nvcComponentName = Request.Form["NvccomponentName"];
//            var nvcInstanceName = Request.Form["NvcInstanceName"];
//            var intComponentId = Request.Form["Intcomponentid"];
//            var intinstanceid = Request.Form["Intinstanceid"];
//            var brokerSiteId = Request.Form["BrokerSiteId"];
//            ViewBag.sitename = brokerSiteName;
//            ViewBag.ComponentName = nvcComponentName;
//            ViewBag.InstanceName = nvcInstanceName;
//            ViewBag.mvalue = bitIsActive;
//            ViewBag.Intcomponentid = intComponentId;
//            ViewBag.IntInstanceId = intinstanceid;
//            ViewBag.BrokerSiteId = brokerSiteId;

//            globals.Broker_Site = brokerSiteId;
//            globals.BrokerId_update = Convert.ToString(brokerSiteId);
//            globals.Component_ID = Convert.ToInt32(intComponentId);
//            globals.Instance_id = Request.Form["Intinstanceid"];

//            GetDropdownList();
//            GetDropdownComponentList();
//            GetDropdownInstanceList();
//            return View(_componentParameter);
//        }



//    }
//}



using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using LoginSignupCore.Data;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
	//[Authorize]
	public class HomeController : Controller
	{
		//private readonly ILogger<HomeController> _logger;
        private readonly ApplicatonDBContext _dbcontext;        
        public HomeController(ApplicatonDBContext context)
        {
            _dbcontext = context;
        }
  //      public HomeController(ILogger<HomeController> logger)
		//{
		//	_logger = logger;
		//}

		public IActionResult Index()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return View();
		}

		public IActionResult Privacy()
		{
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return View();
		}

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}
        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}



//using LoginSignupCore.Data;
//using LoginSignupCore.Models;
//using Microsoft.AspNetCore.Authentication.Cookies;
//using Microsoft.AspNetCore.Authentication;
//using Microsoft.AspNetCore.Mvc;
//using System.Security.Claims;
//using Microsoft.EntityFrameworkCore;
//using System.Data;
//using Microsoft.AspNetCore.Mvc.Rendering;
//using Microsoft.Data.SqlClient;

//namespace LoginSignupCore.Controllers
//{
//    public class InstanceMasterController : Controller
//    {        

//        private readonly ApplicatonDBContext _dbcontext;

//        public InstanceMasterController(ApplicatonDBContext context)
//        {
//            _dbcontext = context;
//        }
//        public IActionResult Instances()
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!(claimUser.Identity.IsAuthenticated))
//            {
//                globals.User_ID = 0;
//                return RedirectToAction("Login", "Account");
//            }
//            globals.Component_Name = "Please Select";
//            globals.Broker_Site = "Please Select";
//            GetDropdownList();
//            GetDropdownComponentList();
//            return View();
//        }

//        [HttpPost]
//        public IActionResult Clear(InstanceMaster instanceMaster)
//        {
//            ViewBag.successStatus = null;
//            globals.Component_Name = "Please Select";
//            return RedirectToAction("Instances", "InstanceMaster");
//        }

//        public async Task<IActionResult> Logout()
//        {
//            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
//            globals.User_ID = 0;
//            return RedirectToAction("Login", "Account");
//        }

//        [HttpPost]
//        public IActionResult Instances(InstanceMaster instanceMaster)
//         {
//            ViewBag.successStatus = 0;
//            try
//            {
//                var pCompId = Request.Form["IntComponentId"];
//                string pId = Request.Form["NvcBrokerSiteId"];
//                instanceMaster.NvcBrokerSiteId = pId;
//                instanceMaster.IntCreatedBy = globals.User_ID;
//                instanceMaster.BitIsDelete = 0;
//                instanceMaster.BitIsActive = 1;
//                instanceMaster.DtmCreatedOn = DateTime.Now.Date;
//                _dbcontext.InstanceMasters.Add(instanceMaster);
//                _dbcontext.SaveChanges();
//                ViewBag.successStatus = 1;
//                GetDropdownList();
//                GetDropdownListReload(pId);
//                GetDropdownComponentList();
//                GetDropdownComponentListReload(pCompId);
//                //instanceMaster = null;
//                return View();
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return View();
//        }

//        public void GetDropdownListReload(string brokerSiteId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 and cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) = '" + brokerSiteId + "' order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Broker_Site = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentsid = new SelectList(Lista, "Text", "Value");
//            }
//        }


//        public void GetDropdownComponentList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public IActionResult DisplayData()
//        {

//            List<VwInstanceMaster> instanceMasters = new List<VwInstanceMaster>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "Select isnull(IntInstanceId,0) IntInstanceId, isnull(IntComponentId,0) IntComponentId,isnull(nvcInstanceName,'') nvcInstanceName, isnull(nvcInstanceIP,'') nvcInstanceIP,isnull(IntPort,'') IntPort,isnull(VersionNo,0) VersionNo,isnull(CapacityWeightage,0) CapacityWeightage,Cast(bitIsActive as Integer) bitIsActive, isnull(NvcComponentName,'')NvcComponentName , isnull(NvcBrokerSiteName,'-') NvcBrokerSiteName, isnull(NvcBrokerSiteId,'-') NvcBrokerSiteId from vwInstanceMaster where bitIsDelete = 0";

//            Microsoft.Data.SqlClient.SqlDataReader dataread = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {

//                    instanceMasters.Add(new VwInstanceMaster
//                    {
//                        IntInstanceId = dataread.GetInt32(0),                        
//                        IntComponentId = dataread.GetInt32(1),
//                        NvcInstanceName = dataread.GetString(2),
//                        NvcInstanceIp = dataread.GetString(3),
//                        IntPort = dataread.GetString(4),
//                        VersionNo = dataread.GetInt32(5),
//                        CapacityWeightage = dataread.GetInt32(6),
//                        BitIsActive = dataread.GetInt32(7),
//                        NvcComponentName = dataread.GetString(8),
//                        NvcBrokerSiteName= dataread.GetString(9),
//                        NvcBrokerSiteId= dataread.GetString(10)
//                    }); ; ; ;

//                }
//                cmd.Connection.Close();

//                ViewBag.model = instanceMasters;
//                return View();
//            }
//            return View();
//        }

//        [HttpPost]
//        public IActionResult InstanceMasterUpdate(InstanceMaster instanceMaster)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");

//            }
//            ViewBag.successStatus = 0;
//            try
//            {
//                var id = Convert.ToInt32(Request.Form["IntInstanceId"]);
//                var instanceName = Request.Form["NvcInstanceName"];
//                var componentId = Request.Form["IntComponentId"];
//                var instanceIp = Request.Form["NvcInstanceIp"];
//                var intport = Request.Form["IntPort"];
//                var version = Request.Form["VersionNo"];
//                var capacityWeightage = Request.Form["CapacityWeightage"];
//                var dtmupdateon = DateTime.Now;
//                var intUpdatedBy = globals.User_ID;
//                var isActive = 0;
//                string mvalue = Request.Form["BitIsActive"];

//                if (mvalue == "1"|| mvalue == "on" || mvalue == "1,on" || mvalue == "0,on")
//                {
//                    isActive = 1;
//                }
//                //else if (mvalue == "on")
//                //{
//                //    isActive = 1;
//                //}
//                //else if (mvalue == "1,on")
//                //{
//                //    isActive = 1;
//                //}
//                //else if (mvalue == "0,on")
//                //{
//                //    isActive = 1;
//                //}
//                else
//                {
//                    isActive = 0;
//                }

//                try
//                {
//                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                    {
//                        if (cmd.Connection.State != ConnectionState.Open)
//                        {
//                            cmd.Connection.Open();
//                        }
//                        cmd.CommandText = "update InstanceMaster set CapacityWeightage='" + capacityWeightage + "', VersionNo='" + version + "', IntPort='" + intport + "', NvcInstanceIp='" + instanceIp + "',IntComponentId='" + componentId + "', NvcInstanceName='" + instanceName + "',intUpdatedBy = '" + intUpdatedBy + "', dtmUpdatedOn = '" + dtmupdateon + "', BitIsActive = '" + isActive + "'  where intInstanceId = '" + id + "'";
//                        cmd.ExecuteNonQuery();
//                        cmd.Connection.Close();

//                        ViewBag.Status = 1;
//                        ViewBag.successStatus = 1;

//                        ViewBag.model = instanceMaster;
//                        return RedirectToAction("DisplayData", "InstanceMaster");
//                    }

//                }
//                catch (Exception ee)
//                {
//                    ViewBag.Status = 0;
//                    ViewBag.successStatus = 0;
//                    return RedirectToAction("Instances", "InstanceMaster");

//                }
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return RedirectToAction("Instances", "InstanceMaster");
//        }

//        [HttpPost]
//        public IActionResult Edit(VwInstanceMaster _instanceMaster)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");
//            }

//           int id = Convert.ToInt32(Request.Form["IntInstanceId"]);
//            var IsActive = Request.Form["mvalue"];
//            ViewBag.mvalue = IsActive;
//            GetDropdownList();
//            GetDropdownComponentList();

//            return View(_instanceMaster);
//        }

//        public void GetDropdownComponentListReload(string intComponentId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where c.intComponentId = '" + intComponentId + "' and  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Component_Name = dataread.GetString(0);
//                }
//            }
//        }




//    }
//}





using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class LayoutController : Controller
    {
        private readonly ApplicatonDBContext _dbcontext;

        public LayoutController(ApplicatonDBContext context)
        {
            _dbcontext = context;
        }
        public IActionResult SidebarPartial()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            Dictionary<int, List<TreeViewNode>> nodes = new();
            Dictionary<int, string> BrokerName = new();
            foreach (BrokerMaster type in _dbcontext.BrokerMaster.ToList())
            {

                if (!nodes.TryGetValue(type.Id, out var treeViewNode))
                {
                    //var treeview = new  TreeViewNode { id = type.Id, parent = "#", text = type.NvcBrokerName };
                    nodes.Add(type.Id, new List<TreeViewNode>());
                    BrokerName.Add(type.Id, type.NvcBrokerName);
                }
            }

            foreach (BrokerSites type in _dbcontext.BrokerSites)
            {
                if (nodes.TryGetValue(type.IntBrokerId, out var treeViewNode))
                {
                    var treeview = new TreeViewNode { id = type.IntBrokerId, cid = type.Id, parent = "_", text = type.NvcSiteName };
                    treeViewNode.Add(treeview);
                }
                else
                {
                    var list = new List<TreeViewNode>();
                    var treeview = new TreeViewNode { id = type.IntBrokerId, cid = type.Id, parent = "_", text = type.NvcSiteName };
                    list.Add(treeview);
                    nodes.Add(type.IntBrokerId, list);
                }
            }
            var MenuItems = new DictionaryOfTreeViewModl()
            {
                MenuItem = nodes,
                BokerName = BrokerName,
            };
            return PartialView("_SidebarPartial", MenuItems);
        }
        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}




using LoginSignupCore.Data;
using LoginSignupCore.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Data;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Core.Services;
using System.Security.Claims;

namespace LoginSignupCore.Controllers
{
    public class MainController : Controller
    {
        private readonly ApplicatonDBContext _dbcontext;
        public MainService _mainService;
        public MainController(ApplicatonDBContext context)
        {
            _dbcontext = context;
            _mainService = new();
        }
        public IActionResult Monitoring()
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            return View();
        }
        //{
        //    ClaimsPrincipal claimUser = HttpContext.User;
        //    if (!(claimUser.Identity.IsAuthenticated))
        //    {
        //        return RedirectToAction("Login", "Account");
        //    }

        //    Dictionary<int, List<TreeViewNode>> nodes = new();
        //    Dictionary<int, string> BrokerName = new();
        //    foreach (BrokerMaster type in _dbcontext.BrokerMaster.ToList())
        //    {

        //        if (!nodes.TryGetValue(type.Id, out var treeViewNode))
        //        {
        //            //var treeview = new  TreeViewNode { id = type.Id, parent = "#", text = type.NvcBrokerName };
        //            nodes.Add(type.Id, new List<TreeViewNode>());
        //            BrokerName.Add(type.Id, type.NvcBrokerName);
        //        }
        //    }

        //    foreach (BrokerSites type in _dbcontext.BrokerSites)
        //    {
        //        if (nodes.TryGetValue(type.IntBrokerId, out var treeViewNode))
        //        {
        //            var treeview = new TreeViewNode { id = type.IntBrokerId, cid = type.Id, parent = "_", text = type.NvcSiteName };
        //            treeViewNode.Add(treeview);
        //        }
        //        else
        //        {
        //            var list = new List<TreeViewNode>();
        //            var treeview = new TreeViewNode { id = type.IntBrokerId, cid = type.Id, parent = "_", text = type.NvcSiteName };
        //            list.Add(treeview);
        //            nodes.Add(type.IntBrokerId, list);
        //        }
        //    }
        //    var MenuItems = new DictionaryOfTreeViewModl()
        //    {
        //        MenuItem = nodes,
        //        BokerName = BrokerName,
        //    };
        //    return PartialView("_SidebarPartial", MenuItems);

        //}
        private void GetSites(int pBrokerId)
        {
            List<LoginSignupCore.Models.VwInfoStatsData> vwInfoStatsData = new List<LoginSignupCore.Models.VwInfoStatsData>();
            var cmd2 = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd2.Connection.State != ConnectionState.Open)
            {
                cmd2.Connection.Open();
            }
            cmd2.CommandText = "Select distinct [IntSiteId] ,[BrokerName],VarBrokerId, NvcSiteName  from [vwInfoStatsData] where varBrokerId = '" + pBrokerId + "'";

            int counter = 101;
            Microsoft.Data.SqlClient.SqlDataReader dataread2 = (Microsoft.Data.SqlClient.SqlDataReader)cmd2.ExecuteReader();
            if (dataread2.HasRows)
            {
                while (dataread2.Read())
                {
                    counter = counter + 1;
                    vwInfoStatsData.Add(new LoginSignupCore.Models.VwInfoStatsData
                    {
                        IntSiteId = dataread2.GetInt32(0),
                        NvccomponentName = "T" + Convert.ToString(counter),
                        BrokerName = dataread2.GetString(1),
                        VarBrokerId = dataread2.GetInt32(2),
                        NvcSiteName = dataread2.GetString(3)
                    });
                    
                    GetSiteallComponents(dataread2.GetString(1), dataread2.GetInt32(0));
                    GetSiteTechnicalComponents(dataread2.GetInt32(2), dataread2.GetInt32(0));
                    GetSiteFunctionalComponents(dataread2.GetInt32(2), dataread2.GetInt32(0));
                    var BrokerId = dataread2.GetInt32(2);
                    var SiteId = dataread2.GetInt32(0);
                    var BrokerSiteInstanceId = Convert.ToString(BrokerId) + "-" + Convert.ToString(SiteId);
                    int Timer = globals.Timer;

                    //LoginSignupCore.AppCode.SocketManager.GetTechnicalData(BrokerSiteInstanceId,BrokerId,SiteId,Timer);
                    
                }                  
            }
            //LoginSignupCore.AppCode.SocketManager.GetTechnicalData("11-19", 11, 19, 1);
            ViewBag.Sites = vwInfoStatsData;
        }

        
        private void GetSiteallComponents(string pBrokerName,int pSiteId)
        {
            List<LoginSignupCore.Models.VwInfoStatsData> vwInfoStatsData = new List<LoginSignupCore.Models.VwInfoStatsData>();
            var cmd2 = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd2.Connection.State != ConnectionState.Open)
            {
                cmd2.Connection.Open();
            }
            cmd2.CommandText = "Select distinct intcomponentid,nvccomponentName,intinstanceid,nvcInstanceName,nvcInstanceIP,intPort,BrokerName,varBrokerId,ParamId,ParameterName,nvcReference,nvcValue,intSiteId,nvcSiteName from [VwInfoStatsData] where brokername = '" + pBrokerName + "' and intsiteid = '"+  pSiteId + "'";

            int counter = 10101;
            Microsoft.Data.SqlClient.SqlDataReader dataread2 = (Microsoft.Data.SqlClient.SqlDataReader)cmd2.ExecuteReader();
            if (dataread2.HasRows)
            {
                while (dataread2.Read())
                {
                    counter = counter + 1;
                    vwInfoStatsData.Add(new LoginSignupCore.Models.VwInfoStatsData
                    {
                        NvcInstanceName = "A" + Convert.ToString(counter),                        
                        NvccomponentName = dataread2.GetString(1),
                        Intinstanceid = dataread2.GetString(2)
                    }); ; ; ;

                }

            }           
            ViewBag.SiteComponents = vwInfoStatsData;
        }
        private void GetSiteTechnicalComponents(int pBrokerId, int pSiteId)
        {
            List<ComponentParameter> componentParameters = new List<ComponentParameter>();
            var cmd2 = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd2.Connection.State != ConnectionState.Open)
            {
                cmd2.Connection.Open();
            }
            cmd2.CommandText = "Select distinct [ParamId],[ComponentId],[InstanceId],[ParameterName],[BrokerSiteId] from ComponentParameter where [bitAttributeType] = 1 and  BrokerSiteId = '" + pBrokerId + "'+ '-' +'" + pSiteId + "'";

            int counter = 20101;
            Microsoft.Data.SqlClient.SqlDataReader dataread2 = (Microsoft.Data.SqlClient.SqlDataReader)cmd2.ExecuteReader();
            if (dataread2.HasRows)
            {
                while (dataread2.Read())
                {
                    counter = counter+ 1;
                    componentParameters.Add(new ComponentParameter
                    {
                        Remarks = "T" + Convert.ToString(counter),
                        ParamId = dataread2.GetInt32(0),
                        ComponentId = dataread2.GetString(1),
                        InstanceId = dataread2.GetString(2),
                        ParameterName = dataread2.GetString(3),
                        BrokerSiteId = dataread2.GetString(4)                       
                    }); ; ; ;
                }
             }
            ViewBag.SiteTechnicalComponents = componentParameters;
        }
        private void GetSiteFunctionalComponents(int pBrokerId, int pSiteId)
        {
            List<ComponentParameter> componentParameters = new List<ComponentParameter>();
            var cmd2 = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd2.Connection.State != ConnectionState.Open)
            {
                cmd2.Connection.Open();
            }
            cmd2.CommandText = "Select distinct [ParamId],[ComponentId],[InstanceId],[ParameterName],[BrokerSiteId] from ComponentParameter where [bitAttributeType] = 0 and  BrokerSiteId = '" + pBrokerId + "'+ '-' +'" + pSiteId + "'";

            int counter = 20101;
            Microsoft.Data.SqlClient.SqlDataReader dataread2 = (Microsoft.Data.SqlClient.SqlDataReader)cmd2.ExecuteReader();
            if (dataread2.HasRows)
            {
                while (dataread2.Read())
                {
                    counter = counter + 1;
                    componentParameters.Add(new ComponentParameter
                    {
                        BrokerSiteId = "F" + Convert.ToString(counter),
                        ParamId = dataread2.GetInt32(0),
                        ComponentId = dataread2.GetString(1),
                        InstanceId = dataread2.GetString(2),
                        ParameterName = dataread2.GetString(3),
                    }); ; ; ;
                }
            }
            ViewBag.SiteFunctionalComponents = componentParameters;
        }

        private string GetComponentName(int componentId)
        {
            string componentName = "";
            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
            if (cmd.Connection.State != ConnectionState.Open)
            {
                cmd.Connection.Open();
            }
            cmd.CommandText = "Select top 1 nvcComponentName from [ComponentMaster] where intComponentId = '" + componentId + "'";

            Microsoft.Data.SqlClient.SqlDataReader dataread2 = (Microsoft.Data.SqlClient.SqlDataReader)cmd.ExecuteReader();
            if (dataread2.HasRows)
            {
                while (dataread2.Read())
                {
                    componentName = dataread2.GetString(0);
                }
            }
            return componentName;
        }

        [HttpPost]
        public IActionResult StartProcess(LoginSignupCore.Models.VwInfoStatsData vwInfoStatsData)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            string brokerSiteId = Request.Form["BrokerSiteId"];
            int componentId = Convert.ToInt32(Request.Form["ComponentId"]);
            string serviceName = GetComponentName(componentId);   

            string action = "Start";

            //SocketManager.SendStopStartReq(brokerSiteId, serviceName, action);
            return RedirectToAction("Monitoring", "Main");
        }
        [HttpPost]
        public IActionResult StopProcess(LoginSignupCore.Models.VwInfoStatsData vwInfoStatsData)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            string brokerSiteId = Request.Form["BrokerSiteId"];
            int componentId = Convert.ToInt32(Request.Form["ComponentId"]);
            string serviceName = GetComponentName(componentId);

            string action = "Stop";

            //SocketManager.SendStopStartReq(brokerSiteId, serviceName, action);
            return RedirectToAction("Monitoring", "Main");
        }

        [HttpPost]
        public IActionResult StartComponent(CompInitReq compInitReq)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            (bool, string) isValid = ValidateRequest(compInitReq);
            if(isValid.Item1)
            {
                _mainService.StartComponent(compInitReq);
            }
            return RedirectToAction("StartComponent", "BODProcess", new { brokerid = compInitReq.BrokerId, siteid = compInitReq.SiteId, agentid = compInitReq.AgentId});
        }

        [HttpPost]
        public IActionResult StopComponent( CompInitReq compInitReq)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            (bool, string) isValid = ValidateRequest(compInitReq);
            if (isValid.Item1)
            {
                _mainService.StopComponent(compInitReq);
            }
            return RedirectToAction("StartComponent", "BODProcess", new { brokerid = compInitReq.BrokerId, siteid = compInitReq.SiteId, agentid = compInitReq.AgentId });

        }

        [HttpPost]
        public IActionResult StartFileUpload( CompInitReq compInitReq)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            (bool, string) isValid = ValidateRequest(compInitReq);
            if (isValid.Item1)
            {
                _mainService.StartFileUpload(compInitReq);
            }
            return RedirectToAction("Index", "BODProcess", new { brokerid = compInitReq.BrokerId, siteid = compInitReq.SiteId, agentid = compInitReq.AgentId });
        }

        [HttpPost]
        public IActionResult StartAfterBodFileUpload( CompInitReq compInitReq)
        {
            if (!CheckAuth())
            {
                return RedirectToAction("Login", "Account");
            }
            (bool, string) isValid = ValidateRequest(compInitReq);
            if (isValid.Item1)
            {
                _mainService.StartAfterBodFileUpload(compInitReq);
            }
            return RedirectToAction("Index", "BODProcess", new { brokerid = compInitReq.BrokerId, siteid = compInitReq.SiteId, agentid = compInitReq.AgentId });
        }

        private (bool, string) ValidateRequest(CompInitReq compInitReq)
        {
            if (compInitReq == null)
                return (false, "Invalid Request");
            else if (compInitReq.BrokerId <= 0)
                return (false, "Invalid BrokerId");
            else if (compInitReq.SiteId <= 0)
                return (false, "Invalid SiteId");
            else if (compInitReq.AgentId <= 0)
                return (false, "Invalid AgentId");
            return (true, "");
        }
        public bool CheckAuth()
        {
            ClaimsPrincipal claimUser = HttpContext.User;
            if (!claimUser.Identity.IsAuthenticated)
            {
                return false;
            }
            return true;
        }
    }
}




//using LoginSignupCore.Models;
//using Microsoft.AspNetCore.Authentication.Cookies;
//using Microsoft.AspNetCore.Authentication;
//using Microsoft.AspNetCore.Mvc;
//using System.Security.Claims;
//using Microsoft.EntityFrameworkCore;
//using LoginSignupCore.Data;
//using System.Data;
//using Microsoft.Data.SqlClient;
//using Microsoft.AspNetCore.Mvc.Rendering;
//using System.ComponentModel;
//using LoginSignupCore.Core;
//using Microsoft.Extensions.Logging;
//using System.Security.Policy;
//using LoginSignupCore.MasterCache;
////using StackExchange.Redis;

//namespace LoginSignupCore.Controllers
//{
//    public class TechnicalController : Controller
//    {
//        private readonly ApplicatonDBContext _dbcontext;

//        public TechnicalController(ApplicatonDBContext context)
//        {
//            _dbcontext = context;
//        }
//        public IActionResult TechnicalParam()
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!(claimUser.Identity.IsAuthenticated))
//            {
//                globals.User_ID = 0;
//                return RedirectToAction("Login", "Account");
//            }
//            ViewBag.successStatus = null;
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            globals.Instance_Name = "Please Select";
//            globals.Parameter_Name = "Please Select";
//            GetDropdownList();
//            GetDropdownParameterList();
//            GetDropdownComponentList();
//            GetDropdownInstanceList();
//            return View();
//        }

//        [HttpPost]
//        public IActionResult Clear(ComponentParameter componentParameter)
//        {
//            ViewBag.successStatus = null;
//            globals.Broker_Site = "Please Select";
//            globals.Component_Name = "Please Select";
//            globals.Instance_Name = "Please Select";
//            globals.Parameter_Name = "Please Select";
//            return RedirectToAction("TechnicalParam", "Technical");
//        }

//        public async Task<IActionResult> Logout()
//        {
//            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
//            globals.User_ID = 0;
//            return RedirectToAction("Login", "Account");
//        }

//        [HttpPost]
//        public IActionResult TechnicalParam(ComponentParameter componentParameter)
//        {
//            ViewBag.successStatus = 0;
//            try
//            {
//                string pId = Request.Form["BrokerSiteId"];
//                string pCompId = Request.Form["ComponentId"];
//                string pInstId = Request.Form["InstanceId"];
//                string pParamId = Request.Form["ParamId"];

//                componentParameter.IntCreatedBy = globals.User_ID;
//                componentParameter.BitIsDelete = 0;
//                componentParameter.BitIsActive = 1;
//                componentParameter.DtmCreatedOn = DateTime.Now.Date;
//                _dbcontext.ComponentParameters.Add(componentParameter);
//                _dbcontext.SaveChanges();
//                ViewBag.successStatus = 1;
//                GetDropdownList();
//                GetDropdownParameterList();
//                GetDropdownComponentList();
//                GetDropdownInstanceList();
//                GetDropdownListReload(pId);
//                GetDropdownComponentListReload(pCompId);
//                GetDropdownInstanceListReload(pInstId);
//                GetDropdownParameterListReload();
//                return View();
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//            }
//            return View();
//        }
//        public void GetDropdownParameterListReload()
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "SELECT NvcParameterName FROM TechnicalParameterMaster where bitisactive = 1 and bitisdelete = 0 order by NvcParameterName ";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Parameter_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownParameterList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "SELECT NvcParameterName FROM TechnicalParameterMaster where bitisactive = 1 and bitisdelete = 0 order by NvcParameterName ";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(0),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelParametersid = new SelectList(Lista, "Text", "Value");
//            }
//        }
//        public void GetDropdownListReload(string brokerSiteId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 and cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) = '" + brokerSiteId + "' order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Broker_Site = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcBrokerName+' - '+nvcSiteName BrokerNameList,cast(s.intBrokerId as varchar)+'-'+cast(s.id as varchar) BrokerSiteId from BrokerSites s Inner Join BrokerMaster m on s.intBrokerId = m.id where s.IsActive = 1 and m.IsActive = 1 and s.IsDeleted = 0 and m.IsDeleted = 0 order by s.intBrokerId , s.id";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;   
//                }
//                ViewBag.modelComponentsid = new SelectList(Lista, "Text", "Value");
//            }            
//        }


//        public void GetDropdownComponentListReload(string intComponentId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where c.intComponentId = '" + intComponentId + "' and  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Component_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownComponentList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcComponentName ,cast(c.intComponentId as varchar) IntComponentId from ComponentMaster c where  c.bitIsActive = 1 and c.bitIsDelete = 0 order by nvcComponentName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelComponentName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public void GetDropdownInstanceListReload(string intInstanceId)
//        {
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcInstanceName ,cast(intInstanceId as varchar) IntInstanceId from InstanceMaster i where IntInstanceId = '" + intInstanceId + "' and bitIsActive = 1 and bitIsDelete = 0 order by nvcInstanceName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    globals.Instance_Name = dataread.GetString(0);
//                }
//            }
//        }

//        public void GetDropdownInstanceList()
//        {
//            List<SelectListItem> Lista = new List<SelectListItem>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }
//            cmd.CommandText = "select nvcInstanceName ,cast(intInstanceId as varchar) IntInstanceId from InstanceMaster i where bitIsActive = 1 and bitIsDelete = 0 order by nvcInstanceName";
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {
//                    Lista.Add(new SelectListItem
//                    {
//                        Text = dataread.GetString(1),
//                        Value = dataread.GetString(0)
//                    }); ; ;
//                }
//                ViewBag.modelInstanceName = new SelectList(Lista, "Text", "Value");
//            }
//        }

//        public IActionResult DisplayData()
//        {

//            List<VwComponentParameter> componentParameters = new List<VwComponentParameter>();
//            var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//            if (cmd.Connection.State != ConnectionState.Open)
//            {
//                cmd.Connection.Open();
//            }            
//            //cmd.CommandText = "Select isnull(paramid,0) ParamId, isnull(brokerSiteId,'') BrokerSiteId, isnull(componentid,'') ComponentId, isnull(instanceid,'') InstanceId, isnull(ParameterName,'') ParameterName, isnull(remarks,'') Remarks, Cast(bitIsActive as Integer) bitIsActive from ComponentParameter where bitAttributeType = 1 and  bitIsDelete = 0"; // bitAttributeType 1 is used for Technical Parameters
//            cmd.CommandText = "SELECT Cast([intcomponentid] as Varchar) IntComponentId ,[nvccomponentName] ,Cast([intinstanceid] as varchar) intInstanceId ,[nvcInstanceName] ,[BrokerSiteName] ,[varBrokerId] ,[ParamId] ,[ParameterName] ,[intSiteId] ,[nvcBrokerName] ,[nvcSiteName] ,[BrokerSiteId] ,[bitAttributeType], bitIsActive, Remarks FROM [vwComponentParameter] where bitAttributeType = 1"; // bitAttributeType 1 is used for Technical Parameters
//            SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//            if (dataread.HasRows)
//            {
//                while (dataread.Read())
//                {

//                    componentParameters.Add(new VwComponentParameter
//                    {
//                        Intcomponentid = dataread.GetString(0),
//                        NvccomponentName = dataread.GetString(1),
//                        Intinstanceid = dataread.GetString(2),
//                        NvcInstanceName = dataread.GetString(3),
//                        BrokerSiteName = dataread.GetString(4),
//                        ParamId = dataread.GetInt32(6), 
//                        ParameterName = dataread.GetString(7),
//                        BrokerSiteId = dataread.GetString(11),
//                        BitIsActive = dataread.GetInt32(13),
//                        Remarks = dataread.GetString(14)

//                    }); ; ; ;

//                }
//                cmd.Connection.Close();

//                ViewBag.model = componentParameters;
//                return View();
//            }
//            return View();
//        }


//        [HttpPost]
//        public IActionResult TechnicalUpdate(ComponentParameter componentParameter)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");

//            }

//            ViewBag.successStatus = 0;
//            try
//            {
//                var paramId = Convert.ToInt32(Request.Form["ParamId"]);
//                var brokerSiteId = Request.Form["BrokerSiteId"];
//                var instanceId = Request.Form["InstanceId"];
//                var parameterName = Request.Form["ParameterName"];

//                if ((brokerSiteId.ToString().Length < 1))
//                {
//                    brokerSiteId = globals.BrokerId_update;
//                }
//                else
//                {
//                    brokerSiteId = Request.Form["BrokerSiteId"]; 
//                }

//                if ((instanceId.ToString().Length < 1))
//                {
//                    instanceId = globals.Instance_id;
//                }
//                else
//                {
//                    instanceId = Request.Form["InstanceId"];
//                }
//                var remarks = Request.Form["Remarks"];
//                var dtmupdateon = DateTime.Now;
//                var intUpdatedBy = globals.User_ID;
//                var bitIsActive = 0;
//                string componentid = Request.Form["ComponentId"];
//                string mvalue = Request.Form["BitIsActive"];

//                if ((componentid.ToString().Length < 1))
//                {
//                    componentid = Convert.ToString(globals.Component_ID);
//                }
//                else
//                {
//                    componentid = Request.Form["ComponentId"];
//                }
//                if ((parameterName.ToString().Length < 1))
//                {
//                    parameterName = Convert.ToString(globals.Parameter_Name);
//                }
//                else
//                {
//                    parameterName = Request.Form["parameterName"];
//                }

//                if (mvalue == "1")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "on")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "1,on")
//                {
//                    bitIsActive = 1;
//                }
//                else if (mvalue == "0,on")
//                {
//                    bitIsActive = 1;
//                }
//                else
//                {
//                    bitIsActive = 0;
//                }

//                try
//                {
//                    var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                    {
//                        if (cmd.Connection.State != ConnectionState.Open)
//                        {
//                            cmd.Connection.Open();
//                        }
//                        cmd.CommandText = "update ComponentParameter set BrokerSiteId='" + brokerSiteId + "',ComponentId='" + componentid + "',InstanceId='" + instanceId + "', ParameterName = '" + parameterName + "', Remarks = '" + remarks + "' , intUpdatedBy = '" + intUpdatedBy + "', dtmUpdatedOn = '" + dtmupdateon + "', bitIsActive = '" + bitIsActive + "'  where ParamId = '" + paramId + "' and bitAttributeType = 1";
//                        cmd.ExecuteNonQuery();
//                        cmd.Connection.Close();

//                        ViewBag.Status = 1;

//                        ViewBag.model = componentParameter;
//                        return RedirectToAction("DisplayData", "Technical");
//                    }

//                }
//                catch (Exception ee)
//                {
//                    globals.Instance_id = " ";
//                    globals.Component_ID = 0;
//                    globals.BrokerId_update = " ";
//                    ViewBag.Status = 0;
//                    return RedirectToAction("TechnicalParam", "Technical");

//                }               
//            }
//            catch (Exception ex)
//            {
//                globals.Instance_id = " ";
//                globals.Component_ID = 0;
//                globals.BrokerId_update = " ";
//                ViewBag.successStatus = 0;
//            }
//            return RedirectToAction("TechnicalParam", "Technical");
//        }


//        [HttpPost]
//        public IActionResult Edit(VwComponentParameter _componentParameter)
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!claimUser.Identity.IsAuthenticated)
//            {
//                return RedirectToAction("Login", "Account");
//            }

//            int id = Convert.ToInt32(Request.Form["ParamId"]);
//            var bitIsActive = Request.Form["mvalue"];
//            var brokerSiteName = Request.Form["BrokerSiteName"];
//            var nvcComponentName = Request.Form["NvccomponentName"];
//            var nvcInstanceName = Request.Form["NvcInstanceName"];
//            var intComponentId = Request.Form["Intcomponentid"];
//            var intinstanceid = Request.Form["Intinstanceid"];
//            var brokerSiteId = Request.Form["BrokerSiteId"];
//            var parameterName = Request.Form["ParameterName"];
//            ViewBag.sitename = brokerSiteName;
//            ViewBag.ComponentName = nvcComponentName;
//            ViewBag.InstanceName = nvcInstanceName;
//            ViewBag.mvalue = bitIsActive;
//            ViewBag.Intcomponentid = intComponentId;
//            ViewBag.IntInstanceId = intinstanceid;
//            ViewBag.BrokerSiteId = brokerSiteId;
//            ViewBag.ParameterName = parameterName;

//            globals.Broker_Site = brokerSiteId;
//            globals.BrokerId_update = Convert.ToString(brokerSiteId);
//            globals.Component_ID = Convert.ToInt32(intComponentId);
//            globals.Instance_id = Request.Form["Intinstanceid"];
//            globals.Parameter_Name = parameterName;

//            GetDropdownList();
//            GetDropdownParameterList();
//            GetDropdownComponentList();
//            GetDropdownInstanceList();
//            return View(_componentParameter);
//        }


//        public IActionResult TechnicalInfo()
//        {
//            List<ComponentsTechnicalInfo> infos = new();
//            var info = CoreProcess.agentSessionCache.GetTechnicalInfo();
//            if(info != null)
//            {
//                infos = info;
//            }

//            return View(infos);
//        }

//    }    
//}





//using LoginSignupCore.Data;
//using LoginSignupCore.Models;
//using Microsoft.AspNetCore.Authentication.Cookies;
//using Microsoft.AspNetCore.Authentication;
//using Microsoft.AspNetCore.Mvc;
//using System.Security.Claims;
//using Microsoft.EntityFrameworkCore;
//using Microsoft.Data.SqlClient;
//using System.Data;

//namespace LoginSignupCore.Controllers
//{
//    public class TimerController : Controller
//    {
//        private readonly ApplicatonDBContext _dbcontext;
//        public TimerController(ApplicatonDBContext context)
//        {
//            _dbcontext = context;
//        }
//        public IActionResult DisplayData()
//        {
//            ClaimsPrincipal claimUser = HttpContext.User;
//            if (!(claimUser.Identity.IsAuthenticated))
//            {
//                return RedirectToAction("Login", "Account");

//            }
//            GetTimerValue();
//            return View();
//        }

//        [HttpPost]
//        public IActionResult DisplayData(CTCLTimer cTCLTimer)
//        {            
//            try
//            {
//                ViewBag.successStatus = 0;
//                var pTimer = Request.Form["TimerinMins"];
//                var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                {
//                    if (cmd.Connection.State != ConnectionState.Open)
//                    {
//                        cmd.Connection.Open();
//                    }
//                    cmd.CommandText = "update CTCLTimer set timerInMins=" + pTimer ;
//                    cmd.ExecuteNonQuery();
//                    cmd.Connection.Close();
//                    ViewBag.CMATimer = pTimer;
//                    globals.Timer = Convert.ToInt32(pTimer);
//                    ViewBag.successStatus = 1;                    
//                    ViewBag.model = cTCLTimer;
//                    return View();
//                }               
//            }
//            catch (Exception ex)
//            {
//                ViewBag.successStatus = 0;
//                return View();
//            }
           
//        }
        
//        public void GetTimerValue()
//        {            
//            try
//            {
//                var cmd = _dbcontext.Database.GetDbConnection().CreateCommand();
//                if (cmd.Connection.State != ConnectionState.Open)
//                {
//                    cmd.Connection.Open();
//                }
//                cmd.CommandText = "SELECT timerinMins FROM CTCLtimer";
//                SqlDataReader dataread = (SqlDataReader)cmd.ExecuteReader();
//                if (dataread.HasRows)
//                {
//                    while (dataread.Read())
//                    {
//                        globals.Timer = dataread.GetInt32(0);
//                    }
//                    ViewBag.CMATimer = globals.Timer;
//                }
//            }
//            catch(Exception ex)
//            {
//                globals.Timer = 5;
//                ViewBag.CMATimer = Convert.ToString(5);
//            }
//        }

//        public async Task<IActionResult> Logout()
//        {
//            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
//            globals.User_ID = 0;
//            return RedirectToAction("Login", "Account");
//        }




//    }
//}




using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Others;
using LoginSignupCore.Models.Request;

namespace LoginSignupCore.Core.Services
{
    public class MainService
    {
        public void StartComponent(CompInitReq compInitReq)
        {
            (bool, ComponentMaster) resp = CoreProcess.agentSessionCache.GetComponentMaster(compInitReq);
            if(resp.Item1)
            {
                (bool, AgentSessionInfo) sessionInfo = CoreProcess.agentSessionCache.GetSession(compInitReq.BrokerId, compInitReq.SiteId, compInitReq.AgentId);
                if(sessionInfo.Item1 && sessionInfo.Item2.Session!=null)
                {
                    CoreProcess.agentSessionCache.AddOrUpdate(compInitReq,true);
                    var compReq = Helper.PrepareComponentInitReq(resp.Item2, CMA_OpCode.COMPONENT_START);
                    DataFlowModel dataFlowModel = new()
                    {
                        Data = compReq,
                        Token = sessionInfo.Item2.Session
                    };
                    CoreProcess.socketManager.Enqueue(dataFlowModel);
                }
                Log.Warning(sessionInfo.Item2.AgentName,"session is null");
            }
        }

        public void StopComponent(CompInitReq compInitReq)
        {
            (bool, ComponentMaster) resp = CoreProcess.agentSessionCache.GetComponentMaster(compInitReq);
            if (resp.Item1)
            {
                (bool, AgentSessionInfo) sessionInfo = CoreProcess.agentSessionCache.GetSession(compInitReq.BrokerId, compInitReq.SiteId, compInitReq.AgentId);
                if (sessionInfo.Item1)
                {
                    var compReq = Helper.PrepareComponentInitReq(resp.Item2, CMA_OpCode.COMPONENT_STOP);
                    DataFlowModel dataFlowModel = new()
                    {
                        Data = compReq,
                        Token = sessionInfo.Item2.Session
                    };
                    CoreProcess.socketManager.Enqueue(dataFlowModel);
                }
            }
        }

        public void StartFileUpload(CompInitReq compInitReq)
        {
            (bool, AgentSessionInfo) sessionInfo = CoreProcess.agentSessionCache.GetSession(compInitReq.BrokerId, compInitReq.SiteId, compInitReq.AgentId);
            if (sessionInfo.Item1 && sessionInfo.Item2.IsConnected)
            {
                FileUploadReq fileUploadReq = new()
                {
                    MessageCode = (int)CMA_OpCode.START_FILE_UPLOAD,
                    RequestId = Helper.GenerateRequestId((int)ComponentType.CONTRACT_MASTER_READER, -1, compInitReq.AgentId)
                };
                DataFlowModel dataFlowModel = new()
                {
                    Data = fileUploadReq,
                    Token = sessionInfo.Item2.Session
                };
                CoreProcess.socketManager.Enqueue(dataFlowModel);
            }
        }

        public void StartAfterBodFileUpload(CompInitReq compInitReq)
        {
            (bool, AgentSessionInfo) sessionInfo = CoreProcess.agentSessionCache.GetSession(compInitReq.BrokerId, compInitReq.SiteId, compInitReq.AgentId);
            if (sessionInfo.Item1)
            {
                FileUploadReq fileUploadReq = new()
                {
                    MessageCode = (int)CMA_OpCode.START_AFTER_BOD_FILE_UPLOAD,
                    //RequestId = Helper.GenerateRequestId((int)ComponentType.RMS, -1, compInitReq.AgentId)
                };
                DataFlowModel dataFlowModel = new()
                {
                    Data = fileUploadReq,
                    Token = sessionInfo.Item2.Session
                };
                CoreProcess.socketManager.Enqueue(dataFlowModel);
            }
        }
    }
}




using BinaryProtocol.Common;
using Exchange.Logs;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Processor;
using Serilog;
using Serilog.Core;
using Serilog.Events;

namespace LoginSignupCore.Core
{
    public class CoreProcess
    {
        public static Response response;
        private static LogProcessor logProcessor;
        public static WebSocketIdWiseSession webSocketIdWiseSession;
        public static SocketManager socketManager;
        public static AgentSessionCache agentSessionCache;
        public static IPSessionCache ipSessionCache;
        public static DBProcessor dBProcessor;

        public static async Task<Response> Initialize()
        {
            response = new();

            LogConfiguration logConfiguration = new LogConfiguration
            {
                FilesizeLimitBytes = 50000000,
                LogFileNameWithPath = Config.logfile,
                LoggingLevelSwitch = new LoggingLevelSwitch
                {
                    MinimumLevel = Config.logLevel == 0 ? LogEventLevel.Debug : (LogEventLevel)Config.logLevel,
                },
                OutputTemplate = "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u5}] {Message:lj}{NewLine}{Exception}",
                RetainedFileCount = Config.logFileCount,
                RollingInterval = RollingInterval.Day,
                RollOnFileSizeLimit = true,
            };

            LogType logType = (LogType)Config.logLevel;

            if (logProcessor == null)
            {
                logProcessor = new LogProcessor(logConfiguration);
            }

            dBProcessor = new();
            ipSessionCache = new();
            agentSessionCache = new();
            webSocketIdWiseSession = new();
            socketManager = new();
            CacheOnLoad.LoadAllCacheData();
            await socketManager.Initialize();
            return new Response()
            {
                Message = ""
            };
        }

        public static Response SendToLogQueue(LogObject data)
        {
            if (!data.Equals(default(LogObject)) && logProcessor != null)
            {
                return logProcessor.Enqueue(data);
            }
            else if (logProcessor == null)
            {
                return response.Set(StatusCode.OMS_Failure, "logProcessor is null");
            }
            else
            {
                return response.Set(StatusCode.OMS_Failure, "data is null");
            }
        }
    }
}



using System.Runtime.InteropServices;

namespace LoginSignupCore.Core
{
    public class exitHook
    {
        private const int MF_BYCOMMAND = 0x00000000;
        public const int SC_CLOSE = 0xF060;

        [DllImport("user32.dll")]
        public static extern int DeleteMenu(IntPtr hMenu, int nPosition, int wFlags);

        [DllImport("user32.dll")]
        private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

        [DllImport("kernel32.dll", ExactSpelling = true)]
        private static extern IntPtr GetConsoleWindow();

        static exitHook()
        {
            DeleteMenu(GetSystemMenu(GetConsoleWindow(), false), SC_CLOSE, MF_BYCOMMAND);
        }

        public static void exitHookInit()
        {
            string strExit, strExitconfirm;

            Console.CancelKeyPress += Console_CancelKeyPress;
            Console.WriteLine("running");


        }

        private static void Console_CancelKeyPress(object? sender, ConsoleCancelEventArgs args)
        {
            args.Cancel = true;
            //ask();

        }

        public static void ask()
        {
            Console.WriteLine("Type exit and press Enter to Close the Programm ");
        }
    }
}



using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using Newtonsoft.Json;
using Utility;
using ComponentInfo = LoginSignupCore.Models.Response.ComponentInfo;
using FileInfo = LoginSignupCore.Models.Response.FileInfo;


namespace LoginSignupCore.Core
{
    public class Helper
    {
        private static Conversion conversion;

        static Helper()
        {
            conversion = new();
        }

        public static string SerializeObject(object obj)
        {
            try
            {
                return JsonConvert.SerializeObject(obj);
            }
            catch (Exception ex)
            {
                return "Error in serialize :" + ex.Message;
            }

        }

		public static ComponentInfo PrepareComponentInfoResponse(List<Component> compList)
		{
			ComponentInfo componentInfo = new();
			if (compList != null)
			{
				componentInfo.Data = new();
				for (int i = 0; i < compList.Count; i++)
				{
					ComponentInfoData componentInfoData = new();
					componentInfoData.ComponentType = compList[i].componentMaster.ComponentId;
					componentInfoData.InstanceId = compList[i].componentMaster.InstanceId;
					componentInfoData.CmdParameters = compList[i].componentMaster.CmdParam;
					componentInfoData.ExecutablePath = compList[i].componentMaster.ExePath;
					componentInfoData.Priority = compList[i].componentMaster.Priority;
					componentInfoData.ServiceName = compList[i].componentMaster.ServiceName;

					componentInfo.Data.Add(componentInfoData);
				}
			}
			return componentInfo;
		}
		public static FileInfo PrepareFileInfoResponse(List<FileMasterInfo> fileList)
		{
			FileInfo fileInfo = new();
			if (fileList != null)
			{
				fileInfo.Files = new();
				for (int i = 0; i < fileList.Count; i++)
				{
					FilePathInfo filePathInfo = new();
					filePathInfo.FileName = fileList[i].FileName;
					filePathInfo.FilePriority = fileList[i].Priority;
					filePathInfo.Segment = fileList[i].SegmentId;
					filePathInfo.FileType = fileList[i].FileType;
					filePathInfo.IsUploadBeforeBod = fileList[i].IsUploadBeforeBOD;
					filePathInfo.DestinationPath = fileList[i].DestinationPath;

                    fileInfo.Files.Add(filePathInfo);
                }
            }
            return fileInfo;
        }
        public static ComponentInitReq PrepareComponentInitReq(ComponentMaster componentMaster, CMA_OpCode opCode)
        {
            ComponentInitReq componentInitReq = new()
            {
                AgentId = componentMaster.AgentId,
                BrokerId = componentMaster.BrokerId,
                SiteId = componentMaster.SiteId,
                MessageCode = (int)opCode,
                ComponentType = componentMaster.ComponentId,
                InstanceId = componentMaster.InstanceId,
                IsRunAsService = componentMaster.IsRunAsService,
                RequestId = GenerateRequestId(componentMaster.ComponentId, componentMaster.InstanceId, componentMaster.AgentId)
            };
            return componentInitReq;
        }
        public static ComponentsTechnicalInfo PrepareTechnicalParamModel(ComponentTechincalInfo technicalInfo)
        {
            ComponentsTechnicalInfo componentsTechnicalInfo = new()
            {
                BrokerId = technicalInfo.BrokerId,
                SiteId = technicalInfo.SiteId,
                AgentId = technicalInfo.AgentId,
                ComponentId = technicalInfo.ComponentType,
                InstanceId = technicalInfo.InstanceId,
                CPUUtilization = technicalInfo.CPUPercentage,
                RAMUtilization = technicalInfo.RAMUsage,
                ComponentName = ((ComponentType)technicalInfo.ComponentType).ToString(),
                AgentName =  CoreProcess.agentSessionCache.GetSession(technicalInfo.BrokerId, technicalInfo.SiteId,technicalInfo.AgentId).Item2?.AgentName??string.Empty,
                Timestamp = DateTime.Now.ToString("dd/MM/yyyyTHH:mm:ss")

            };
            return componentsTechnicalInfo;
        }
        public static string GenerateRequestId(int compId, int instanceId, int agentInstanceId)
        {
            int agentCompId = (int)ComponentType.AgentWorker;
            //Length 2
            string agentId = agentCompId.ToString("D2");
            //Length 4
            string agentInstId = agentInstanceId.ToString("D4");
            //Length 2
            string destCompId = compId.ToString("D2");
            //Length 2
            string destInsId = "";
            if (instanceId < 0)
            {
                destInsId = "01";
            }
            else
            {
                destInsId = instanceId.ToString("D2");
            }
            //Length 4
            string year = DateTime.Now.Year.ToString("D4");
            //Length 2
            string month = DateTime.Now.Month.ToString("D2");
            //Length 2
            string date = DateTime.Now.Day.ToString("D2");
            //Length 14
            string id = (++Config.Id).ToString("D14");

            string requestId = string.Concat(agentId, agentInstId, destCompId, destInsId, year, month, date, id);
            if (requestId.Length == 32)
                return requestId;
            return DateTime.Now.Ticks.ToString("D32");
        }
    }
}


using CTCL.BinaryProtocol.Common.CMA.Enum;
using Exchange.WebSocketServer.SocketManager;
using LoginSignupCore.Global;
using LoginSignupCore.Models;
using LoginSignupCore.Models.Others;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using Newtonsoft.Json;
using Utility.Queueing;

namespace LoginSignupCore.Core
{
    public class InteractiveProcessQueue
    {
        private ProcessQueue<DataFlowModel> interactiveMessageQueue;
        Thread thread;
        ManualResetEvent _mre;
        public InteractiveProcessQueue()
        {
            interactiveMessageQueue = new ProcessQueue<DataFlowModel>();
            _mre = new ManualResetEvent(false);
            DrainerThreadInit();
        }

        public void Enqueue(DataFlowModel message)
        {
            interactiveMessageQueue.Enqueue(message);
        }
        private void DrainerThreadInit()
        {
            thread = new Thread(new ThreadStart(DrainMessage));
            thread.Start();
        }
        private void DrainMessage()
        {
            while (true)
            {
                if (interactiveMessageQueue.TryDequeue(out DataFlowModel message))
                {
                    try
                    {
                        //Process message
                        ProcessMessage(message);
                    }
                    catch (System.Exception ex)
                    {
                        Log.Error(message, $"Exception occured on message process {ex.Message}");
                    }
                }
            }
        }
        private void ProcessMessage(DataFlowModel message)
        {
            try
            {
                if (message.Data != null)
                {
                    string reqData = message.Data.ToString();
                    var baseResponse = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                    if (baseResponse != null)
                    {
                        var opcode = (CMA_OpCode)baseResponse.MessageCode;
                        switch (opcode)
                        {
                            case CMA_OpCode.AGENT_HANDSHAKE_REQ:
                                {
                                    Log.Info($"Received AGENT_HANDSHAKE_REQ");
                                    var agentHandshakeReq = JsonConvert.DeserializeObject<AgentHandshakeReq>(reqData);
                                    if (agentHandshakeReq != null)
                                    {
                                        var data = CoreProcess.ipSessionCache.Get(agentHandshakeReq.IP);

                                        //update socket session in sgent wise cache

                                        if (data.Item1)
                                        {
                                            data.Item2.Session = message.Token;
                                            AgentSessionWs agentSessionWs = new()
                                            {
                                                AgentId = data.Item2.AgentId,
                                                BrokerId = data.Item2.BrokerId,
                                                SiteId = data.Item2.SiteId,
                                            };
                                            CoreProcess.webSocketIdWiseSession.AddOrUpdate(new WebSocketSessionToken() { webSocketSessionToken = message.Token.Context.Channel.Id.AsShortText() }, agentSessionWs);
                                            CoreProcess.agentSessionCache.AddOrUpdate(data.Item2);
                                            MsgHeader res = new()
                                            {
                                                MessageCode = (int)CMA_OpCode.AGENT_HANDSHAKE_RES,
                                                AgentId = data.Item2.AgentId,
                                                BrokerId = data.Item2.BrokerId,
                                                SiteId = data.Item2.SiteId
                                            };
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = res });
                                        }
                                        else
                                        {
                                            Log.Error($"Data not found | {agentHandshakeReq.IP} not found");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing AGENT_HANDSHAKE_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.LOGIN_REQ:
                                {
                                    Log.Info($"Received LoginRequest");
                                    var loginReq = JsonConvert.DeserializeObject<LoginRequest>(reqData);
                                    if (loginReq != null)
                                    {

                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing LoginRequest");
                                    }
                                }
                                break;

                            case CMA_OpCode.COMPONENT_INFO_REQ:
                                {
                                    Log.Info($"Received COMPONENT_INFO_REQ");
                                    var compInfoReq = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                                    if (compInfoReq != null)
                                    {
                                        var compList = CoreProcess.agentSessionCache.GetComponentMaster(compInfoReq.BrokerId, compInfoReq.SiteId, compInfoReq.AgentId);
                                        if (compList.Item1)
                                        {
                                            var responseData = Helper.PrepareComponentInfoResponse(compList.Item2);
                                            responseData.MessageCode = (int)CMA_OpCode.COMPONENT_INFO_RES;
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = responseData });
                                        }
                                        else
                                        {
                                            Log.Error($"Error while fetching Compoent Master Data");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing COMPONENT_INFO_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.FILE_INFO_REQ:
                                {
                                    Log.Info($"Received FILE_INFO_REQ");
                                    var fileInfoReq = JsonConvert.DeserializeObject<MsgHeader>(reqData);
                                    if (fileInfoReq != null)
                                    {
                                        var fileList = CoreProcess.agentSessionCache.GetFileMasterInfo(fileInfoReq.BrokerId, fileInfoReq.SiteId, fileInfoReq.AgentId);
                                        if (fileList.Item1)
                                        {
                                            var responseData = Helper.PrepareFileInfoResponse(fileList.Item2);
                                            var masterPath = CoreProcess.agentSessionCache.GetMasterPath(fileInfoReq.BrokerId, fileInfoReq.SiteId);
                                            responseData.MessageCode = (int)CMA_OpCode.FILE_INFO_RES;
                                            if (masterPath.Item1 && masterPath.Item2 != null)
                                            {
                                                responseData.MasterPath = masterPath.Item2;
                                            }
                                            CoreProcess.socketManager.Enqueue(new() { Token = message.Token, Data = responseData });
                                        }
                                        else
                                        {
                                            Log.Error($"Error while fetching FILE_INFO_REQ Data");
                                        }
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing FILE_INFO_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.FILE_UPLOAD_CONFIRMATION:
                                {
                                    Log.Info($"Received FILE_UPLOAD_CONFIRMATION");
                                    var fileStatus = JsonConvert.DeserializeObject<FileStatus>(reqData);
                                    if (fileStatus != null)
                                    {
                                        CoreProcess.agentSessionCache.AddOrUpdate(fileStatus);
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing FILE_UPLOAD_CONFIRMATION");
                                    }
                                }
                                break;

                            case CMA_OpCode.COMPONENT_STATE_UPDATE:
                                {
                                    Log.Info($"Received COMPONENT_STATE_UPDATE");
                                    var compStatus = JsonConvert.DeserializeObject<ComponentStatus>(reqData);
                                    if (compStatus != null)
                                    {
                                        CoreProcess.agentSessionCache.AddOrUpdate(compStatus);
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {
                                        Log.Error($"Error while procesing COMPONENT_STATE_UPDATE");
                                    }
                                }
                                break;

                            case CMA_OpCode.CMA_TECHNICAL_PARAM_REQ:
                                {
                                    Log.Info($"Received CMA_TECHNICAL_PARAM_REQ");
                                    var techInfo = JsonConvert.DeserializeObject<ComponentTechincalInfo>(reqData);
                                    if (techInfo != null)
                                    {
                                        var info = Helper.PrepareTechnicalParamModel(techInfo);
                                        if (info.InstanceId != 0)
                                        {
                                            CoreProcess.agentSessionCache.AddOrUpdate(info);
                                        }
                                        CoreProcess.dBProcessor.Enqueue(reqData);
                                    }
                                    else
                                    {

                                        Log.Error($"Error while procesing CMA_TECHNICAL_PARAM_REQ");
                                    }
                                }
                                break;

                            case CMA_OpCode.END_MSG_DOWNLOAD:
                                {
                                    Log.Info($"Received END_MSG_DOWNLOAD");
                                    var session = CoreProcess.agentSessionCache.GetSession(baseResponse.BrokerId, baseResponse.SiteId, baseResponse.AgentId);
                                    if (session.Item1 && session.Item2 != null)
                                    {
                                        session.Item2.IsConnected = true;
                                    }
                                }
                                break;

                            default:
                                break;
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                Log.Error($"Error occured during ProcessMessage");
            }
        }
    }
    public class DataFlowModel
    {
        public SocketSession Token;
        public object Data;
    }
}





using BinaryProtocol.Common;
using SocketSession = Exchange.WebSocketServer.SocketManager.SocketSession;
using LoginSignupCore.Global;
using Exchange.WebSocketServer.SocketManager;
using WebSocketSessionToken = Exchange.WebSocketServer.SocketManager.WebSocketSessionToken;
using Utility.Queueing;
using LoginSignupCore.Models;

namespace LoginSignupCore.Core
{
    public class SocketManager
    {
        private ProcessQueue<DataFlowModel> queue;
        private Thread thread;
        private InteractiveProcessQueue _interactiveProcessQueue;
        public async Task Initialize()
        {
            queue = new();
            thread = new Thread(new ThreadStart(ListenQueue));
            thread.Start();
            _interactiveProcessQueue = new InteractiveProcessQueue();
            WebsocketManager.OnOpenConnection += WebsocketManager_OnOpenConnection;
            WebsocketManager.OnStringMessageReceived += WebsocketManager_OnMessageReceived;
            WebsocketManager.OnErrorListener += WebsocketManager_OnErrorListener;
            WebsocketManager.OnCloseConnection += WebsocketManager_OnCloseConnection;

            await Exchange.WebSocketServer.Global.Startup.Setup();
        }

        private void WebsocketManager_OnOpenConnection(SocketSession socketSession)
        {
            Log.Info($"On Ws open con-> {socketSession.Context.Channel.Id.AsShortText()}");
            //UserSession userSession = new UserSession
            //{
            //    SocketSession = socketSession,
            //    WebSocketSessionToken = new WebSocketSessionToken() { webSocketSessionToken = socketSession.Context.Channel.Id.AsShortText() }
            //};
            //CoreProcess.webSocketIdWiseSession.AddOrUpdateWebSocketToken(userSession);
        }
        private void WebsocketManager_OnMessageReceived(SocketSession socketSession, object receivedmsg)
        {
            _interactiveProcessQueue.Enqueue(new() { Token = socketSession, Data = receivedmsg});
        }
        private static void WebsocketManager_OnErrorListener(SocketSession socketSession, Exception ex)
        {
            Log.Error(ex);
        }
        public static void WebsocketManager_OnCloseConnection(SocketSession socketSession)
        {
            if(socketSession != null && socketSession.Context != null && socketSession.Context.Channel != null)
            {
                WebSocketSessionToken webSocketSessionToken = new WebSocketSessionToken() { webSocketSessionToken = socketSession.Context.Channel.Id.AsShortText() };
                CoreProcess.webSocketIdWiseSession.Remove(webSocketSessionToken);
                Log.Info("Ws Close Evt: " + socketSession.Context.Channel.Id.AsShortText());
            }
        }
        public static void Send(SocketSession socketSession, object data)
        {
            if(socketSession!=null)
                WebsocketManager.Send(socketSession, data);
        }
        public void Enqueue(DataFlowModel data)
        {
            queue.Enqueue(data);
        }
        private void ListenQueue()
        {
            while (true)
            {
                if (queue.TryDequeue(out DataFlowModel res))
                {
                    Send(res.Token, res.Data);
                }
            }
        }
    }
}



using LoginSignupCore.Core;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using System.Data.SqlClient;

namespace LoginSignupCore.Data
{
    public class AgentRepository
    {
        public void InsertUpdateData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "INSERT INTO AgentMaster (nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,nvcRemarks,dtmCreatedOn,intCreatedBy)" +
                    "VALUES(@nvcAgentName,@intBrokerId,@intBrokerSiteId,@nvcInstanceIP,@nvcRemarks,@dtmCreatedOn,@intCreatedBy)" +
                    "SELECT SCOPE_IDENTITY()";
                using (var command = new SqlCommand(query,connection))
                {
                    command.Parameters.AddWithValue("@nvcAgentName", agentMaster.AgentName);
                    command.Parameters.AddWithValue("@intBrokerId", agentMaster.BrokerId);
                    command.Parameters.AddWithValue("@intBrokerSiteId", agentMaster.BrokerSiteId);
                    command.Parameters.AddWithValue("@nvcInstanceIP", agentMaster.nvcInstanceIP);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmCreatedOn", agentMaster.DtmCreationDate);
                    command.Parameters.AddWithValue("@intCreatedBy", agentMaster.IntCreatedBy);
                    connection.Open();
                    object id = command.ExecuteScalar();
                    if(id != null)
                    {
                        _ = int.TryParse(id.ToString(), out int agentId);
                        if(agentId != 0)
                        {
                            AgentSessionInfo agentSessionInfo = new();
                            agentSessionInfo.AgentId = agentId;
                            agentSessionInfo.BrokerId = agentMaster.BrokerId;
                            agentSessionInfo.SiteId = agentMaster.BrokerSiteId;
                            agentSessionInfo.IP = agentMaster.nvcInstanceIP;
                            agentSessionInfo.AgentName = agentMaster.AgentName;

                            CoreProcess.ipSessionCache.AddOrUpdate(agentSessionInfo);
                            CoreProcess.agentSessionCache.AddOrUpdate(agentSessionInfo);
                        }
                    }
                }

            }
        }
        public List<AgentMaster> GetAllAgents(int brokerid, int siteid,int isdelete=0)
        {
            var agents = new List<AgentMaster>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intAgentId,nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy " +
                    "from AgentMaster where intBrokerId=@intBrokerId and intBrokerSiteId=@intBrokerSiteId and IsDeleted=@IsDeleted";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intBrokerId", brokerid);
                    command.Parameters.AddWithValue("@intBrokerSiteId", siteid);
                    command.Parameters.AddWithValue("@IsDeleted", isdelete);
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            AgentMaster agent = new AgentMaster();
                            agent.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            agent.AgentName = reader.GetString(reader.GetOrdinal("nvcAgentName"));
                            agent.BrokerId = reader.GetInt32(reader.GetOrdinal("intBrokerId"));
                            agent.BrokerSiteId = reader.GetInt32(reader.GetOrdinal("intBrokerSiteId"));
                            agent.nvcInstanceIP = reader.GetString(reader.GetOrdinal("nvcInstanceIP"));
                            agent.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            agent.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            agent.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            agent.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            agent.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            agent.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            agent.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                            agents.Add(agent);
                        }
                    }
                }

            }
            return agents;
        }
        public AgentMaster GetAgentById(int agentID)
        {
            var agent = new AgentMaster();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intAgentId,nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy from AgentMaster where intAgentId=@intAgentId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentID);
                    
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {

                            agent.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            agent.AgentName = reader.GetString(reader.GetOrdinal("nvcAgentName"));
                            agent.BrokerId = reader.GetInt32(reader.GetOrdinal("intBrokerId"));
                            agent.BrokerSiteId = reader.GetInt32(reader.GetOrdinal("intBrokerSiteId"));
                            agent.nvcInstanceIP = reader.GetString(reader.GetOrdinal("nvcInstanceIP"));
                            agent.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            agent.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            agent.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            agent.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            agent.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            agent.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            agent.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                           
                        }
                    }
                }

            }
            return agent;
        }
        public int UpdateData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set nvcAgentName=@nvcAgentName,nvcInstanceIP=@nvcInstanceIP," +
                    "nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@nvcAgentName", agentMaster.AgentName);
                    command.Parameters.AddWithValue("@nvcInstanceIP", agentMaster.nvcInstanceIP);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
        public int DeleteData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set IsDeleted=@IsDeleted,nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@IsDeleted", agentMaster.IsDeleted);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
        public int UpdateIsActiveData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set IsActive=@IsActive,nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@IsActive", agentMaster.IsActive);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
    }
}


using LoginSignupCore.Core;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using System.Data.SqlClient;

namespace LoginSignupCore.Data
{
    public class AgentRepository
    {
        public void InsertUpdateData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "INSERT INTO AgentMaster (nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,nvcRemarks,dtmCreatedOn,intCreatedBy)" +
                    "VALUES(@nvcAgentName,@intBrokerId,@intBrokerSiteId,@nvcInstanceIP,@nvcRemarks,@dtmCreatedOn,@intCreatedBy)" +
                    "SELECT SCOPE_IDENTITY()";
                using (var command = new SqlCommand(query,connection))
                {
                    command.Parameters.AddWithValue("@nvcAgentName", agentMaster.AgentName);
                    command.Parameters.AddWithValue("@intBrokerId", agentMaster.BrokerId);
                    command.Parameters.AddWithValue("@intBrokerSiteId", agentMaster.BrokerSiteId);
                    command.Parameters.AddWithValue("@nvcInstanceIP", agentMaster.nvcInstanceIP);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmCreatedOn", agentMaster.DtmCreationDate);
                    command.Parameters.AddWithValue("@intCreatedBy", agentMaster.IntCreatedBy);
                    connection.Open();
                    object id = command.ExecuteScalar();
                    if(id != null)
                    {
                        _ = int.TryParse(id.ToString(), out int agentId);
                        if(agentId != 0)
                        {
                            AgentSessionInfo agentSessionInfo = new();
                            agentSessionInfo.AgentId = agentId;
                            agentSessionInfo.BrokerId = agentMaster.BrokerId;
                            agentSessionInfo.SiteId = agentMaster.BrokerSiteId;
                            agentSessionInfo.IP = agentMaster.nvcInstanceIP;
                            agentSessionInfo.AgentName = agentMaster.AgentName;

                            CoreProcess.ipSessionCache.AddOrUpdate(agentSessionInfo);
                            CoreProcess.agentSessionCache.AddOrUpdate(agentSessionInfo);
                        }
                    }
                }

            }
        }
        public List<AgentMaster> GetAllAgents(int brokerid, int siteid,int isdelete=0)
        {
            var agents = new List<AgentMaster>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intAgentId,nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy " +
                    "from AgentMaster where intBrokerId=@intBrokerId and intBrokerSiteId=@intBrokerSiteId and IsDeleted=@IsDeleted";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intBrokerId", brokerid);
                    command.Parameters.AddWithValue("@intBrokerSiteId", siteid);
                    command.Parameters.AddWithValue("@IsDeleted", isdelete);
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            AgentMaster agent = new AgentMaster();
                            agent.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            agent.AgentName = reader.GetString(reader.GetOrdinal("nvcAgentName"));
                            agent.BrokerId = reader.GetInt32(reader.GetOrdinal("intBrokerId"));
                            agent.BrokerSiteId = reader.GetInt32(reader.GetOrdinal("intBrokerSiteId"));
                            agent.nvcInstanceIP = reader.GetString(reader.GetOrdinal("nvcInstanceIP"));
                            agent.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            agent.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            agent.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            agent.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            agent.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            agent.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            agent.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                            agents.Add(agent);
                        }
                    }
                }

            }
            return agents;
        }
        public AgentMaster GetAgentById(int agentID)
        {
            var agent = new AgentMaster();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intAgentId,nvcAgentName,intBrokerId,intBrokerSiteId,nvcInstanceIP,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy from AgentMaster where intAgentId=@intAgentId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentID);
                    
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {

                            agent.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            agent.AgentName = reader.GetString(reader.GetOrdinal("nvcAgentName"));
                            agent.BrokerId = reader.GetInt32(reader.GetOrdinal("intBrokerId"));
                            agent.BrokerSiteId = reader.GetInt32(reader.GetOrdinal("intBrokerSiteId"));
                            agent.nvcInstanceIP = reader.GetString(reader.GetOrdinal("nvcInstanceIP"));
                            agent.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            agent.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            agent.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            agent.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            agent.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            agent.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            agent.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                           
                        }
                    }
                }

            }
            return agent;
        }
        public int UpdateData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set nvcAgentName=@nvcAgentName,nvcInstanceIP=@nvcInstanceIP," +
                    "nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@nvcAgentName", agentMaster.AgentName);
                    command.Parameters.AddWithValue("@nvcInstanceIP", agentMaster.nvcInstanceIP);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
        public int DeleteData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set IsDeleted=@IsDeleted,nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@IsDeleted", agentMaster.IsDeleted);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
        public int UpdateIsActiveData(AgentMaster agentMaster)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "update AgentMaster set IsActive=@IsActive,nvcRemarks=@nvcRemarks,dtmUpdatedOn=@dtmUpdatedOn,intUpdatedBy=@intUpdatedBy where intAgentId=@intAgentId";


                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentMaster.AgentId);
                    command.Parameters.AddWithValue("@IsActive", agentMaster.IsActive);
                    command.Parameters.AddWithValue("@nvcRemarks", agentMaster.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", agentMaster.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", agentMaster.IntUpdatedBy);
                    connection.Open();
                    int rowAffected = command.ExecuteNonQuery();
                    return rowAffected;
                }

            }
        }
    }
}




using LoginSignupCore.Core;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using System.Data.SqlClient;

namespace LoginSignupCore.Data
{
    public class AgentwiseFilesRepository
    {
        public void InsertAgentWiseFilesData(AgentwiseFiles map)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "INSERT INTO AgentToFileMappingMaster(intAgentId,intFileId,nvcRemarks," +
                    "dtmCreatedOn,intCreatedBy,IsActive,IsDeleted) VALUES (@intAgentId,@intFileId,@nvcRemarks," +
                    "@dtmCreatedOn,@intCreatedBy,@IsActive,@IsDeleted)";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", map.AgentId);
                    command.Parameters.AddWithValue("@intFileId", map.FileId);
                    command.Parameters.AddWithValue("@nvcRemarks", map.Remarks);
                    command.Parameters.AddWithValue("@dtmCreatedOn", map.DtmCreationDate);
                    command.Parameters.AddWithValue("@intCreatedBy", map.IntCreatedBy);
                    command.Parameters.AddWithValue("@IsActive", 1);
                    command.Parameters.AddWithValue("@IsDeleted", 0);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

                string fileMasterquery = "SELECT intSegmentId,intFileType,nvcFileName," +
                    "intPriority,isUploadBeforeBod,nvcDestinationPath" +
                    " from FileInfoMaster where intId=@intId and IsActive=@IsActive and IsDeleted=@IsDeleted";
                using (var command = new SqlCommand(fileMasterquery, connection))
                {
                    command.Parameters.AddWithValue("@intId", map.FileId);
                    command.Parameters.AddWithValue("@IsActive", 1);
                    command.Parameters.AddWithValue("@IsDeleted", 0);

                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            FileMasterInfo file = new FileMasterInfo();
                            file.SegmentId = reader.GetInt32(reader.GetOrdinal("intSegmentId"));
                            file.FileType = reader.GetInt32(reader.GetOrdinal("intFileType"));
                            file.FileName = reader.GetString(reader.GetOrdinal("nvcFileName"));
                            file.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            file.IsUploadBeforeBOD = reader.GetBoolean(reader.GetOrdinal("isUploadBeforeBod"));
                            file.DestinationPath = reader.GetString(reader.GetOrdinal("nvcDestinationPath"));
                            file.AgentId = map.AgentId;
                            file.BrokerId = map.BrokerId;
                            file.SiteId = map.SiteId;

                            CoreProcess.agentSessionCache.AddOrUpdate(file);
                        }
                    }
                }
            }
        }
        public List<AgentwiseFiles> GetAllFilesAgentWise(int agentID)
        {
            var files = new List<AgentwiseFiles>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT a.intId,a.intAgentId,a.intFileId,a.IsActive,a.IsDeleted," +
                    "a.nvcRemarks,a.dtmCreatedOn,a.intCreatedBy,a.dtmUpdatedOn,a.intUpdatedBy,b.nvcFileName" +
                     " from AgentToFileMappingMaster a JOIN FileInfoMaster b on b.intId = a.intFileId" +
                     " where a.intAgentId=@intAgentId and a.IsDeleted = 0 and b.IsDeleted = 0 ";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentID);


                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            AgentwiseFiles file = new AgentwiseFiles();
                            file.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                            file.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            file.FileId = reader.GetInt32(reader.GetOrdinal("intFileId"));
                            file.FileName = reader.GetString(reader.GetOrdinal("nvcFileName"));
                            file.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            file.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            file.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            file.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            file.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                             : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            file.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            file.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                            files.Add(file);
                        }
                    }
                }

            }
            return files;
        }
        //public void UpdateData(Component component)
        //{
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        string query =
        //            "update AgentMasterWiseComponents set nvcExePath=@nvcExePath,nvcCmdParam=@nvcCmdParam,bitIsRunAsService=@bitIsRunAsService,nvcServiceName=@nvcServiceName,intPriority=@intPriority,nvcRemarks=@nvcRemarks," +
        //            "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
        //        using (var command = new SqlCommand(query, connection))
        //        {
        //            command.Parameters.AddWithValue("@intId", component.Id);
        //            //command.Parameters.AddWithValue("@intComponentType", component.ComponentType);
        //            //command.Parameters.AddWithValue("@intInstanceId", component.InstanceId);
        //            command.Parameters.AddWithValue("@nvcExePath", component.ExePath);
        //            command.Parameters.AddWithValue("@nvcCmdParam", component.CmdParam);
        //            command.Parameters.AddWithValue("@bitIsRunAsService", component.IsRunAsService);
        //            command.Parameters.AddWithValue("@nvcServiceName", component.ServiceName);
        //            command.Parameters.AddWithValue("@intPriority", component.Priority);
        //            command.Parameters.AddWithValue("@nvcRemarks", component.Remarks);
        //            command.Parameters.AddWithValue("@dtmUpdatedOn", component.DtmUpdationDate);
        //            command.Parameters.AddWithValue("@intUpdatedBy", component.IntUpdatedBy);
        //            connection.Open();
        //            command.ExecuteNonQuery();
        //        }

        //    }
        //}
        //public Component GetComponentById(int Id)
        //{
        //    var component = new Component();
        //    using (var connection = new SqlConnection(_connectionString))
        //    {
        //        string query = "SELECT intId,intAgentId,intInstanceId,intComponentType,nvcExePath,nvcCmdParam,bitIsRunAsService,nvcServiceName" +
        //            ",intPriority,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy from AgentMasterWiseComponents where intId=@intId";
        //        using (var command = new SqlCommand(query, connection))
        //        {
        //            command.Parameters.AddWithValue("@intId", Id);
        //            connection.Open();
        //            using (var reader = command.ExecuteReader())
        //            {
        //                while (reader.Read())
        //                {
        //                    component.Id = reader.GetInt32(reader.GetOrdinal("intId"));
        //                    component.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
        //                    component.ComponentType = reader.GetInt32(reader.GetOrdinal("intComponentType"));
        //                    component.ExePath = reader.GetString(reader.GetOrdinal("nvcExePath"));
        //                    component.CmdParam = reader.GetString(reader.GetOrdinal("nvcCmdParam"));
        //                    component.InstanceId = reader.GetInt32(reader.GetOrdinal("intInstanceId"));
        //                    component.IsRunAsService = reader.GetBoolean(reader.GetOrdinal("bitIsRunAsService"));
        //                    component.ServiceName = reader.GetString(reader.GetOrdinal("nvcServiceName"));
        //                    component.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
        //                    component.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
        //                    component.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
        //                    component.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
        //                    component.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
        //                    component.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
        //                                               : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
        //                    component.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
        //                    component.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));

        //                }
        //            }
        //        }

        //    }
        //    return component;
        //}
        public void UpdateIsDelete(AgentwiseFiles map)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "update AgentToFileMappingMaster set IsDeleted=@IsDeleted,nvcRemarks=@nvcRemarks," +
                    "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", map.Id);
                    command.Parameters.AddWithValue("@IsDeleted", map.IsDeleted);
                    command.Parameters.AddWithValue("@nvcRemarks", map.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", map.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", map.IntUpdatedBy);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

            }
        }
        public void UpdateIsActive(AgentwiseFiles map)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "update AgentToFileMappingMaster set IsActive=@IsActive,nvcRemarks=@nvcRemarks," +
                    "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", map.Id);
                    command.Parameters.AddWithValue("@IsActive", map.IsActive);
                    command.Parameters.AddWithValue("@nvcRemarks", map.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", map.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", map.IntUpdatedBy);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

            }
        }
        public List<FileDropDown> GetFileDropDowmList()
        {
            var files = new List<FileDropDown>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT  intId , nvcFileName FROM FileInfoMaster where isActive=1 and isDeleted=0 ";
                using (var command = new SqlCommand(query, connection))
                {
                  
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            FileDropDown file = new FileDropDown();
                            file.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                            file.Name = reader.GetString(reader.GetOrdinal("nvcFileName"));
                            
                            files.Add(file);
                        }
                    }
                }

            }
            return files;
        }
    }
}




using Microsoft.EntityFrameworkCore;
using LoginSignupCore.Models;
using Microsoft.EntityFrameworkCore.Design;
using LoginSignupCore.Global;

namespace LoginSignupCore.Data
{
	public class ApplicationDbContext:DbContext
	{
		public ApplicationDbContext(DbContextOptions<ApplicationDbContext> Options):base(Options)
		{
		}

		public DbSet<RegisterViewModel> Accounts { get; set; }

        public DbSet<AlertThreshold> AlertThresholds { get; set; }

		public DbSet<ComponentMaster> ComponentMasters { get; set; }

		public DbSet<ComponentParameter> ComponentParameters { get; set; }

		public DbSet<InstanceMaster> InstanceMasters { get; set; }

        public DbSet<AgentSiteMonitoringData> AgentSiteMonitoringDatas { get; set; }

        public DbSet<BrokerMaster> BrokerMasters { get; set; }

        public DbSet<BrokerSites> BrokerSitess { get; set; }

        public virtual DbSet<AgentSiteMonitoringData> AgentSiteMonitoringData { get; set; }

        public virtual DbSet<BrokerMaster> BrokerMaster { get; set; }

        public virtual DbSet<BrokerSites> BrokerSites { get; set; }

        public virtual DbSet<VwComponentInstanceBrokerWiseData> VwComponentInstanceBrokerWiseData { get; set; }

        public virtual DbSet<VwInfoStatsData> VwInfoStatsData { get; set; }

        public virtual DbSet<VwComponentParameter> VwComponentParameter { get; set; }

        public virtual DbSet<VwAlertThreshold> VwAlertThreshold { get; set; }

        public virtual DbSet<VwInstanceMaster> VwInstanceMaster { get; set; }
        public virtual DbSet<CTCLTimer> CTCLTimer { get; set; }

        public DbSet<AgentMaster> AgentMaster { get; set; }
        public class ApplicationDbContextFactory : IDesignTimeDbContextFactory<ApplicationDbContext>
		{
			public ApplicationDbContext CreateDbContext(string[] args)
			{
				var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
				optionsBuilder.UseSqlServer(Config.connectionString);

				return new ApplicationDbContext(optionsBuilder.Options);
			}
		}
	}
}




using Microsoft.EntityFrameworkCore;
using LoginSignupCore.Models;
using Microsoft.EntityFrameworkCore.Design;
using LoginSignupCore.Global;

namespace LoginSignupCore.Data
{
	public class ApplicatonDBContext:DbContext
	{
		public ApplicatonDBContext(DbContextOptions<ApplicatonDBContext> Options):base(Options)
		{
		}

		public DbSet<RegisterViewModel> Accounts { get; set; }

        public DbSet<AlertThreshold> AlertThresholds { get; set; }

		public DbSet<ComponentMaster> ComponentMasters { get; set; }

		public DbSet<ComponentParameter> ComponentParameters { get; set; }

		public DbSet<InstanceMaster> InstanceMasters { get; set; }

        public DbSet<AgentSiteMonitoringData> AgentSiteMonitoringDatas { get; set; }

        public DbSet<BrokerMaster> BrokerMasters { get; set; }

        public DbSet<BrokerSites> BrokerSitess { get; set; }

        public virtual DbSet<AgentSiteMonitoringData> AgentSiteMonitoringData { get; set; }

        public virtual DbSet<BrokerMaster> BrokerMaster { get; set; }

        public virtual DbSet<BrokerSites> BrokerSites { get; set; }

        public virtual DbSet<VwComponentInstanceBrokerWiseData> VwComponentInstanceBrokerWiseData { get; set; }

        public virtual DbSet<VwInfoStatsData> VwInfoStatsData { get; set; }

        public virtual DbSet<VwComponentParameter> VwComponentParameter { get; set; }

        public virtual DbSet<VwAlertThreshold> VwAlertThreshold { get; set; }

        public virtual DbSet<VwInstanceMaster> VwInstanceMaster { get; set; }

        public virtual DbSet<CTCLTimer> CTCLTimer { get; set; }

        public virtual DbSet<InfoMaster> InfoMaster { get; set; }

        public virtual DbSet<InfoStatistics> InfoStatistics { get; set; }

        public virtual DbSet<BrokerSiteCredentials> BrokerSiteCredentials { get; set; }

        public class ApplicationDbContextFactory : IDesignTimeDbContextFactory<ApplicatonDBContext>
		{
			public ApplicatonDBContext CreateDbContext(string[] args)
			{
				var optionsBuilder = new DbContextOptionsBuilder<ApplicatonDBContext>();
                optionsBuilder.UseSqlServer(Config.connectionString);


                return new ApplicatonDBContext(optionsBuilder.Options);
			}
		}
	}
}




using LoginSignupCore.Global;
using LoginSignupCore.Models;
using System.Data.SqlClient;

namespace LoginSignupCore.Data
{
    public class BrokerRepository
    {
        public BrokerMaster GetBrokerById(int id)
        {
            var broker = new BrokerMaster();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "Select id, isnull(NvcBrokerName,'') NvcBrokerName, IsActive  from BrokerMaster where id = @id";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@id", id);

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            broker.Id = reader.GetInt32(reader.GetOrdinal("id"));
                            broker.NvcBrokerName = reader.GetString(reader.GetOrdinal("NvcBrokerName"));
                            broker.IsActive = reader.GetInt32(reader.GetOrdinal("IsActive"));
                        }
                    }
                }

            }
            return broker;
        }
    }
}




using LoginSignupCore.Core;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models;
using System.Data.SqlClient;

namespace LoginSignupCore.Data
{
    public class BrokerSiteRepository
    {
        public (bool,string) InsertBrokerSiteData(BrokerSites brokerSites)
        {
            try
            {
                using var connection = new SqlConnection(Config.connectionString);
                string query =
                    "INSERT INTO BrokerSites(nvcSiteName,intBrokerId,nvcMasterFilePath,IsActive,IsDeleted,dtmCreationDate,intCreatedBy)" +
                    "VALUES (@nvcSiteName,@intBrokerId,@nvcMasterFilePath,@IsActive,@IsDeleted,@dtmCreationDate,@intCreatedBy)" +
                    "SELECT SCOPE_IDENTITY()";
                using var command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@nvcSiteName", brokerSites.NvcSiteName);
                command.Parameters.AddWithValue("@intBrokerId", brokerSites.IntBrokerId);
                command.Parameters.AddWithValue("@nvcMasterFilePath", brokerSites.NvcMasterFilePath);
                command.Parameters.AddWithValue("@IsActive", 1);
                command.Parameters.AddWithValue("@IsDeleted", 0);
                command.Parameters.AddWithValue("@dtmCreationDate", DateTime.Now.Date);
                command.Parameters.AddWithValue("@intCreatedBy", brokerSites.IntCreatedBy);
                connection.Open();
                object id = command.ExecuteScalar();
                if (id != null)
                {
                    _ = int.TryParse(id.ToString(), out int siteId);
                    if (siteId != 0)
                    {
                        int brokerId = brokerSites.IntBrokerId;
                        string masterPath = brokerSites.NvcMasterFilePath;

                        CoreProcess.agentSessionCache.AddOrUpdate(brokerId, siteId, masterPath);
                    }
                }
                Log.Info($"Broker Site Data Saved sucessfully");
                return (true, $"Broker Site Data Saved sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error($"Error while Inserting BrokerSite Data | {ex.Message}");
                return (false, $"Error while Inserting BrokerSite Data | {ex.Message}");
            }
        }
        public (bool, string) UpdateBrokerSiteData(BrokerSites brokerSites)
        {
            try
            {
                using var connection = new SqlConnection(Config.connectionString);
                string query = "update BrokerSites set nvcSiteName=@nvcSiteName,nvcMasterFilePath=@nvcMasterFilePath where id=@id";
                using var command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@nvcSiteName",brokerSites.NvcSiteName);
                command.Parameters.AddWithValue("@nvcMasterFilePath", brokerSites.NvcMasterFilePath);
                command.Parameters.AddWithValue("@id", brokerSites.Id);
                connection.Open();
                object id = command.ExecuteScalar();
                if (id != null)
                {
                    _ = int.TryParse(id.ToString(), out int siteId);
                    if (siteId != 0)
                    {
                        int brokerId = brokerSites.IntBrokerId;
                        string masterPath = brokerSites.NvcMasterFilePath;

                        CoreProcess.agentSessionCache.AddOrUpdate(brokerId, siteId, masterPath);
                    }
                }
                Log.Info($"Broker Site Data Saved sucessfully");
                return (true, $"Broker Site Data Saved sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error($"Error while Inserting BrokerSite Data | {ex.Message}");
                return (false, $"Error while Inserting BrokerSite Data | {ex.Message}");
            }

        }
        public BrokerSites GetBrokerSitesById(int id)
        {

            var site = new BrokerSites();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT id,nvcSiteName,intBrokerId,nvcMasterFilePath,IsActive,IsDeleted,intCreatedBy,dtmCreationDate,intUpdatedBy,dtmUpdationDate  FROM BrokerSites where id=" + id;
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", id);

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            site.Id = reader.GetInt32(reader.GetOrdinal("id"));
                            site.NvcSiteName = reader.GetString(reader.GetOrdinal("nvcSiteName"));
                            site.IntBrokerId = reader.GetInt32(reader.GetOrdinal("intBrokerId"));
                            site.NvcMasterFilePath = reader.GetString(reader.GetOrdinal("nvcMasterFilePath"));
                            site.IsActive = reader.GetInt32(reader.GetOrdinal("IsActive"));
                            site.IsDeleted = reader.GetInt32(reader.GetOrdinal("IsDeleted"));


                        }
                    }
                }

            }
            return site;
        }
    }
}





using CTCL.BinaryProtocol.Common.CTCL.Enum;
using LoginSignupCore.Global;
using LoginSignupCore.Models;
using System.Data.SqlClient;
using ComponentMaster = LoginSignupCore.Models.ComponentMaster;

namespace LoginSignupCore.Data
{
    public class ComponentMasterRepository
    {
        public void InsertComponentMasterData(ComponentMaster componentMaster)
        {
            using var connection = new SqlConnection(Config.connectionString);
            string query =
                "INSERT INTO ComponentMaster(intComponentId,nvcComponentName,numCpuThreshold,numRamThreshold,intPriority,dtmCreatedOn,intCreatedBy,bitIsActive,bitIsDelete)" +
                " VALUES (@intComponentId,@nvcComponentName,@numCpuThreshold,@numRamThreshold,@intPriority,@dtmCreatedOn,@intCreatedBy,@bitIsActive,@bitIsDelete)";
            using var command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("@intComponentId", componentMaster.IntComponentId);
            command.Parameters.AddWithValue("@nvcComponentName", componentMaster.NvcComponentName);
            command.Parameters.AddWithValue("@numCpuThreshold", componentMaster.CpuThreshold);
            command.Parameters.AddWithValue("@numRamThreshold", componentMaster.RamThreshold);
            command.Parameters.AddWithValue("@intPriority", componentMaster.IntPriority);
            command.Parameters.AddWithValue("@dtmCreatedOn", DateTime.Now.Date);
            command.Parameters.AddWithValue("@intCreatedBy", globals.User_ID);
            command.Parameters.AddWithValue("@bitIsActive", 1);
            command.Parameters.AddWithValue("@bitIsDelete", 0);
            connection.Open();
            command.ExecuteNonQuery();
        }
        public List<ComponentMaster> Get()
        {
            var components = new List<ComponentMaster>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intId,intComponentId,nvcComponentName,numCpuThreshold,numRamThreshold,intPriority,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy,bitIsActive,bitIsDelete" +
                    " from ComponentMaster where  bitIsDelete=@bitIsDelete";
                using var command = new SqlCommand(query, connection);

                command.Parameters.AddWithValue("@bitIsDelete", 0);
                connection.Open();
                using var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    ComponentMaster component = new ComponentMaster();
                    component.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                    component.IntComponentId = reader.GetInt32(reader.GetOrdinal("intComponentId"));
                    component.NvcComponentName = reader.GetString(reader.GetOrdinal("nvcComponentName"));
                    component.CpuThreshold = (double)reader.GetDecimal(reader.GetOrdinal("numCpuThreshold"));
                    component.RamThreshold = (double)reader.GetDecimal(reader.GetOrdinal("numRamThreshold"));
                    component.IntPriority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                    component.BitIsActive = reader.GetInt32(reader.GetOrdinal("bitIsActive"));
                    components.Add(component);
                }
            }
            return components;
        }
        public ComponentMaster GetcompById(int id)
        {
            var component = new ComponentMaster();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT intId,intComponentId,nvcComponentName,numCpuThreshold,numRamThreshold,intPriority,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy,bitIsActive,bitIsDelete from ComponentMaster where intId = @intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", id);

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            component.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                            component.IntComponentId = reader.GetInt32(reader.GetOrdinal("intComponentId"));
                            component.NvcComponentName = reader.GetString(reader.GetOrdinal("nvcComponentName"));
                            component.CpuThreshold = Convert.ToDouble(reader.GetDecimal(reader.GetOrdinal("numCpuThreshold")));
                            component.RamThreshold = Convert.ToDouble(reader.GetDecimal(reader.GetOrdinal("numRamThreshold")));
                            component.IntPriority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            component.BitIsActive = reader.GetInt32(reader.GetOrdinal("bitIsActive"));
                            component.BitIsDelete = reader.GetInt32(reader.GetOrdinal("bitIsDelete"));


                        }
                    }
                }

            }
            return component;
        }

        public int UpdateIsActiveData(ComponentMaster Master)
        {
            using (SqlConnection conn = new SqlConnection(Config.connectionString))
            {
                SqlCommand cmd = new SqlCommand("Update  ComponentMaster Set BitIsActive = @BitIsActive,DtmUpdatedOn =@DtmUpdatedOn,IntUpdatedBy =@IntUpdatedBy Where intId = @intId", conn);

                cmd.Parameters.AddWithValue("@intId", Master.Id);
                cmd.Parameters.AddWithValue("@BitIsActive", Master.BitIsActive);
                cmd.Parameters.AddWithValue("@DtmUpdatedOn", Master.DtmUpdatedOn);
                cmd.Parameters.AddWithValue("@IntUpdatedBy", Master.IntUpdatedBy);
                conn.Open();
                int rows = cmd.ExecuteNonQuery();
                return rows;
            }
        }
    }
}





using LoginSignupCore.Core;
using LoginSignupCore.Global;
using LoginSignupCore.Models;
using System.Data.SqlClient;
using ComponentMaster = LoginSignupCore.MasterCache.ComponentMaster;

namespace LoginSignupCore.Data
{
    public class ComponentRepository
    {
        public void InsertAgentWiseComponentData(Component component)
        {
            try
            {
                using var connection = new SqlConnection(Config.connectionString);
                string query =
                    "INSERT INTO AgentMasterWiseComponents(intAgentId,intComponentType,intInstanceId,nvcExePath,nvcCmdParam,bitIsRunAsService,nvcServiceName,intPriority,nvcRemarks," +
                    "dtmCreatedOn,intCreatedBy,IsActive,IsDeleted) VALUES (@intAgentId,@intComponentType,@intInstanceId,@nvcExePath,@nvcCmdParam,@bitIsRunAsService,@nvcServiceName,@intPriority,@nvcRemarks," +
                    "@dtmCreatedOn,@intCreatedBy,@IsActive,@IsDeleted)";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", component.AgentId);
                    command.Parameters.AddWithValue("@intComponentType", component.ComponentType);
                    command.Parameters.AddWithValue("@intInstanceId", component.InstanceId);
                    command.Parameters.AddWithValue("@nvcExePath", component.ExePath);
                    command.Parameters.AddWithValue("@nvcCmdParam", component.CmdParam);
                    command.Parameters.AddWithValue("@bitIsRunAsService", component.IsRunAsService);
                    command.Parameters.AddWithValue("@nvcServiceName", component.ServiceName);
                    command.Parameters.AddWithValue("@intPriority", component.Priority);
                    command.Parameters.AddWithValue("@nvcRemarks", component.Remarks);
                    command.Parameters.AddWithValue("@dtmCreatedOn", component.DtmCreationDate);
                    command.Parameters.AddWithValue("@intCreatedBy", component.IntCreatedBy);
                    command.Parameters.AddWithValue("@IsActive", 1);
                    command.Parameters.AddWithValue("@IsDeleted", 0);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

                ComponentMaster compMaster = new();
                compMaster.AgentId = component.AgentId;
                compMaster.BrokerId = component.BrokerId;
                compMaster.SiteId = component.SiteId;
                compMaster.ComponentId = component.ComponentType;
                compMaster.InstanceId = component.InstanceId;
                compMaster.ExePath = component.ExePath;
                compMaster.CmdParam = component.CmdParam;
                compMaster.IsRunAsService = component.IsRunAsService;
                compMaster.ServiceName = component.ServiceName;
                compMaster.Priority = component.Priority;
                compMaster.ComponentName = component.ComponentName;
                CoreProcess.agentSessionCache.AddOrUpdate(compMaster);
            }
            catch (Exception ex)
            {
                Log.Error($"Error while Mapping Agent with Component | {ex.Message}");
            }
        }
        public List<Component> GetAllComponentAgentWise(int agentID)
        {
            var components = new List<Component>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "SELECT a.intId,a.intAgentId,a.intInstanceId,a.intComponentType,a.nvcExePath,a.nvcCmdParam,a.bitIsRunAsService,a.nvcServiceName,b.intPriority,a.IsActive,a.IsDeleted,a.nvcRemarks,a.dtmCreatedOn,a.intCreatedBy,a.dtmUpdatedOn,a.intUpdatedBy,b.nvcComponentName from AgentMasterWiseComponents a JOIN ComponentMaster b on b.intComponentId=a.intComponentType where a.intAgentId=@intAgentId and a.IsDeleted=0 and b.bitIsDelete=0";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intAgentId", agentID);
                   

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            Component component = new Component();
                            component.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                            component.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            component.ComponentType = reader.GetInt32(reader.GetOrdinal("intComponentType"));
                            component.ExePath = reader.GetString(reader.GetOrdinal("nvcExePath"));
                            component.CmdParam = reader.GetString(reader.GetOrdinal("nvcCmdParam"));
                            component.ComponentName = reader.GetString(reader.GetOrdinal("nvcComponentName"));
                            component.InstanceId = reader.GetInt32(reader.GetOrdinal("intInstanceId"));
                            component.IsRunAsService = reader.GetBoolean(reader.GetOrdinal("bitIsRunAsService"));
                            component.ServiceName = reader.GetString(reader.GetOrdinal("nvcServiceName"));
                            component.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            component.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            component.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            component.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            component.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            component.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            component.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            component.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                            components.Add(component);
                        }
                    }
                }

            }
            return components;
        }
        public void UpdateData(Component component)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "update AgentMasterWiseComponents set nvcExePath=@nvcExePath,nvcCmdParam=@nvcCmdParam,bitIsRunAsService=@bitIsRunAsService,nvcServiceName=@nvcServiceName,intPriority=@intPriority,nvcRemarks=@nvcRemarks," +
                    "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", component.Id);
                    //command.Parameters.AddWithValue("@intComponentType", component.ComponentType);
                    //command.Parameters.AddWithValue("@intInstanceId", component.InstanceId);
                    command.Parameters.AddWithValue("@nvcExePath", component.ExePath);
                    command.Parameters.AddWithValue("@nvcCmdParam", component.CmdParam);
                    command.Parameters.AddWithValue("@bitIsRunAsService", component.IsRunAsService);
                    command.Parameters.AddWithValue("@nvcServiceName", component.ServiceName);
                    command.Parameters.AddWithValue("@intPriority", component.Priority);
                    command.Parameters.AddWithValue("@nvcRemarks", component.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", component.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", component.IntUpdatedBy);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

            }
        }
        public Component GetComponentById(int Id)
        {
            var component = new Component();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                //string query = "SELECT intId,intAgentId,intInstanceId,intComponentType,nvcExePath,nvcCmdParam,bitIsRunAsService,nvcServiceName" +
                //    ",intPriority,IsActive,IsDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy,dtmUpdatedOn,intUpdatedBy from AgentMasterWiseComponents where intId=@intId";

                string query=   "select a.intId,a.intAgentId,a.intComponentType,a.intInstanceId,a.nvcExePath,a.nvcCmdParam,a.bitIsRunAsService," +
                                "a.nvcServiceName ,a.intPriority,a.IsActive,a.IsDeleted,a.nvcRemarks,a.dtmCreatedOn,a.intCreatedBy,a.dtmUpdatedOn,a.intUpdatedBy,c.nvcComponentName from AgentMasterWiseComponents a INNER JOIN ComponentMaster  c " +
                                "ON a.intComponentType = c.intComponentId"+
                                " where a.intId=@intId and a.IsDeleted = 0";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", Id);
                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            component.Id = reader.GetInt32(reader.GetOrdinal("intId"));
                            component.AgentId = reader.GetInt32(reader.GetOrdinal("intAgentId"));
                            component.ComponentType = reader.GetInt32(reader.GetOrdinal("intComponentType"));
                            component.ExePath = reader.GetString(reader.GetOrdinal("nvcExePath"));
                            component.CmdParam = reader.GetString(reader.GetOrdinal("nvcCmdParam"));
                            component.InstanceId = reader.GetInt32(reader.GetOrdinal("intInstanceId"));
                            component.IsRunAsService = reader.GetBoolean(reader.GetOrdinal("bitIsRunAsService"));
                            component.ServiceName = reader.GetString(reader.GetOrdinal("nvcServiceName"));
                            component.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            component.IsActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsActive")));
                            component.IsDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("IsDeleted")));
                            component.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            component.ComponentName = reader.GetString(reader.GetOrdinal("nvcComponentName"));
                            component.DtmCreationDate = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            component.DtmUpdationDate = (reader.IsDBNull(reader.GetOrdinal("dtmUpdatedOn")) ? DateTime.MinValue
                                                       : reader.GetDateTime(reader.GetOrdinal("dtmUpdatedOn")));
                            component.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            component.IntUpdatedBy = reader.IsDBNull(reader.GetOrdinal("intUpdatedBy")) ? -1 : reader.GetInt32(reader.GetOrdinal("intUpdatedBy"));
                            
                        }
                    }
                }

            }
            return component;
        }
        public void UpdateIsDelete(Component component)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "update AgentMasterWiseComponents set IsDeleted=@IsDeleted,nvcRemarks=@nvcRemarks," +
                    "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", component.Id);
                    //command.Parameters.AddWithValue("@intComponentType", component.ComponentType);
                    //command.Parameters.AddWithValue("@intInstanceId", component.InstanceId);
                    command.Parameters.AddWithValue("@IsDeleted", component.IsDeleted);
                    command.Parameters.AddWithValue("@nvcRemarks", component.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", component.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", component.IntUpdatedBy);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

            }
        }
        public void UpdateIsActive(Component component)
        {
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query =
                    "update AgentMasterWiseComponents set IsActive=@IsActive,nvcRemarks=@nvcRemarks," +
                    "intUpdatedBy=@intUpdatedBy,dtmUpdatedOn=@dtmUpdatedOn where intId=@intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", component.Id);
                    //command.Parameters.AddWithValue("@intComponentType", component.ComponentType);
                    //command.Parameters.AddWithValue("@intInstanceId", component.InstanceId);
                    command.Parameters.AddWithValue("@IsActive", component.IsActive);
                    command.Parameters.AddWithValue("@nvcRemarks", component.Remarks);
                    command.Parameters.AddWithValue("@dtmUpdatedOn", component.DtmUpdationDate);
                    command.Parameters.AddWithValue("@intUpdatedBy", component.IntUpdatedBy);
                    connection.Open();
                    command.ExecuteNonQuery();
                }

            }
        }
        public List<ComponentDropDown> GetComponentDropDowmList(int agentId)
        {
            var comps = new List<ComponentDropDown>();
            using (var connection = new SqlConnection(Config.connectionString))
            {
                string query = "select intComponentId , nvcComponentName,intPriority from ComponentMaster where intComponentId  not in (select intComponentType from AgentMasterWiseComponents where intAgentId="+ agentId+") and bitIsActive=1 and bitIsDelete=0";
                using (var command = new SqlCommand(query, connection))
                {

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            ComponentDropDown comp = new ComponentDropDown();
                            comp.Id = reader.GetInt32(reader.GetOrdinal("intComponentId"));
                            comp.Name = reader.GetString(reader.GetOrdinal("nvcComponentName"));
                            comp.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            comps.Add(comp);
                        }
                    }
                }

            }
            return comps;
        }
    }
}





using CTCL.BinaryProtocol.Common.CTCL.Enum;
using LoginSignupCore.Global;
using LoginSignupCore.Models;
using System.Data.SqlClient;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace LoginSignupCore.Data
{
    public class FileRepository
    {
        private readonly string _connectionString = Config.connectionString;

        public List<FileMaster> GetAllFiles()
        {
            var file = new List<FileMaster>();
            using (var connection = new SqlConnection(_connectionString))
            {
                string query = "SELECT intId,intSegmentId,intFileType,nvcFileName,intPriority,isUploadBeforeBod,isActive,isDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy from FileInfoMaster where isDeleted = 0";
                using (var cmd = new SqlCommand(query, connection))
                {
                    connection.Open();
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            FileMaster fileMaster = new FileMaster();
                            fileMaster.id = reader.GetInt32(reader.GetOrdinal("intId"));
                            fileMaster.SegmentId = (CTCL_ExchangeIdentifier)reader.GetInt32(reader.GetOrdinal("intSegmentId"));
                            fileMaster.FileType = reader.GetInt32(reader.GetOrdinal("intFileType"));
                            fileMaster.FileName = reader.GetString(reader.GetOrdinal("nvcFileName"));
                            fileMaster.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            fileMaster.UploadBeforeBod = reader.GetBoolean(reader.GetOrdinal("isUploadBeforeBod"));
                            fileMaster.isActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("isActive")));
                            fileMaster.isDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("isDeleted")));
                            fileMaster.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            fileMaster.IntCreatedOn = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            fileMaster.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));
                            file.Add(fileMaster);
                        }
                    }

                }
            }
            return file;
        }

        public FileMaster GetFileById(int id)
        {
            var fileMaster = new FileMaster();
            using (var connection = new SqlConnection(_connectionString))
            {
                string query = "SELECT intId,intSegmentId,intFileType,nvcFileName,intPriority,nvcDestinationPath,isUploadBeforeBod,isActive,isDeleted,nvcRemarks,dtmCreatedOn,intCreatedBy from FileInfoMaster where intId = @intId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@intId", id);

                    connection.Open();
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            fileMaster.id = reader.GetInt32(reader.GetOrdinal("intId"));
                            fileMaster.SegmentId = (CTCL_ExchangeIdentifier)reader.GetInt32(reader.GetOrdinal("intSegmentId"));
                            fileMaster.FileType = reader.GetInt32(reader.GetOrdinal("intFileType"));
                            fileMaster.FileName = reader.GetString(reader.GetOrdinal("nvcFileName"));
                            fileMaster.Priority = reader.GetInt32(reader.GetOrdinal("intPriority"));
                            fileMaster.nvcDestinationPath = reader.GetString(reader.GetOrdinal("nvcDestinationPath"));
                            fileMaster.UploadBeforeBod = reader.GetBoolean(reader.GetOrdinal("isUploadBeforeBod"));
                            fileMaster.isActive = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("isActive")));
                            fileMaster.isDeleted = Convert.ToInt32(reader.GetBoolean(reader.GetOrdinal("isDeleted")));
                            fileMaster.Remarks = reader.GetString(reader.GetOrdinal("nvcRemarks"));
                            fileMaster.IntCreatedOn = reader.GetDateTime(reader.GetOrdinal("dtmCreatedOn"));
                            fileMaster.IntCreatedBy = reader.GetInt32(reader.GetOrdinal("intCreatedBy"));

                        }
                    }
                }

            }
            return fileMaster;
        }
        public void InsertFiles(FileMaster fileMaster)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                string query = "Insert Into FileInfoMaster(intSegmentId,intFileType,nvcFileName,intPriority,isUploadBeforeBod,nvcDestinationPath,isActive,isDeleted,nvcRemarks" +
                    ",dtmCreatedOn,intCreatedBy) Values " +
                    "(@intSegmentId,@intFileType,@nvcFileName,@intPriority,@isUploadBeforeBod,@nvcDestinationPath,@isActive,@isDeleted,@nvcRemarks,@dtmCreatedOn" +
                    ",@intCreatedBy)";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@intSegmentId", fileMaster.SegmentId);
                    cmd.Parameters.AddWithValue("@intFileType", fileMaster.FileType);
                    cmd.Parameters.AddWithValue("@nvcFileName", fileMaster.FileName);
                    cmd.Parameters.AddWithValue("@intPriority", fileMaster.Priority);
                    cmd.Parameters.AddWithValue("@isUploadBeforeBod", fileMaster.UploadBeforeBod);
                    cmd.Parameters.AddWithValue("@nvcDestinationPath", fileMaster.nvcDestinationPath);
                    cmd.Parameters.AddWithValue("@isActive", fileMaster.isActive);
                    cmd.Parameters.AddWithValue("@isDeleted", fileMaster.isDeleted);
                    cmd.Parameters.AddWithValue("@nvcRemarks", fileMaster.Remarks);
                    cmd.Parameters.AddWithValue("@dtmCreatedOn", fileMaster.IntCreatedOn);
                    cmd.Parameters.AddWithValue("@intCreatedBy", fileMaster.IntCreatedBy);
                    connection.Open();
                    cmd.ExecuteNonQuery();

                }
            }
        }

        public int Delete(FileMaster fileMaster)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                SqlCommand cmd = new SqlCommand("Update  FileInfoMaster Set isDeleted = @isDeleted,nvcRemarks =@nvcRemarks,dtmUpdatedOn =@dtmUpdatedOn,intUpdatedBy =@intUpdatedBy Where intId = @intId", conn);

                cmd.Parameters.AddWithValue("@intId", fileMaster.id);
                cmd.Parameters.AddWithValue("@isDeleted", fileMaster.isDeleted);
                cmd.Parameters.AddWithValue("@nvcRemarks", fileMaster.Remarks);
                cmd.Parameters.AddWithValue("@dtmUpdatedOn", fileMaster.UpdatedOn);
                cmd.Parameters.AddWithValue("@intUpdatedBy", fileMaster.UpdatedBy);
                conn.Open();
                int rows = cmd.ExecuteNonQuery();
                return rows;
            }
        }


        public int UpdateIsActiveData(FileMaster fileMaster)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                SqlCommand cmd = new SqlCommand("Update  FileInfoMaster Set isActive = @isActive,nvcRemarks =@nvcRemarks,dtmUpdatedOn =@dtmUpdatedOn,intUpdatedBy =@intUpdatedBy Where intId = @intId", conn);

                cmd.Parameters.AddWithValue("@intId", fileMaster.id);
                cmd.Parameters.AddWithValue("@isActive", fileMaster.isActive);
                cmd.Parameters.AddWithValue("@nvcRemarks", fileMaster.Remarks);
                cmd.Parameters.AddWithValue("@dtmUpdatedOn", fileMaster.UpdatedOn);
                cmd.Parameters.AddWithValue("@intUpdatedBy", fileMaster.UpdatedBy);
                conn.Open();
                int rows = cmd.ExecuteNonQuery();
                return rows;
            }
        }

        public void Update(FileMaster fileMaster)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                string query = "Update FileInfoMaster SET nvcFileName = @nvcFileName,nvcDestinationPath = @nvcDestinationPath, isActive =@isActive,dtmUpdatedOn =@dtmUpdatedOn" +
                    ",intUpdatedBy = @intUpdatedBy ,nvcRemarks =@nvcRemarks WHERE intId = @intId ";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("intid", fileMaster.id);
                    cmd.Parameters.AddWithValue("@nvcFileName", fileMaster.FileName);
                    cmd.Parameters.AddWithValue("@nvcDestinationPath", fileMaster.nvcDestinationPath);
                    cmd.Parameters.AddWithValue("@isActive", fileMaster.isActive);
                    cmd.Parameters.AddWithValue("@dtmUpdatedOn", fileMaster.UpdatedOn);
                    cmd.Parameters.AddWithValue("@intUpdatedBy", fileMaster.UpdatedBy);
                    cmd.Parameters.AddWithValue("@nvcRemarks", fileMaster.Remarks);
                    connection.Open();
                    cmd.ExecuteNonQuery();

                }
            }

        }

    }
}



namespace ConsumerDBComponent.MessageProcessor.Entity
{
    public class CMA_InfoMaster_forDb
    {
        public int infoID { get; set; }
        public int BrokerID { get; set; }
        public int SiteID { get; set; }
        public int ComponentID { get; set; }
        public int InstanceID { get; set; }
        public int ParamID { get; set; }
        public int ParamAttribute { get; set; }
        public int BrokerSiteInstanceID { get; set; }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsumerDBComponent.MessageProcessor.Entity
{
    public class CMA_InfoStatistics_forDB
    {
        public int infoID { get; set; }
        public int BrokerID { get; set; }
        public int SiteID { get; set; }
        public int ComponentID { get; set; }
        public int InstanceID { get; set; }
        public int ParamID { get; set; }
        public char Reference { get; set; }
        public char nvcValue { get; set; }
       
    }
}



using BinaryProtocol.Common;
using LoginSignupCore.Core;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Response;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Logging;
using System.Data;
using System.Security.Policy;

namespace LoginSignupCore.Global
{
    public static class CacheOnLoad
    {
        public static void LoadAllCacheData()
        {
            GetAgentMasterData();
            GetAgentWiseComponentMasterData();
            GetAgentWiseFileInfoMasterData();
            GetSiteWiseMasterData();
            GetComponentStatus();
            GetFileStatus();
            GetCompTechnicalInfo();
        }

        public static Response GetAgentMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentMaster");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Master Info not loaded.");
            }
            FillAgentMasterInfoData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Master Info loaded.");
        }
        private static Response FillAgentMasterInfoData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    AgentSessionInfo agentSessionInfo = new();
                    agentSessionInfo.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    agentSessionInfo.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    agentSessionInfo.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    agentSessionInfo.IP = dr["nvcInstanceIP"] == DBNull.Value ? "" : dr["nvcInstanceIP"].ToString();
                    agentSessionInfo.AgentName = dr["nvcAgentName"] == DBNull.Value ? "" : dr["nvcAgentName"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(agentSessionInfo);
                    CoreProcess.ipSessionCache.AddOrUpdate(agentSessionInfo);
                }
                return response.Set(StatusCode.Success, "Agent Master Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while fillingAgent Master Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Master Info Dictionary.");
            }
        }

        public static Response GetAgentWiseComponentMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentMasterWiseComponents");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Wise ComponentMaster Info not loaded.");
            }
            FillAgentWiseComponentMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Wise ComponentMaster Info loaded.");
        }
        private static Response FillAgentWiseComponentMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentMaster compMaster = new();
                    compMaster.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    compMaster.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    compMaster.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    compMaster.ComponentId = Convert.ToInt32(dr["intComponentType"] == DBNull.Value ? 0 : dr["intComponentType"]);
                    compMaster.InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]);
                    compMaster.ExePath = dr["nvcExePath"] == DBNull.Value ? "" : dr["nvcExePath"].ToString();
                    compMaster.CmdParam = dr["nvcCmdParam"] == DBNull.Value ? "" : dr["nvcCmdParam"].ToString();
                    compMaster.IsRunAsService = Convert.ToBoolean(dr["bitIsRunAsService"] == DBNull.Value ? 0 : dr["bitIsRunAsService"]);
                    compMaster.ServiceName = dr["nvcServiceName"] == DBNull.Value ? "" : dr["nvcServiceName"].ToString();
                    compMaster.Priority = Convert.ToInt32(dr["intPriority"] == DBNull.Value ? 0 : dr["intPriority"]);
                    compMaster.CpuThresholdLimit = Convert.ToDouble(dr["numCpuThreshold"] == DBNull.Value ? 0 : dr["numCpuThreshold"]);
                    compMaster.RamThresholdLimit = Convert.ToDouble(dr["numRamThreshold"] == DBNull.Value ? 0 : dr["numRamThreshold"]);
                    compMaster.ComponentName = dr["nvcComponentName"] == DBNull.Value ? "" : dr["nvcComponentName"].ToString();
                    compMaster.AgentName = dr["nvcAgentName"] == DBNull.Value ? "" : dr["nvcAgentName"].ToString();
                    compMaster.IsActive = Convert.ToBoolean(dr["IsActive"] == DBNull.Value ? 0 : dr["IsActive"]);
                    compMaster.IsDelete = Convert.ToBoolean(dr["IsDeleted"] == DBNull.Value ? 0 : dr["IsDeleted"]);
                    CoreProcess.agentSessionCache.AddOrUpdate(compMaster);
                }
                return response.Set(StatusCode.Success, "Agent Wise Component Master Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Agent Wise ComponentMaster Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Wise Component Master Info Dictionary.");
            }
        }

        public static Response GetAgentWiseFileInfoMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentToFileMappingMaster");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Wise File Info Master not loaded.");
            }
            FillAgentWiseFileInfoMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Wise File Info Master Info loaded.");
        }
        private static Response FillAgentWiseFileInfoMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    FileMasterInfo fileMasterInfo = new();
                    fileMasterInfo.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    fileMasterInfo.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    fileMasterInfo.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    fileMasterInfo.SegmentId = Convert.ToInt32(dr["intSegmentId"] == DBNull.Value ? 0 : dr["intSegmentId"]);
                    fileMasterInfo.FileType = Convert.ToInt32(dr["intFileType"] == DBNull.Value ? 0 : dr["intFileType"]);
                    fileMasterInfo.FileName = dr["nvcFileName"] == DBNull.Value ? "" : dr["nvcFileName"].ToString();
                    fileMasterInfo.Priority = Convert.ToInt32(dr["intPriority"] == DBNull.Value ? "" : dr["intPriority"]);
                    fileMasterInfo.IsUploadBeforeBOD = Convert.ToBoolean(dr["isUploadBeforeBod"] == DBNull.Value ? 0 : dr["isUploadBeforeBod"]);
                    fileMasterInfo.DestinationPath = dr["nvcDestinationPath"] == DBNull.Value ? "" : dr["nvcDestinationPath"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(fileMasterInfo);
                }
                return response.Set(StatusCode.Success, "Agent Wise File Info Master filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Agent Wise FileInfo Master cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Wise File Info Master Dictionary.");
            }
        }

        public static Response GetSiteWiseMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetBrokerSites");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Site Wise Master Path not loaded.");
            }
            FillSiteWiseMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Site Wise Master Path Info loaded.");
        }
        private static Response FillSiteWiseMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    int siteId = Convert.ToInt32(dr["id"] == DBNull.Value ? 0 : dr["id"]);
                    int brokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    string masterPath = dr["nvcMasterFilePath"] == DBNull.Value ? "" : dr["nvcMasterFilePath"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(brokerId, siteId, masterPath);
                }
                return response.Set(StatusCode.Success, "Site Wise Master Path filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Site Wise Master Path cache");
                return response.Set(StatusCode.Failure, "Failed to fill Site Wise Master Path Dictionary.");
            }
        }

        public static Response GetComponentStatus()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetComponentStatus");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Component Status not loaded.");
            }
            FillComponentStatusData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Component Status Info loaded.");
        }
        private static Response FillComponentStatusData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentStatus componentStatus = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        ComponentType = Convert.ToInt32(dr["intComponentId"] == DBNull.Value ? 0 : dr["intComponentId"]),
                        InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]),
                        ComponentState = Convert.ToInt32(dr["intComponentState"] == DBNull.Value ? 0 : dr["intComponentState"]),
                        TimeStamp = Convert.ToDateTime(dr["dtmUploadedOn"] == DBNull.Value ? 0 : dr["dtmUploadedOn"]),
                        IsSucessStatus = Convert.ToBoolean(dr["bitIsSucessStatus"] == DBNull.Value ? 0 : dr["bitIsSucessStatus"]),
                        Message = dr["nvcRemarks"] == DBNull.Value ? "" : dr["nvcRemarks"].ToString(),
                        RequestId = dr["nvcRequestId"] == DBNull.Value ? "" : dr["nvcRequestId"].ToString()
                    };

                    CoreProcess.agentSessionCache.AddOrUpdate(componentStatus);

                    char[] incrementingNumber = new char[14];
                    char[] Id = componentStatus.RequestId?.ToCharArray();

                    if(Id != null && Id.Length == 32)
                    {
                        Array.Copy(Id, 18, incrementingNumber, 0, incrementingNumber.Length);

                        string strId = new(incrementingNumber);
                        long nId = 0;

                        if (long.TryParse(strId, out long nGatewayONO1) && incrementingNumber.Length > 0)
                        {
                            nId = Convert.ToInt64(strId);
                        }

                        if (Config.Id < nId)
                        {
                            Config.Id = nId;
                        }
                    }
                }
                return response.Set(StatusCode.Success, "Component Status filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Component Status cache");
                return response.Set(StatusCode.Failure, "Failed to fill Component Status Dictionary.");
            }
        }

        public static Response GetFileStatus()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetFileStatus");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "File Status not loaded.");
            }
            FillFileStatusData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "File Status Info loaded.");
        }
        private static Response FillFileStatusData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    FileStatus fileStatus = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        FileType = Convert.ToInt32(dr["intFileType"] == DBNull.Value ? 0 : dr["intFileType"]),
                        Segment = Convert.ToInt32(dr["intSegment"] == DBNull.Value ? 0 : dr["intSegment"]),
                        FileName = dr["nvcFileName"] == DBNull.Value ? "" : dr["nvcFileName"].ToString(),
                        TimeStamp = Convert.ToDateTime(dr["dtmUploadedOn"] == DBNull.Value ? 0 : dr["dtmUploadedOn"]),
                        IsSucessStatus = Convert.ToBoolean(dr["bitIsSucessStatus"] == DBNull.Value ? 0 : dr["bitIsSucessStatus"]),
                        Message = dr["nvcRemarks"] == DBNull.Value ? "" : dr["nvcRemarks"].ToString()
                    };

                    CoreProcess.agentSessionCache.AddOrUpdate(fileStatus);
                }
                return response.Set(StatusCode.Success, "File Status filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling File Status cache");
                return response.Set(StatusCode.Failure, "Failed to fill File Status Dictionary.");
            }
        }

        public static Response GetCompTechnicalInfo()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetCompTechnicalInfo");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Comp Technical Info not loaded.");
            }
            FillCompTechnicalInfo(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Comp Technical Info loaded.");
        }
        private static Response FillCompTechnicalInfo(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentsTechnicalInfo componentsTechnicalInfo = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        ComponentId = Convert.ToInt32(dr["intComponentId"] == DBNull.Value ? 0 : dr["intComponentId"]),
                        InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]),
                        RAMUtilization = Convert.ToDouble(dr["numRamUtilization"] == DBNull.Value ? 0 : dr["numRamUtilization"]),
                        CPUUtilization = Convert.ToDouble(dr["numCpuUtilization"] == DBNull.Value ? 0 : dr["numCpuUtilization"]),
                        CPUHigh = Convert.ToDouble(dr["numCpuHigh"] == DBNull.Value ? 0 : dr["numCpuHigh"]),
                        CPULow = Convert.ToDouble(dr["numCpuLow"] == DBNull.Value ? 0 : dr["numCpuLow"]),
                        RAMHigh = Convert.ToDouble(dr["numRamHigh"] == DBNull.Value ? 0 : dr["numRamHigh"]),
                        RAMLow = Convert.ToDouble(dr["numRamLow"] == DBNull.Value ? 0 : dr["numRamLow"]),
                        Timestamp =(dr["dtmUpdatedOn"] == DBNull.Value ? "": dr["dtmUpdatedOn"]).ToString(),
                       
                    };
                    componentsTechnicalInfo.ComponentName = ((ComponentType)componentsTechnicalInfo.ComponentId).ToString();
                    componentsTechnicalInfo.AgentName =  CoreProcess.agentSessionCache.GetSession(componentsTechnicalInfo.BrokerId, componentsTechnicalInfo.SiteId, componentsTechnicalInfo.AgentId).Item2?.AgentName??string.Empty;

                    CoreProcess.agentSessionCache.AddOrUpdate(componentsTechnicalInfo);
                }
                return response.Set(StatusCode.Success, "Comp Technical Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Comp Technical Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Comp Technical Info Dictionary.");
            }
        }
    }
}



using DBHelper.Common;
using System.Data;

namespace LoginSignupCore.Global
{
    public class CommonHelper
    {
        public static DataSet ExecuteProcedureForDataSet(string spName, Dictionary<string, object> dbParams = null)
        {
            try
            {
                var db = new DatabaseHelper(Config.connectionString, DataProviders.SqlServer);

                if (dbParams != null)
                {
                    foreach (var kv in dbParams)
                    {
                        db.AddParameter(kv.Key, kv.Value);
                    }
                }
                var dataSet = db.ExecuteDataSet(spName, CommandType.StoredProcedure, 900);
                db.ClearParameter();

                if (dataSet == null || dataSet.Tables.Count == 0)
                {
                    Log.Error(null, "No Records found in Sp->" + spName);
                    return null;
                }
                else
                {
                    //log

                    return dataSet;
                }

            }
            catch (Exception ex)
            {
                //log
                Log.Error(ex, "Exception Occured in Common Helper ExecuteProcedure ");
                return null;
            }
        }
    }
}



using BinaryProtocol.Common;
using DBHelper.Common;
using System.Data;

namespace LoginSignupCore.Global
{
    public class Config
    {
        public static string logfile;
        public static int logLevel;
        public static int logFileCount;
        public static string connectionString;
        public static long Id;
        public static string AppUrl;
        public static string WebSocketUrl;
        public static int dbTimeOut;

        static Config()
        {
            logfile = AppSettingHelper.Configuration["LogFile"];
            logLevel = Convert.ToInt32(AppSettingHelper.Configuration["LogLevel"]);
            logFileCount = Convert.ToInt32(AppSettingHelper.Configuration["LogFileCount"]);
            connectionString = AppSettingHelper.Configuration["ConnectionStrings:DBCTCL"];
            dbTimeOut = Convert.ToInt32(AppSettingHelper.Configuration["DBTimeOut"]);
        }
        public static void GetConfigurationSettings()
        {
            DatabaseHelper db;
            using (db = new DatabaseHelper(connectionString, DataProviders.SqlServer))
            {
                var dr = db.ExecuteReader("usp_GetConfigurationSettings", CommandType.StoredProcedure, Config.dbTimeOut);
                if (dr == null)
                {
                    return;
                }

                while (dr.Read())
                {
                    if ("APIIP" == dr[2].ToString())
                    {
                        AppUrl = dr["ConfigurationValue"].ToString();
                    }
                    else if("WSIP" == dr[2].ToString())
                    {
                        WebSocketUrl = dr["ConfigurationValue"].ToString();
                        if (WebSocketUrl != null)
                        {
                            Exchange.WebSocketServer.Global.Startup.ip = WebSocketUrl.Split(":")[1].Replace("/", "");
                            Exchange.WebSocketServer.Global.Startup.socketPort = Convert.ToInt32(WebSocketUrl.Split(":")[2]);
                        }
                    }
                }
            }
        }
    }
}




using BinaryProtocol.Common;
using LoginSignupCore.Core;

namespace LoginSignupCore.Global
{
    internal class Log
    {
        private static LogType _logType;
        internal Log(LogType logType)
        {
            _logType = logType;
        }

        internal void UpdateLogType(LogType logType)
        {
            _logType = logType;
        }

        internal static void Verbose(object Object, string message = "")
        {
            if (_logType > LogType.Verbose)
            {
                Object = null;
                message = null;
                return;
            }
            LogObject logObject = new LogObject(LogType.Verbose, message, Object);
            CoreProcess.SendToLogQueue(logObject);
        }

        internal static void Debug(object Object, string message = "")
        {
            if (_logType > LogType.Debug)
            {
                Object = null;
                message = null;
                return;
            }
            LogObject logObject = new LogObject(LogType.Debug, message, Object);
            CoreProcess.SendToLogQueue(logObject);
        }
        internal static void Info(string message = "")
        {
            if (_logType > LogType.Info)
            {
                message = null;
                return;
            }

            LogObject logObject = new LogObject(LogType.Info, message);
            CoreProcess.SendToLogQueue(logObject);
        }
        internal static void Warning(object Object, string message = "")
        {
            if (_logType > LogType.Warning)
            {
                Object = null;
                message = null;
                return;
            }
            LogObject logObject = new LogObject(LogType.Warning, message, Object);
            CoreProcess.SendToLogQueue(logObject);
        }
        internal static void Error(object Object, string message = "")
        {
            if (_logType > LogType.Error)
            {
                Object = null;
                message = null;
                return;
            }
            LogObject logObject = new LogObject(LogType.Error, message, Object);
            CoreProcess.SendToLogQueue(logObject);
        }

        internal static void Fatal(object Object, string message = "")
        {
            if (_logType > LogType.Fatal)
            {
                Object = null;
                message = null;
                return;
            }
            LogObject logObject = new LogObject(LogType.Error, message, Object);
            CoreProcess.SendToLogQueue(logObject);
        }
    }
}



using BinaryProtocol.Common;
using CTCL.BinaryProtocol.Common.CTCL.Common;
using CTCL.CacheManagement.Helper;
using Exchange.WebSocketServer.SocketManager;
using LoginSignupCore.Core;
using System.Collections.Concurrent;
using WebSocketSessionToken = Exchange.WebSocketServer.SocketManager.WebSocketSessionToken;

namespace LoginSignupCore.Global
{
    public class WebSocketIdWiseSession
    {
        private Dictionary<WebSocketSessionToken, UserSession> dictWebsocketWiseSession;
        private ConcurrentDictionary<WebSocketSessionToken, AgentSessionWs> dictWebsocketWiseSessionNew;

        public WebSocketIdWiseSession()
        {
            dictWebsocketWiseSession = new Dictionary<WebSocketSessionToken, UserSession>();
            dictWebsocketWiseSessionNew = new();
        }

        public Response AddOrUpdateWebSocketToken(UserSession userSession)
        {
            Response response = new Response();
            try
            {
                if (userSession.WebSocketSessionToken.webSocketSessionToken != null && userSession.WebSocketSessionToken.webSocketSessionToken != "")
                {
                    lock (dictWebsocketWiseSession)
                    {
                        if (!dictWebsocketWiseSession.TryAdd(userSession.WebSocketSessionToken, userSession))
                        {
                            CTCL_TimeStamp currentTime = new(DateTime.Now.Ticks);
                            userSession.CreatedAt = currentTime;
                            userSession.UpdatedAt = currentTime;
                            dictWebsocketWiseSession[userSession.WebSocketSessionToken] = userSession;
                            return response = response.Set(StatusCode.Success, "Successfully Updated WebSocketData in Dictionary", userSession);
                        }
                        else
                        {
                            return response = response.Set(StatusCode.Success, "Successfully Added WebSocketData in Dictionary", userSession);
                        }
                    }
                }
                else
                {
                    return response = response.Set(StatusCode.OMS_Error, "WebSocket ID cannot Be Null or Empty", userSession);
                }
            }
            catch (Exception ex)
            {
                return response = response.Set(StatusCode.OMS_Error, "Error Occured while Adding WebSocket data in classfile OmsWebSocketToken.cs,methodname = AddOrUpdateWebSocketToken", ex);
            }
        }

        public Response RemoveWebSocketId(WebSocketSessionToken webSocketSessionToken)
        {
            Response response = new Response();
            try
            {
                lock (dictWebsocketWiseSession)
                {
                    if (dictWebsocketWiseSession.Remove(webSocketSessionToken, out UserSession removedSession))
                    {
                        Log.Info("WebsocketWiseSession removed for webSocketSessionToken: " + webSocketSessionToken.webSocketSessionToken);

                        response = response.Set(StatusCode.Success, "Successfully Removed OrderID from WebSocket Session Token", removedSession);
                    }
                    else
                    {
                        response = response.Set(StatusCode.OMS_KeyNotFound, "Key Not Found while Removing WebSocket data in classfile OmsWebSocketToken.cs,methodname = RemoveOrderId", null);
                    }
                }

                return response;
            }
            catch (Exception ex)
            {
                return response = response.Set(StatusCode.OMS_Error, "Error Occurred in classfile OmsWebSocketToken.cs,methodname = RemoveOrderId", ex);
            }
        }

        public Response GetWebSocketData(WebSocketSessionToken webSocketSessionToken)
        {
            Response response = new Response();
            try
            {
                lock (dictWebsocketWiseSession)
                {
                    if (dictWebsocketWiseSession.TryGetValue(webSocketSessionToken, out UserSession _userSession))
                    {
                        return response.Set(StatusCode.Success, "Data Found Successfully :" + webSocketSessionToken.webSocketSessionToken + " .", _userSession);
                    }
                    else
                    {
                        return response.Set(StatusCode.OMS_KeyNotFound, "WebSocket ID Does not Exists:" + webSocketSessionToken.webSocketSessionToken + " .", _userSession);
                    }
                }
            }
            catch (Exception ex)
            {
                return response = response.Set(StatusCode.OMS_Error, "Error Occured while Retrieve WebSocket data in classfile OmsWebSocketToken.cs,methodname = GetWebSocketData", ex);
            }
        }

        public Dictionary<WebSocketSessionToken, UserSession> Get()
        {
            return dictWebsocketWiseSession;
        }

        public Response AddOrUpdate(WebSocketSessionToken webSocketSessionToken, AgentSessionWs agentSession)
        {
            Response response = new Response();
            try
            {
                if (!dictWebsocketWiseSessionNew.TryGetValue(webSocketSessionToken, out AgentSessionWs agentSession1))
                {
                    agentSession1 = new();
                    dictWebsocketWiseSessionNew.TryAdd(webSocketSessionToken, agentSession1);
                }
                CacheUpdateHelper.UpdateObjectReference(agentSession, agentSession1);
            }
            catch (Exception ex)
            {
                Log.Error($"Error Occured while Adding WebSocket data | {ex.Message}");
                return response.Set(StatusCode.OMS_Error, "Error Occured while Adding WebSocket data", ex);
            }
            return response.Set(StatusCode.Success, "Successfully Added WebSocketData in Dictionary");
        }
        public Response Remove(WebSocketSessionToken webSocketSessionToken)
        {
            Response response = new Response();
            try
            {
                if (dictWebsocketWiseSessionNew.TryGetValue(webSocketSessionToken, out AgentSessionWs agentSession1))
                {
                    var agentInfo = CoreProcess.agentSessionCache.GetSession(agentSession1.BrokerId, agentSession1.SiteId, agentSession1.AgentId);
                    if (agentInfo.Item1 && agentInfo.Item2 != null)
                    {
                        agentInfo.Item2.IsConnected = false;
                        agentInfo.Item2.Session = null;
                    }
                    dictWebsocketWiseSession.Remove(webSocketSessionToken);
                }
            }
            catch (Exception ex)
            {
                Log.Error($"Error Occured while Removing WebSocket data | {ex.Message}");
                return response.Set(StatusCode.OMS_Error, "Error Occured while Removing WebSocket data", ex);
            }
            return response.Set(StatusCode.Success, "Successfully Removed WebSocketData from Dictionary");
        }
    }

    public class AgentSessionWs
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
    }
}



using CTCL.CacheManagement.Helper;
using CTCL.CacheManagement.Structs;
using Exchange.WebSocketServer.SocketManager;
using LoginSignupCore.Core;
using LoginSignupCore.Models;
using LoginSignupCore.Models.Request;
using LoginSignupCore.Models.Response;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Security.Policy;
using SocketSession = Exchange.WebSocketServer.SocketManager.SocketSession;

namespace LoginSignupCore.MasterCache
{
    public class AgentSessionCache
    {
        private ConcurrentDictionary<Id, SiteIdWiseCache> _brokerIdWiseCache;
        public AgentSessionCache()
        {
            _brokerIdWiseCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id brokerId = new() { id = agentSessionInfo.BrokerId };
            if(!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id brokerId = new() { id = agentFunctionalInfo.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            Id brokerId = new() { id = fileStatus.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(fileStatus);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id brokerId = new() { id = componentStatus.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(componentStatus);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id brokerId = new() { id = fileMasterInfo.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(int brokerId, int siteId, string masterPath)
        {
            Id bId = new() { id = brokerId };
            if (!_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(bId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(siteId, masterPath);
        }
        public (bool, List<Component>) GetComponentMaster(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(siteId, agentId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileMasterInfo(siteId, agentId);
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetMasterPath(siteId);
            }
            return (false, null);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id bId = new() { id = compInitReq.BrokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int brokerId, int siteId, int agentId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetSession(siteId, agentId);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo(int brokerid, int siteid)
        {
            List<ComponentsTechnicalInfo> list = new();
            //for(int i=0; i<_brokerIdWiseCache.Count; i++)
            //{
                //var info = _brokerIdWiseCache.ElementAt(i).Value;
                if (_brokerIdWiseCache.TryGetValue(new() { id = brokerid }, out var info )&& info != null)
                {
                    list.AddRange(info.GetTechnicalInfo(siteid));
                }
           // }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id bId = new() { id = compInitReq.BrokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileStatus(siteId);
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentStatus(siteId);
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq,bool flag)
        {
            Id brokerId = new() { id = compInitReq.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public (bool, List<Component>) GetComponentMaster(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetComponentMaster(siteId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int brokerId, int siteId)
        {
            Id bId = new() { id = brokerId };
            if (_brokerIdWiseCache.TryGetValue(bId, out SiteIdWiseCache siteIdWiseCache) && siteIdWiseCache != null)
            {
                return siteIdWiseCache.GetFileMasterInfo(siteId);
            }
            return (false, null);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster,bool flag)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id brokerId = new() { id = componentMaster.BrokerId };
            if (!_brokerIdWiseCache.TryGetValue(brokerId, out SiteIdWiseCache siteIdWiseCache))
            {
                siteIdWiseCache = new();
                _brokerIdWiseCache.TryAdd(brokerId, siteIdWiseCache);
            }
            siteIdWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class SiteIdWiseCache
    {
        private ConcurrentDictionary<Id, AgentIdWiseCache> _siteIdWiseCache;
        public SiteIdWiseCache()
        {
            _siteIdWiseCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id siteId = new() { id = agentSessionInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id siteId = new() { id = agentFunctionalInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            Id siteId = new() { id = fileStatus.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(fileStatus);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id siteId = new() { id = componentStatus.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(componentStatus);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id siteId = new() { id = fileMasterInfo.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(int siteId, string masterPath)
        {
            Id sId = new() { id = siteId };
            if (!_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(sId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(masterPath);
        }
        public (bool, List<Component>) GetComponentMaster(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster(agentId);
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileMasterInfo(agentId);
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetMasterPath();
            }
            return (false, null);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.SiteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int siteId, int agentId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetSession(agentId);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo(int siteid)
        {
            List<ComponentsTechnicalInfo> list = new();
            //for (int i = 0; i < _siteIdWiseCache.Count; i++)
            //{
                //var info = _siteIdWiseCache.ElementAt(i).Value;
                if (_siteIdWiseCache.TryGetValue(new Id() {id= siteid },out var info)&& info != null)
                {
                    list.AddRange(info.GetTechnicalInfo());
                }
           //}
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.SiteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus(int siteId)
        {
            Id bId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(bId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileStatus();
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus(int siteId)
        {
            Id bId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(bId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentStatus();
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id siteId = new() { id = compInitReq.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.AddOrUpdate(compInitReq, flag);
        }
        public (bool, List<Component>) GetComponentMaster(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetComponentMaster();
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int siteId)
        {
            Id sId = new() { id = siteId };
            if (_siteIdWiseCache.TryGetValue(sId, out AgentIdWiseCache agentIdWiseCache) && agentIdWiseCache != null)
            {
                return agentIdWiseCache.GetFileMasterInfo();
            }
            return (false, null);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster,bool flag)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id siteId = new() { id = componentMaster.SiteId };
            if (!_siteIdWiseCache.TryGetValue(siteId, out AgentIdWiseCache agentIdWiseCache))
            {
                agentIdWiseCache = new();
                _siteIdWiseCache.TryAdd(siteId, agentIdWiseCache);
            }
            agentIdWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class AgentIdWiseCache
    {
        private ConcurrentDictionary<Id, ComponentWiseCache> _agentIdWiseSessionCache;
        public string MasterPath;
        private List<FileStatus> _fileStatusDetails;
        private List<ComponentStatus> _componentStatusDetails;
        public AgentIdWiseCache()
        {
            _agentIdWiseSessionCache = new();
            _fileStatusDetails = new();
            _componentStatusDetails = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            Id agentId = new() { id = agentSessionInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id agentId = new() { id = agentFunctionalInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id agentId = new() { id = fileMasterInfo.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(string masterPath)
        {
            MasterPath = masterPath;
        }
        public void AddOrUpdate(FileStatus fileStatus)
        {
            if (_fileStatusDetails != null)
            {
                _fileStatusDetails.Insert(0,fileStatus);
            }
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            if (_componentStatusDetails != null)
            {
                _componentStatusDetails.Insert(0,componentStatus);
            }
            Id agentId = new() { id = componentStatus.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(componentStatus);
        }
        public (bool, List<Component>) GetComponentMaster(int agentId)
        {
            Id sId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetComponentMaster();
            }
            return (false, null);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo(int agentId)
        {
            Id aId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(aId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetFileMasterInfo();
            }
            return (false, null);
        }
        public (bool, string) GetMasterPath()
        {
            return (true, MasterPath);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.AgentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession(int agentId)
        {
            Id aId = new() { id = agentId };
            if (_agentIdWiseSessionCache.TryGetValue(aId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetSession();
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _agentIdWiseSessionCache.Count; i++)
            {
                var info = _agentIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    list.AddRange(info.GetTechnicalInfo());
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id sId = new() { id = compInitReq.AgentId };
            if (_agentIdWiseSessionCache.TryGetValue(sId, out ComponentWiseCache componentWiseCache) && componentWiseCache != null)
            {
                return componentWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public List<FileStatus> GetFileStatus()
        {
            if(_fileStatusDetails != null)
            {
                return _fileStatusDetails;
            }
            return new();
        }
        public List<ComponentStatus> GetComponentStatus()
        {
            if (_componentStatusDetails != null)
            {
                return _componentStatusDetails;
            }
            return new();
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id agentId = new() { id = compInitReq.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public (bool,List<Component>) GetComponentMaster()
        {
            List<Component> componentList = new();
            if (_agentIdWiseSessionCache != null)
            {
                foreach(var componentwisecache in _agentIdWiseSessionCache.Values)
                {
                    if(componentwisecache!=null)
                    {
                        var resp = componentwisecache.GetComponentMaster();
                        if (resp.Item1)
                            componentList.AddRange(resp.Item2);

                    }
                };
            }
            return (true,componentList);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo()
        {
            if (_agentIdWiseSessionCache != null)
            {
                List<FileMasterInfo> fileList = new();
                foreach (var _segmentWiseFillCache in _agentIdWiseSessionCache.Values)
                {
                    if (_segmentWiseFillCache != null)
                    {
                        var res = _segmentWiseFillCache.GetFileMasterInfo();
                        if (res.Item1)
                        {
                            fileList.AddRange(res.Item2);
                        }
                    }
                };
                return (true, fileList);
            }
            return (false, new());
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id agentId = new() { id = componentMaster.AgentId };
            if (!_agentIdWiseSessionCache.TryGetValue(agentId, out ComponentWiseCache componentWiseCache))
            {
                componentWiseCache = new();
                _agentIdWiseSessionCache.TryAdd(agentId, componentWiseCache);
            }
            componentWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }
    }

    public class ComponentWiseCache
    {
        private AgentSessionInfo agentSessionInfo;
        private ConcurrentDictionary<Id, InstanceWiseCache> _componentIdWiseSessionCache;
        private ConcurrentDictionary<Id, FileTypeWiseFileCache> _segmentWiseFileCache;
        public ComponentWiseCache()
        {
            agentSessionInfo = new();
            _segmentWiseFileCache = new();
            _componentIdWiseSessionCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo1)
        {
            CacheUpdateHelper.UpdateObjectReference(agentSessionInfo1, agentSessionInfo);
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id componentId = new() { id = agentFunctionalInfo.ComponentId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(agentFunctionalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id componentId = new() { id = componentMaster.ComponentId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(componentMaster);
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id segmentId = new() { id = fileMasterInfo.SegmentId };
            if (!_segmentWiseFileCache.TryGetValue(segmentId, out FileTypeWiseFileCache fileTypeWiseFileCache))
            {
                fileTypeWiseFileCache = new();
                _segmentWiseFileCache.TryAdd(segmentId, fileTypeWiseFileCache);
            }
            fileTypeWiseFileCache.AddOrUpdate(fileMasterInfo);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id componentId = new() { id = componentStatus.ComponentType };
            if (_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                instanceWiseCache.AddOrUpdate(componentStatus);
            }
        }
        public (bool, List<Component>) GetComponentMaster()
        {
            List<Component> componentMasters = new();
            for(int i=0; i<_componentIdWiseSessionCache.Count; i++)
            {
                var data = _componentIdWiseSessionCache.ElementAt(i);
                if(data.Value != null)
                {
                    componentMasters.AddRange(data.Value.GetComponentMaster());
                }
            }
            return (true, componentMasters);
        }
        public (bool, List<FileMasterInfo>) GetFileMasterInfo()
        {
            List<FileMasterInfo> fileMaster = new();
            for (int i = 0; i < _segmentWiseFileCache.Count; i++)
            {
                var data = _segmentWiseFileCache.ElementAt(i);
                if (data.Value != null)
                {
                    fileMaster.AddRange(data.Value.GetFileMasterInfo());
                }
            }
            return (true, fileMaster);
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.CompId };
            if (_componentIdWiseSessionCache.TryGetValue(cId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                return instanceWiseCache.GetComponentMaster(compInitReq);
            }
            return (false, null);
        }
        public (bool, AgentSessionInfo) GetSession()
        {
            if(agentSessionInfo != null)
            {
                return (true, agentSessionInfo);
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _componentIdWiseSessionCache.Count; i++)
            {
                var info = _componentIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    var tecinfo = info.GetTechnicalInfo();
                    list.AddRange(tecinfo);
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.CompId };
            if (_componentIdWiseSessionCache.TryGetValue(cId, out InstanceWiseCache instanceWiseCache) && instanceWiseCache != null)
            {
                return instanceWiseCache.GetTechnicalInfo(compInitReq);
            }
            return (false, null);
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id componentId = new() { id = compInitReq.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.AddOrUpdate(compInitReq,flag);
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id componentId = new() { id = componentMaster.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.UpdateIsActiveFlag(componentMaster,flag);
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id componentId = new() { id = componentMaster.CompId };
            if (!_componentIdWiseSessionCache.TryGetValue(componentId, out InstanceWiseCache instanceWiseCache))
            {
                instanceWiseCache = new();
                _componentIdWiseSessionCache.TryAdd(componentId, instanceWiseCache);
            }
            instanceWiseCache.UpdateIsDeleteFlag(componentMaster, flag);
        }

    }

    public class InstanceWiseCache
    {
        private ConcurrentDictionary<Id, Component> _instanceIdWiseSessionCache;
        public InstanceWiseCache()
        {
            _instanceIdWiseSessionCache = new();
        }
        public void AddOrUpdate(ComponentsTechnicalInfo agentFunctionalInfo)
        {
            Id instanceId = new() { id = agentFunctionalInfo.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new()
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }

            //sets High CPU Utilization
            if(component.componentsTechnicalInfo.CPUHigh == 0)
            {
                agentFunctionalInfo.CPUHigh = agentFunctionalInfo.CPUUtilization;
            }
            else if(component.componentsTechnicalInfo.CPUHigh < agentFunctionalInfo.CPUUtilization)
            {
                agentFunctionalInfo.CPUHigh = agentFunctionalInfo.CPUUtilization;
            }

            //sets Low CPU Utilization
            if (component.componentsTechnicalInfo.CPULow == 0)
            {
                agentFunctionalInfo.CPULow = agentFunctionalInfo.CPUUtilization;
            }
            else if (component.componentsTechnicalInfo.CPULow > agentFunctionalInfo.CPUUtilization)
            {
                agentFunctionalInfo.CPULow = agentFunctionalInfo.CPUUtilization;
            }

            //sets High RAM Utilization
            if (component.componentsTechnicalInfo.RAMHigh == 0)
            {
                agentFunctionalInfo.RAMHigh = agentFunctionalInfo.RAMUtilization;
            }
            else if (component.componentsTechnicalInfo.RAMHigh < agentFunctionalInfo.RAMUtilization)
            {
                agentFunctionalInfo.RAMHigh = agentFunctionalInfo.RAMUtilization;
            }
            else
            {
                agentFunctionalInfo.RAMHigh = component.componentsTechnicalInfo.RAMHigh;
            }

            //sets Low RAM Utilization
            if (component.componentsTechnicalInfo.RAMLow == 0)
            {
                agentFunctionalInfo.RAMLow = agentFunctionalInfo.RAMUtilization;
            }
            else if (component.componentsTechnicalInfo.RAMLow > agentFunctionalInfo.RAMUtilization)
            {
                agentFunctionalInfo.RAMLow = agentFunctionalInfo.RAMUtilization;
            }
            else
            {
                agentFunctionalInfo.RAMLow = component.componentsTechnicalInfo.RAMLow;
            }

            CacheUpdateHelper.UpdateObjectReference(agentFunctionalInfo, component.componentsTechnicalInfo);
        }
        public void AddOrUpdate(ComponentMaster componentMaster)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new()
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
            CacheUpdateHelper.UpdateObjectReference(componentMaster, component.componentMaster);
        }
        public void AddOrUpdate(ComponentStatus componentStatus)
        {
            Id instanceId = new() { id = componentStatus.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component) && component != null)
            {
                component.status = componentStatus.ComponentState;
            }
        }
        public List<Component> GetComponentMaster()
        {
            List<Component> componentMasters = new();
            for(int i=0; i<_instanceIdWiseSessionCache.Count; i++)
            {
                var data = _instanceIdWiseSessionCache.ElementAt(i);
                if(data.Value != null && data.Value.componentMaster != null && data.Value.componentMaster.IsActive==true && data.Value.componentMaster.IsDelete == false)
                {
                    componentMasters.Add(data.Value);
                }
            }
            return componentMasters;
        }
        public (bool, ComponentMaster) GetComponentMaster(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(cId, out Component component) && component != null)
            {
                if(component.componentMaster != null)
                {
                    return (true, component.componentMaster);
                }
            }
            return (false, null);
        }
        public List<ComponentsTechnicalInfo> GetTechnicalInfo()
        {
            List<ComponentsTechnicalInfo> list = new();
            for (int i = 0; i < _instanceIdWiseSessionCache.Count; i++)
            {
                var info = _instanceIdWiseSessionCache.ElementAt(i).Value;
                if (info != null)
                {
                    if(info.componentsTechnicalInfo != null && info.componentsTechnicalInfo.InstanceId != 0 && info.componentsTechnicalInfo.ComponentId !=0)
                    {
                        list.Add(info.componentsTechnicalInfo);
                    }
                }
            }
            return list;
        }
        public (bool, ComponentsTechnicalInfo) GetTechnicalInfo(CompInitReq compInitReq)
        {
            Id cId = new() { id = compInitReq.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(cId, out Component component) && component != null)
            {
                if (component.componentMaster != null)
                {
                    return (true, component.componentsTechnicalInfo);
                }
            }
            return (false, null);
        }
        public void AddOrUpdate(CompInitReq compInitReq, bool flag)
        {
            Id instanceId = new() { id = compInitReq.InstanceId };
            if (!_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                component = new()
                {
                    componentsTechnicalInfo = new(),
                    componentMaster = new(),
                    isRequestSend= flag,
                };
                _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
            component.isRequestSend= flag;
        }
        public void UpdateIsActiveFlag(CompInitReq componentMaster, bool flag)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                if(component.componentMaster!=null)
                {
                    component.componentMaster.IsActive = flag;
                }
               
                //_instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
        }
        public void UpdateIsDeleteFlag(CompInitReq componentMaster, bool flag)
        {
            Id instanceId = new() { id = componentMaster.InstanceId };
            if (_instanceIdWiseSessionCache.TryGetValue(instanceId, out Component component))
            {
                if (component.componentMaster != null)
                {
                    component.componentMaster.IsDelete = flag;
                }

               // _instanceIdWiseSessionCache.TryAdd(instanceId, component);
            }
        }

    }

    public class FileTypeWiseFileCache
    {
        private ConcurrentDictionary<Id, FileMasterInfo> _fileTypeWiseFileCache;
        public FileTypeWiseFileCache()
        {
            _fileTypeWiseFileCache = new();
        }
        public void AddOrUpdate(FileMasterInfo fileMasterInfo)
        {
            Id fileId = new() { id = fileMasterInfo.FileType };
            if (!_fileTypeWiseFileCache.TryGetValue(fileId, out FileMasterInfo fileInfo))
            {
                fileInfo = new();
                _fileTypeWiseFileCache.TryAdd(fileId, fileInfo);
            }
            CacheUpdateHelper.UpdateObjectReference(fileMasterInfo, fileInfo);
        }
        public List<FileMasterInfo> GetFileMasterInfo()
        {
            List<FileMasterInfo> fileMaster = new();
            for (int i = 0; i < _fileTypeWiseFileCache.Count; i++)
            {
                var data = _fileTypeWiseFileCache.ElementAt(i);
                if (data.Value != null && data.Value != null)
                {
                    fileMaster.Add(data.Value);
                }
            }
            return fileMaster;
        }
    }

    public class AgentSessionInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public string IP;
        public string AgentName;
        public SocketSession Session;
        public bool IsConnected;
    }

    public class Component
    {
        public int status;
        public bool isRequestSend;
        public bool isenabled;
        public ComponentMaster componentMaster;
        public ComponentsTechnicalInfo componentsTechnicalInfo;
    }

    public class ComponentMaster
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public int ComponentId;
        public string AgentName;
        public string ComponentName;
        public int InstanceId;
        public string ExePath;
        public string CmdParam;
        public bool IsRunAsService;
        public string ServiceName;
        public int Priority;
        public double CpuThresholdLimit;
        public double RamThresholdLimit;
        public bool IsActive=true;
        public bool IsDelete=false;
    }

    public class ComponentsTechnicalInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public string AgentName;
        public string ComponentName;
        public int ComponentId;
        public int InstanceId;
        public double RAMUtilization;
        public double CPUUtilization;
        public double CPUHigh;
        public double CPULow;
        public double RAMHigh;
        public double RAMLow;
        public string Timestamp;
    }

    public class FileMasterInfo
    {
        public int BrokerId;
        public int SiteId;
        public int AgentId;
        public int SegmentId;
        public int FileType;
        public string FileName;
        public int Priority;
        public string DestinationPath;
        public bool IsUploadBeforeBOD;
    }
}



using CTCL.CacheManagement.Helper;
using System.Collections.Concurrent;

namespace LoginSignupCore.MasterCache
{
    public class IPSessionCache
    {
        private ConcurrentDictionary<IpInfo, AgentSessionInfo> _ipWiseCache;
        public IPSessionCache()
        {
            _ipWiseCache = new();
        }
        public void AddOrUpdate(AgentSessionInfo agentSessionInfo)
        {
            IpInfo ip = new() { ipInfo = agentSessionInfo.IP };
            if (!_ipWiseCache.TryGetValue(ip, out AgentSessionInfo agentSession))
            {
                agentSession = new();
                _ipWiseCache.TryAdd(ip, agentSession);
            }
            CacheUpdateHelper.UpdateObjectReference(agentSessionInfo, agentSession);
        }
        public (bool, AgentSessionInfo) Get(string ip)
        {
            IpInfo iP = new() { ipInfo = ip };
            if (_ipWiseCache.TryGetValue(iP, out AgentSessionInfo agentSessionInfo) && agentSessionInfo != null)
            {
                return (true, agentSessionInfo);
            }
            return (false, null);
        }
    }
    public struct IpInfo
    {
        public string ipInfo;
    }
}


using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LoginSignupCore.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Accounts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    firstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    lastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConfirmPassword = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Accounts", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Accounts");
        }
    }
}




// <auto-generated />
using LoginSignupCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoginSignupCore.Migrations
{
    [DbContext(typeof(ApplicatonDBContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoginSignupCore.Models.RegisterViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}




using Newtonsoft.Json;

namespace LoginSignupCore.Models.Others
{
    public class MsgHeader
    {
        [JsonProperty("messageCode")]
        public int MessageCode { get; set; }

        [JsonProperty("brokerId")]
        public int BrokerId { get; set; }

        [JsonProperty("siteId")]
        public int SiteId { get; set; }

        [JsonProperty("agentId")]
        public int AgentId { get; set; }
    }
}



using Newtonsoft.Json;

namespace LoginSignupCore.Models.Others
{
    public class StatusMessage : MsgHeader
    {
        [JsonProperty("isSucessStatus")]
        public bool IsSucessStatus { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }
    }
}


using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Request
{
    public class AgentHandshakeReq : MsgHeader
    {
        [JsonProperty("ip")]
        public string IP { get; set; }
    }
}




using Newtonsoft.Json;

namespace LoginSignupCore.Models.Request
{
    public class CompInitReq
    {
        [JsonProperty("brokerId")]
        public int BrokerId { get; set; }

        [JsonProperty("siteId")]
        public int SiteId { get; set; }

        [JsonProperty("agentId")]
        public int AgentId { get; set; }

        [JsonProperty("compId")]
        public int CompId { get; set; }

        [JsonProperty("instanceId")]
        public int InstanceId { get; set; }
    }
}





using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Request
{
    public class ComponentInitReq : MsgHeader
    {
        [JsonProperty("componentType")]
        public int ComponentType { get; set; }

        [JsonProperty("instanceId")]
        public int InstanceId { get; set; }

        [JsonProperty("isRunAsService")]
        public bool IsRunAsService { get; set; }

        [JsonProperty("requestId")]
        public string RequestId { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Request
{
    public class FileUploadReq : MsgHeader
    {
        [JsonProperty("requestId")]
        public string RequestId { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Request
{
    public class LoginRequest : MsgHeader
    {
        [JsonProperty("brokerId")]
        public int BrokerId { get; set; }

        [JsonProperty("siteId")]
        public int SiteId { get; set; }

        [JsonProperty("agentId")]
        public int AgentId { get; set; }
    }
}




using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class AgentHandshakeRes : MsgHeader
    {
        [JsonProperty("brokerId")]
        public int BrokerId { get; set; }

        [JsonProperty("siteId")]
        public int SiteId { get; set; }

        [JsonProperty("agentId")]
        public int AgentId { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class ComponentInfo : MsgHeader
    {
        [JsonProperty("data")]
        public List<ComponentInfoData> Data { get; set; }
    }

    public class ComponentInfoData
    {
        [JsonProperty("componentType")]
        public int ComponentType { get; set; }

        [JsonProperty("instanceId")]
        public int InstanceId { get; set; }

        [JsonProperty("executablePath")]
        public string ExecutablePath { get; set; }

        [JsonProperty("cmdParameters")]
        public string CmdParameters { get; set; }

        [JsonProperty("serviceName")]
        public string ServiceName { get; set; }

        [JsonProperty("priority")]
        public int Priority { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class ComponentStatus : StatusMessage
    {
        [JsonProperty("componentType")]
        public int ComponentType { get; set; }

        [JsonProperty("instanceId")]
        public int InstanceId { get; set; }

        [JsonProperty("componentState")]
        public int ComponentState { get; set; }

        [JsonProperty("timeStamp")]
        public DateTime TimeStamp { get; set; }

        [JsonProperty("requestId")]
        public string RequestId { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class ComponentTechincalInfo : MsgHeader
    {
        [JsonProperty("componentType")]
        public int ComponentType { get; set; }

        [JsonProperty("instanceId")]
        public int InstanceId { get; set; }

        [JsonProperty("cPUPercentage")]
        public double CPUPercentage { get; set; }
        [JsonProperty("rAMUsage")]
        public double RAMUsage { get; set; }

        [JsonProperty("timeStamp")]
        public DateTime TimeStamp { get; set; }
    }
}



using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class FileInfo : MsgHeader
    {
        [JsonProperty("masterPath")]
        public string MasterPath { get; set; }

        [JsonProperty("files")]
        public List<FilePathInfo> Files { get; set; }
    }

    public class FilePathInfo
    {
        [JsonProperty("fileName")]
        public string FileName { get; set; }

        [JsonProperty("filePriority")]
        public int FilePriority { get; set; }

        [JsonProperty("segment")]
        public int Segment { get; set; }

        [JsonProperty("fileType")]
        public int FileType { get; set; }

        [JsonProperty("isUploadBeforeBod")]
        public bool IsUploadBeforeBod { get; set; }

        [JsonProperty("destinationPath")]
        public string DestinationPath { get; set; }
    }
}


using LoginSignupCore.Models.Others;
using Newtonsoft.Json;

namespace LoginSignupCore.Models.Response
{
    public class FileStatus : StatusMessage
    {
        [JsonProperty("fileName")]
        public string FileName { get; set; }

        [JsonProperty("segment")]
        public int Segment { get; set; }

        [JsonProperty("fileType")]
        public int FileType { get; set; }

        [JsonProperty("timeStamp")]
        public DateTime TimeStamp { get; set; }
    }
}


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;

public partial class Account
{
    [Key]
    public int Id { get; set; }

    [Column("firstName")]
    public string FirstName { get; set; } = null!;

    [Column("lastName")]
    public string LastName { get; set; } = null!;

    public string Email { get; set; } = null!;

    public string Password { get; set; } = null!;

    public string ConfirmPassword { get; set; } = null!;
}


using Microsoft.AspNetCore.Mvc.ModelBinding;
using System.ComponentModel.DataAnnotations;

namespace LoginSignupCore.Models
{
    public partial class AgentMaster
    {
        public int AgentId { get; set; }
        [Required(ErrorMessage="AgentName required")]
        public string AgentName { get; set; }
        public string? SiteName { get; set; }
        public int BrokerId { get; set; }
        public int BrokerSiteId { get; set; }
        [Required(ErrorMessage = "nvcInstanceIP required")]
        public string nvcInstanceIP { get; set; }
        public int IsActive { get; set; }

        public int IsDeleted { get; set; }

        public int IntCreatedBy { get; set; }

        public DateTime? DtmCreationDate { get; set; }

        public int? IntUpdatedBy { get; set; }

        public DateTime? DtmUpdationDate { get; set; }
        public string Remarks { get; set; } 
    }
}


namespace LoginSignupCore.Models
{
    public class AgentMastersViewModel
    {
        public List<AgentMaster> Agents { get; set; } = new List<AgentMaster>();
        public AgentMaster Agent { get; set; } = new AgentMaster();
    }
}




using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;

public partial class AgentSiteMonitoringData
{
    public int Id { get; set; }

    public int IntBrokerId { get; set; }

    public int IntSiteId { get; set; }

    public int IntAttributeType { get; set; }

    public int? IntComponentId { get; set; }

    public int? IntInstanceId { get; set; }

    public int? IntParameterId { get; set; }

    public string? NvcComponentName { get; set; }

    public string NvcValue { get; set; } = null!;

    public DateTime DtmTimestamp { get; set; }

    public bool BitIsActive { get; set; }

    public bool BitIsDelete { get; set; }
}


namespace LoginSignupCore.Models
{
    public class AgentwiseFiles
    {
        public int Id { get; set; }
        public int AgentId { get; set; }
        public string AgentName { get; set; }
        public int BrokerId { get; set; }
        public int SiteId { get; set; }
        public int FileId { get; set; }
        public string FileName { get; set; }
        public int IsActive { get; set; }

        public int IsDeleted { get; set; }

        public int IntCreatedBy { get; set; }

        public DateTime DtmCreationDate { get; set; }

        public int? IntUpdatedBy { get; set; }

        public DateTime DtmUpdationDate { get; set; }
        public string Remarks { get; set; }
    }
}




namespace LoginSignupCore.Models
{
    public class AgentwiseFileViewModel
    {
        public List<AgentwiseFiles> Files { get; set; } = new List<AgentwiseFiles>();
        public AgentwiseFiles File { get; set; } = new AgentwiseFiles();
    }
}




using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models { 
   
    [Table("AlertThreshold")]
    public partial class AlertThreshold
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("id")]
        public int Id { get; set; }

        [Column("intParamID")]
        public int IntParamId { get; set; }

        [Column("intComponentId")]
        public int? IntComponentId { get; set; }

        [StringLength(64)]
        public string? ComponentName { get; set; }

        [Column("BrokerSiteID")]
        [StringLength(16)]
        public string? BrokerSiteId { get; set; }

        [Column("intThresholdValue")]
        public int IntThresholdValue { get; set; }

        [Column("intCreatedBy")]
        public int IntCreatedBy { get; set; }

        [Column("dtmCreatedOn")]
        public DateTime DtmCreatedOn { get; set; }

        [Column("iniUpdatedBy")]
        public int? IniUpdatedBy { get; set; }

        [Column("dtmUpdatedOn")]
        public DateTime? DtmUpdatedOn { get; set; }

        [Required]
        [Column("bitIsActive")]
        public int BitIsActive { get; set; }

        [Column("bitIsDelete")]
        public int BitIsDelete { get; set; }

        //[NotMapped]

        //public string intParamIdstring { get; set; }

        //[StringLength(3)]
        //[Unicode(false)]
        //public string ComponentId { get; set; }
        //[StringLength(64)]
        //public string ParameterName { get; set; }

    }
}



using LoginSignupCore.MasterCache;
using System.Text.Json.Serialization;

namespace LoginSignupCore.Models
{
    public class BODUploadComponent
    {
        
        public MasterCache.Component component { get; set; } = new MasterCache.Component();
        public List<LoginSignupCore.MasterCache.Component> Components { get; set; } = new List<MasterCache.Component>();
    }
}



using LoginSignupCore.MasterCache;

namespace LoginSignupCore.Models
{
    public class BODUploadFileView
    {
        public FileMasterInfo fileMasterInfo { get; set; } = new FileMasterInfo();
        public List<FileMasterInfo> fileMastersInfo { get; set; } = new List<FileMasterInfo>();
    }
}


using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;

public partial class BrokerMaster
{
    public int Id { get; set; }

    public string? NvcBrokerName { get; set; }

    public int IsActive { get; set; }

    public int IsDeleted { get; set; }

    public int IntCreatedBy { get; set; }

    public DateTime DtmCreationDate { get; set; }

    public int? IntUpdatedBy { get; set; }

    public DateTime DtmUpdationDate { get; set; }
}



using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;

public partial class BrokerSiteCredentials
{
    public int Id { get; set; }

    public int IntBrokerId { get; set; }

    public int IntSiteId { get; set; }

    public string? NvcWebSocketToken { get; set; }

    public string? NvcComment { get; set; }

    public int IsActive { get; set; }

    public int IsDelete { get; set; }
}


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace LoginSignupCore.Models;

public partial class BrokerSites
{
    public int Id { get; set; }
    [Required(ErrorMessage = "Please Enter Site Name")]
    public string NvcSiteName { get; set; } = null!;
    [Required(ErrorMessage = "Please Enter MasterFilePath Name")]
    public string NvcMasterFilePath { get; set; } = null!;

    public int IntBrokerId { get; set; }

    public int IsActive { get; set; }

    public int IsDeleted { get; set; }

    public int IntCreatedBy { get; set; }

    public DateTime? DtmCreationDate { get; set; }

    public int? IntUpdatedBy { get; set; }

    public DateTime? DtmUpdationDate { get; set; }
}



namespace LoginSignupCore.Models
{
    public class BrokerSitesModel
    {
        public int Id { get; set; }

        public string NvcSiteName { get; set; } = null!;
        public string NvcMasterFilePath { get; set; } = null!;

        public string BrokerName { get; set; } = null!;
        public int IntBrokerId { get; set; }

        public int IsActive { get; set; }

        public int IsDeleted { get; set; }

        public int IntCreatedBy { get; set; }

        public DateTime? DtmCreationDate { get; set; }

        public int? IntUpdatedBy { get; set; }

        public DateTime? DtmUpdationDate { get; set; }
    }
}



namespace LoginSignupCore.Models
{
    public class BrokerView
    {
        public List<BrokerMaster> brokers { get; set; } = new List<BrokerMaster>();

        public BrokerMaster broker { get; set; } = new BrokerMaster();
    }
}




using System.ComponentModel.DataAnnotations;

namespace LoginSignupCore.Models
{
    public class Component
    {
        public int Id { get; set; }
        public int AgentId { get; set; }
        public int BrokerId { get; set; }
        public int SiteId { get; set; }
        public string? ComponentName { get; set; }
        public string? AgentName { get; set; }
        public int ComponentType { get; set; }
        public int InstanceId { get; set; }
        [Required(ErrorMessage = "ExePath required")]
        public string ExePath { get; set; }
        public string? CmdParam { get; set; }
        public Boolean IsRunAsService { get; set; }
        public string ServiceName { get; set; }
        
        public int Priority { get; set; }
        public int IsActive { get; set; }

        public int IsDeleted { get; set; }

        public int IntCreatedBy { get; set; }

        public DateTime DtmCreationDate { get; set; }

        public int? IntUpdatedBy { get; set; }

        public DateTime DtmUpdationDate { get; set; }
        public string Remarks { get; set; }

        public List<ComponentDropDown> com { get; set; }    = new List<ComponentDropDown>();
    }
}


namespace LoginSignupCore.Models
{
    public class ComponentDropDown
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Priority { get; set; }
    }
}


using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LoginSignupCore.Models;

public partial class ComponentMaster
{
    public int Id { get; set; }

    public int IntComponentId { get; set; }

    [Required(ErrorMessage = "Please Component Name")]
    public string NvcComponentName { get; set; }
    [Required(ErrorMessage = "Please CpuThreshold required")]
    public double CpuThreshold { get; set; }

    [Required(ErrorMessage = "please RamThreshold required")]
    public double RamThreshold { get; set; }
    [Range(1,int.MaxValue,ErrorMessage = "Please set Priority | Can't be zero")]
    public int IntPriority { get; set; }
    public DateTime DtmCreatedOn { get; set; }

    public int? IntCreatedBy { get; set; }

    public DateTime? DtmUpdatedOn { get; set; }

    public int? IntUpdatedBy { get; set; }

    public int BitIsActive { get; set; }

    public int BitIsDelete { get; set; }
    
    public List<ComponentMaster> Components = new List<ComponentMaster>();
}



namespace LoginSignupCore.Models
{
    public class ComponentModel
    {
        public Component component { get; set; } = new Component();
        public List<ComponentDropDown> list { get; set; } = new List<ComponentDropDown>();
    }
}



using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models
{
    [Table("ComponentParameter")]
    public partial class ComponentParameter
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("ParamId")]
        public int ParamId { get; set; }

        [StringLength(3)]
        [Unicode(false)]
        public string ComponentId { get; set; }

        [StringLength(3)]
        [Unicode(false)]
        public string InstanceId { get; set; }

        [StringLength(64)]
        public string ParameterName { get; set; }

        [StringLength(256)]
        public string Remarks { get; set; }

        [Column("dtmCreatedOn", TypeName = "datetime")]
        public DateTime? DtmCreatedOn { get; set; }

        [Column("intCreatedBy")]
        public int IntCreatedBy { get; set; }

        [Column("dtmUpdatedOn", TypeName = "datetime")]
        public DateTime? DtmUpdatedOn { get; set; }

        [Column("intUpdatedBy")]
        public int IntUpdatedBy { get; set; }

        [Column("bitIsActive")]
        public int BitIsActive { get; set; }

        [Column("bitIsDelete")]
        public int BitIsDelete { get; set; }

        [Required]
        [Column("bitAttributeType")]
        public int BitAttributeType { get; set; }

        [Column("brokerSiteId")]
        public string BrokerSiteId { get; set; }

        //public string ParamIdForList { get { return ParamId + " - " + ParameterName; } }
    }
}



namespace LoginSignupCore.Models
{
    public class ComponentViewModel
    {
        public List<Component> Components { get; set; } = new List<Component>();
        public Component Component { get; set; } = new Component();
    }
}



using LoginSignupCore.Models.Response;

namespace LoginSignupCore.Models
{
    public class ComponentViewStatus
    {

        public int BrokerId;

        public int SiteId;
       // public ComponentStatus componentStatus { get; set; } = new ComponentStatus();
        public List<ComponentStatus> ComponentsStatus { get; set; } = new List<ComponentStatus>();
    }
}



using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;

public partial class CtclContext : DbContext
{
    public CtclContext(DbContextOptions<CtclContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BrokerSiteCredentials> BrokerSiteCredentials { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BrokerSiteCredentials>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IntBrokerId).HasColumnName("intBrokerId");
            entity.Property(e => e.IntSiteId).HasColumnName("intSiteId");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.NvcComment).HasColumnName("nvcComment");
            entity.Property(e => e.NvcWebSocketToken).HasColumnName("nvcWebSocketToken");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class CTCLTimer
{
    public int? TimerinMins { get; set; }
}



namespace LoginSignupCore.Models
{
    public class DictionaryOfTreeViewModl
    {
        public Dictionary<int, List<TreeViewNode>> MenuItem { get; set; }
        public Dictionary<int, string> BokerName { get; set; }
    }
}



namespace LoginSignupCore.Models
{
	public class ErrorViewModel
	{
		public string? RequestId { get; set; }

		public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
	}
}


namespace LoginSignupCore.Models
{
    public class FileDropDown
    {
        public int Id { get; set; }
        public string Name { get; set; }

    }
}



using CTCL.BinaryProtocol.Common.CTCL.Enum;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;

namespace LoginSignupCore.Models
{
    public class FileMaster
    {
        public int id { get; set; }
        public CTCL_ExchangeIdentifier SegmentId { get; set; }
        public int FileType { get; set; }
        [Required (ErrorMessage ="file is not find")]
        public string FileName { get; set; }
        public int Priority { get; set; }
        public bool UploadBeforeBod { get; set; }
        public string nvcDestinationPath { get; set; }
        public int isActive { get; set; }
        public int isDeleted { get; set; }
        public string Remarks { get; set; }
        public DateTime? IntCreatedOn { get; set; }
        public int IntCreatedBy { get; set; }

        public DateTime? UpdatedOn { get; set; }
        public int UpdatedBy { get; set; }
    }
}



using LoginSignupCore.Models.Response;

namespace LoginSignupCore.Models
{
    public class FileStatusView
    {
        public FileStatus file { get; set; } = new FileStatus();
        public List<FileStatus> fileStatus { get; set; } = new List<FileStatus>();
    }
}




namespace LoginSignupCore.Models
{
    public class FilesViewModel
    {
        public AgentwiseFiles file { get; set; } = new AgentwiseFiles();
        public List<FileDropDown> list { get; set; } = new List<FileDropDown>();
    }
}



namespace LoginSignupCore.Models
{
    public class FileViewModel
    {
        public List<FileMaster> files { get; set; }  = new List<FileMaster>();

        public FileMaster file { get; set; } = new FileMaster();
    }
}


using DotNetty.Transport.Channels;

namespace LoginSignupCore.Models
{
    public class globals
    {
        public static int User_ID;
        public static string Broker_Site = "Please Select";
        public static string Component_Name = "Please Select";
        public static int Component_ID;
        public static string componentname;
        public static string BrokerIdList;
        public static int BrokerId;
        public static string BrokerId_update;
        public static string Instance_id;
        public static string BrokerName;
        public static int IsActive;
        public static string Instance_Name = "Please Select";
        public static string Parameter_Name = "Please Select";
        public static int Timer = 0;
    }
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class InfoMaster
{
    public int IntInfoId { get; set; }

    public int IntBrokerId { get; set; }

    public int IntSiteId { get; set; }

    public int IntComponentId { get; set; }

    public int IntInstanceId { get; set; }

    public int IntParamId { get; set; }

    public DateTime DtmCreatedOn { get; set; }

    public int? IntCreatedBy { get; set; }

    public DateTime? DtmUpdatedOn { get; set; }

    public int? IntUpdatedBy { get; set; }

    public int BitIsActive { get; set; }

    public int BitIsDelete { get; set; }

    public int ParamAttribute { get; set; }

    public int BrokerSiteInstanceId { get; set; }

    public DateTime? DtmTimestamp { get; set; }
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class InfoStatistics
{
    public int IntInfoId { get; set; }

    public int IntBrokerId { get; set; }

    public int IntSiteId { get; set; }

    public int IntComponentId { get; set; }

    public int IntInstanceId { get; set; }

    public int IntParamId { get; set; }

    public string? NvcReference { get; set; }

    public string? NvcValue { get; set; }

    public DateTime DtmCreatedOn { get; set; }

    public int? IntCreatedBy { get; set; }

    public DateTime? DtmUpdatedOn { get; set; }

    public int? IntUpdatedBy { get; set; }

    public int BitIsActive { get; set; }

    public int BitIsDelete { get; set; }

    public DateTime? DtmTimeStamp { get; set; }
}


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;


[Table("InstanceMaster")]
public partial class InstanceMaster
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    [Column("intInstanceId")]
    public int IntInstanceId { get; set; }

    [Column("intComponentId")]
    public int IntComponentId { get; set; }

    [Column("nvcInstanceName")]
    [StringLength(64)]
    public string? NvcInstanceName { get; set; }

    [Column("nvcInstanceIP")]
    [StringLength(64)]
    public string? NvcInstanceIp { get; set; }

    [Column("intPort")]
    [StringLength(15)]
    public string? IntPort { get; set; }

    [Column("dtmCreatedOn")]
    public DateTime DtmCreatedOn { get; set; }

    [Column("intCreatedBy")]
    public int? IntCreatedBy { get; set; }

    [Column("dtmUpdatedOn")]
    public DateTime? DtmUpdatedOn { get; set; }

    [Column("intUpdatedBy")]
    public int? IntUpdatedBy { get; set; }

    [Column("bitIsActive")]
    public int BitIsActive { get; set; }

    [Column("bitIsDelete")]
    public int BitIsDelete { get; set; }

    [Column("dtmStartDate")]
    public DateTime DtmStartDate { get; set; }

    [Column("dtmEndDate")]
    public DateTime? DtmEndDate { get; set; }

    public int? VersionNo { get; set; }

    public int? CapacityWeightage { get; set; }

    [Column("nvcBrokerSiteId")]
    public string NvcBrokerSiteId { get; set; }
}



using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LoginSignupCore.Models
{
	public class RegisterViewModel
	{
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		public int Id { get; set; }
		[Required]
		public string firstName { get; set; }
		[Required] 
		public string lastName { get; set; }

		[Required]
		[EmailAddress]
		public string Email { get; set; }

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; }
        [Required]
        [DataType(DataType.Password)]
		[Compare("Password", ErrorMessage ="not match")]
        public string ConfirmPassword { get; set; }

	}
}



namespace LoginSignupCore.Models
{
    public class SiteViewModel
    {
        public List<BrokerSites> sites { get; set; }
        public string brokerName { get; set; }
    }
}

using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Response;

namespace LoginSignupCore.Models
{
    public class TechnicalInfo
    {
        public ComponentsTechnicalInfo technicalInfo { get; set; } = new ComponentsTechnicalInfo();
        public List<ComponentsTechnicalInfo> technicalInfos { get; set; } = new List<ComponentsTechnicalInfo>();
    }
}



using LoginSignupCore.MasterCache;

namespace LoginSignupCore.Models
{
    public class TechnicalInfoViewModel
    {
        public int BrokerId;
        public int SiteId;

        //public ComponentsTechnicalInfo Info { get; set; } = new ComponentsTechnicalInfo();
        public List<ComponentsTechnicalInfo> TechnicalInfos { get; set; } = new List<ComponentsTechnicalInfo>();
    }
}


namespace LoginSignupCore.Models
{
    public class TreeViewNode
    {
        public int id { get; set; } //brokerid
        public int cid { get; set; } //cityid
        public string parent { get; set; }
        public string text { get; set; }
    }
}


using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace LoginSignupCore.Models
{
    public class User
    {
        [DefaultValue (0)]
        public int Id { get; set; }

        [Required (ErrorMessage ="Please enter a valid email address")]
        [EmailAddress]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please enter a password")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        public bool KeepLoggedin { get; set; }
    }
}



using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;

public partial class UserloginCred
{
    [Key]
    [Column("id")]
    public int Id { get; set; }

    [Column("admin")]
    [StringLength(50)]
    public string Admin { get; set; } = null!;

    [Column("password")]
    [StringLength(50)]
    public string Password { get; set; } = null!;
}



using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;
[Keyless]
public partial class VwAlertThreshold
{
    public int Id { get; set; }

    public int IntParamId { get; set; }

    public int? IntComponentId { get; set; }

    public string? ComponentName { get; set; }

    public string? BrokerSiteName { get; set; }

    public string? BrokerSiteId { get; set; }

    public int IntThresholdValue { get; set; }

    public string? ParameterName { get; set; }

    public int? ParamId { get; set; }

    public int BitIsActive { get; set; }
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class VwComponentInstanceBrokerWiseData
{
    
    public string? Segment { get; set; }

    public int? Intcomponentid { get; set; }

    public string? NvccomponentName { get; set; }

    public int? IntinstanceId { get; set; }

    public string? NvcInstanceName { get; set; }

    public string? NvcInstanceIp { get; set; }

    public string? IntPort { get; set; }

    public string? BrokerName { get; set; }

    public string? VarBrokerId { get; set; }

    public int? IntTraderId { get; set; }

    public string? NvcGripAddress { get; set; }

    public string? NvcLocalIpaddress { get; set; }

    public int? IntGportNo { get; set; }

    public int? IntLocalPortNo { get; set; }

    public int? SmiBoxId { get; set; }

    public int? KeepAliveTimeout { get; set; }

    public int? LineThresholdThrottle { get; set; }
}


using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class VwComponentParameter
{
    public string? Intcomponentid { get; set; }

    public string? NvccomponentName { get; set; }

    public string? Intinstanceid { get; set; }

    public string? NvcInstanceName { get; set; }

    public string? BrokerSiteName { get; set; }

    public int VarBrokerId { get; set; }

    public int? ParamId { get; set; }

    public string? ParameterName { get; set; }

    public int? IntSiteId { get; set; }

    public string? NvcBrokerName { get; set; }

    public string? NvcSiteName { get; set; }

    public string? BrokerSiteId { get; set; }

    public int BitAttributeType { get; set; }

    public int BitIsActive { get; set; }

    public string? Remarks { get; set; }
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace LoginSignupCore.Models;
[Keyless]
public partial class VwInfoStatsData
{
    public string? Intcomponentid { get; set; }

    public string? NvccomponentName { get; set; }

    public string? Intinstanceid { get; set; }

    public string? NvcInstanceName { get; set; }

    public string? NvcInstanceIp { get; set; }

    public string? IntPort { get; set; }

    public string? BrokerName { get; set; }

    public int VarBrokerId { get; set; }

    public int? ParamId { get; set; }

    public string? ParameterName { get; set; }

    public string? NvcReference { get; set; }

    public string? NvcValue { get; set; }

    public int? IntSiteId { get; set; }

    public string? NvcSiteName { get; set; }

    public DateTime? DtmTimestamp { get; set; }
}




using Microsoft.EntityFrameworkCore;

namespace LoginSignupCore.Models;
[Keyless]
public partial class VwInstanceMaster
{
    public int IntInstanceId { get; set; }

    public int IntComponentId { get; set; }

    public string? NvcInstanceName { get; set; }

    public string? NvcInstanceIp { get; set; }

    public string? IntPort { get; set; }

    public DateTime DtmCreatedOn { get; set; }

    public int? IntCreatedBy { get; set; }

    public DateTime? DtmUpdatedOn { get; set; }

    public int? IntUpdatedBy { get; set; }

    public int? BitIsActive { get; set; }

    public int? BitIsDelete { get; set; }

    public DateTime DtmStartDate { get; set; }

    public DateTime? DtmEndDate { get; set; }

    public int? VersionNo { get; set; }

    public int? CapacityWeightage { get; set; }

    public string? NvcComponentName { get; set; }

    public string? NvcBrokerSiteId { get; set; }

    public string? NvcBrokerSiteName { get; set; }
}


//using ConsumerDBComponent.Common;
using CTCL.BinaryProtocol.Common.CMA.DBWrite.EntityModels;
using System.Data;
using System.Data.SqlClient;
using Response = BinaryProtocol.Common.Response;
using StatusCode = BinaryProtocol.Common.StatusCode;
using Log = LoginSignupCore.Global.Log;
using CTCL.BinaryProtocol.Common.CTCL.DBWrite.EntityModels;
using LoginSignupCore.Global;
//using InfoMaster = LoginSignupCore.Models.InfoMaster;

namespace LoginSignupCore.Processor
{
    public class CMA_InfoMasterMessageProcessor
    {
        private SqlConnection? PersistSqlConn;
        private SqlTransaction? tran;
        public Response processInfoMasterData(InfoMaster infoMasterMasterObj)
        {
            CTCL_CommonMasterAttributes cTCL_CommonMasterAttributes = new CTCL_CommonMasterAttributes();
            Response response = new Response();
            try
            {
                DataTable dt = new DataTable();
                // Adding Columns
                //
                DataColumn COLUMN = new DataColumn();
                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intBrokerId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSiteId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intComponentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intInstanceId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intParamId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "ParamAttribute";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "BrokerSiteInstanceId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intUpdatedBy";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmUpdatedOn";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmTimeSTamp";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                DataRow DR = dt.NewRow();
                DR[0] = infoMasterMasterObj.BrokerId.BrokerID;
                DR[1] = infoMasterMasterObj.SiteId.SiteId;
                DR[2] = infoMasterMasterObj.ComponentId.ComponentId;
                DR[3] = infoMasterMasterObj.InstanceId.InstanceID;
                DR[4] = infoMasterMasterObj.ParamId.ParamID;
                DR[5] = infoMasterMasterObj.ParamAttribute.ParamAttribute;
                DR[6] = infoMasterMasterObj.BrokerSiteInstanceId.BrokerSiteInstanceID;
                DR[7] = cTCL_CommonMasterAttributes.LastUpdatedBy.id;
                DR[8] = cTCL_CommonMasterAttributes.LastUpdatedTime.TimeStamp;
                //DR[9] = infoMasterMasterObj.dtmTimeStamp;
                dt.Rows.Add(DR);

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                {
                    PersistSqlConn = new SqlConnection(Config.connectionString);
                    PersistSqlConn.Open();
                }

                using (tran = PersistSqlConn.BeginTransaction(IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Config.connectionString))
                    {
                        using (SqlCommand cmd = new SqlCommand("[dbo].[usp_InfoMaster_insupd]"))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;
                            cmd.Parameters.AddWithValue("@InfoMaster", dt);
                            con.Open();
                            cmd.ExecuteNonQuery();
                            con.Close();
                        }
                    }
                    tran.Commit();
                }
                Log.Info(" Info Master data saved to Database ");
                return response.Set(StatusCode.Success, "Info Master Data uploaded Sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error(ex, " Info Master data couldn't save  to Database ");
                return response.Set(StatusCode.Failure, "Error Occured at Info Master Data Insert :" + ex.Message);
            }
        }

    }
}


using CTCL.BinaryProtocol.Common.CMA.DBWrite.EntityModels;
using CTCL.BinaryProtocol.Common.CTCL.DBWrite.EntityModels;
using System.Data;
using System.Data.SqlClient;
using Response = BinaryProtocol.Common.Response;
using StatusCode = BinaryProtocol.Common.StatusCode;
using Log = LoginSignupCore.Global.Log;
using LoginSignupCore.Global;

namespace LoginSignupCore.Processor
{
    public class CMA_InfoStatisticsMessageProcessor
    {
        CTCL_CommonMasterAttributes cTCL_CommonMasterAttributes = new CTCL_CommonMasterAttributes();

        private SqlConnection? PersistSqlConn;
        private SqlTransaction? tran;
        public Response processInfoStatisticsData(InfoStatistics infoMasterStatisticsObj)
        {
            Response response = new Response();
            try
            {
                DataTable dt = new DataTable();
                // Adding Columns
                //
                DataColumn COLUMN = new DataColumn();
                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intBrokerId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSiteId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intComponentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intInstanceId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intParamId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcReference";
                COLUMN.DataType = typeof(char);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcValue";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intUpdatedBy";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmUpdatedOn";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmTimeSTamp";
                COLUMN.DataType = typeof(long);
                dt.Columns.Add(COLUMN);

                DataRow DR = dt.NewRow();
                DR[0] = infoMasterStatisticsObj.BrokerId.BrokerID;
                DR[1] = infoMasterStatisticsObj.SiteId.SiteId;
                DR[2] = infoMasterStatisticsObj.ComponentId.ComponentId;
                DR[3] = infoMasterStatisticsObj.InstanceId.InstanceID;
                DR[4] = infoMasterStatisticsObj.ParamId.ParamID;
                DR[5] = infoMasterStatisticsObj.Reference.References;
                DR[6] = infoMasterStatisticsObj.nvcValue.Value;
                DR[7] = cTCL_CommonMasterAttributes.LastUpdatedBy.id;
                DR[8] = cTCL_CommonMasterAttributes.LastUpdatedTime.TimeStamp;
                DR[9] = infoMasterStatisticsObj.dtmTimeStamp;
                dt.Rows.Add(DR);

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                {
                    PersistSqlConn = new SqlConnection(Config.connectionString);
                    PersistSqlConn.Open();
                }

                using (tran = PersistSqlConn.BeginTransaction(IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Config.connectionString))
                    {
                        using (SqlCommand cmd = new SqlCommand("[dbo].[usp_InfoStatistics_insupd]"))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;
                            cmd.Parameters.AddWithValue("@InfoStatistics", dt);
                            con.Open();
                            cmd.ExecuteNonQuery();
                            con.Close();
                        }
                    }
                    tran.Commit();
                }
                Log.Info("Info Statistics data saved to Database ");
                return response.Set(StatusCode.Success, "Info Statistics Data uploaded Sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Info Statistics data couldn't save  to Database ");
                return response.Set(StatusCode.Failure, "Error Occured at Info Statistics Data Insert :" + ex.Message);
            }
        }

    }
}


using BinaryProtocol.Common;
using LoginSignupCore.Global;
using LoginSignupCore.Models.Response;
using System.Data;
using System.Data.SqlClient;

namespace LoginSignupCore.Processor
{
    public class ComponentStatusProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response ProcessComponentStatusData(ComponentStatus componentStatus)
        {
            Response response = new Response();
            try
            {
                DataTable dt = new DataTable();
                // Adding Columns
                //
                DataColumn COLUMN = new DataColumn();
                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intBrokerId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSiteId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intAgentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcRequestId";
                COLUMN.DataType = typeof(string);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intComponentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intInstanceId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intComponentState";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmUploadedOn";
                COLUMN.DataType = typeof(DateTime);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "bitIsSucessStatus";
                COLUMN.DataType = typeof(bool);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcRemarks";
                COLUMN.DataType = typeof(string);

                dt.Columns.Add(COLUMN);

                DataRow DR = dt.NewRow();
                DR[0] = componentStatus.BrokerId;
                DR[1] = componentStatus.SiteId;
                DR[2] = componentStatus.AgentId;
                DR[3] = componentStatus.RequestId;
                DR[4] = componentStatus.ComponentType;
                DR[5] = componentStatus.InstanceId;
                DR[6] = componentStatus.ComponentState;
                DR[7] = componentStatus.TimeStamp;
                DR[8] = componentStatus.IsSucessStatus;
                DR[9] = componentStatus.Message;
                dt.Rows.Add(DR);

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                {
                    PersistSqlConn = new SqlConnection(Config.connectionString);
                    PersistSqlConn.Open();
                }

                using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Config.connectionString))
                    {
                        using SqlCommand cmd = new SqlCommand("[dbo].[usp_ComponentStatus_ins]");
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        cmd.Parameters.AddWithValue("@ComponentStatus", dt);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        con.Close();
                    }
                    tran.Commit();
                }
                Log.Info("ComponentStatus data saved to Database ");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "ComponentStatus Data uploaded Sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "ComponentStatus data couldn't save  to Database ");
                return response.Set(StatusCode.Failure, "Error Occured at ComponentStatus Data Insert :" + ex.Message);
            }
        }
    }
}



using BinaryProtocol.Common;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using System.Data;
using System.Data.SqlClient;

namespace LoginSignupCore.Processor
{
    public class CompTechnicalInfoProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response ProcessComponentTechnicalInfoData(ComponentsTechnicalInfo compTechncialInfo)
        {
            Response response = new Response();
            try
            {
                DataTable dt = new DataTable();
                // Adding Columns
                //
                DataColumn COLUMN = new DataColumn();
                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intBrokerId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSiteId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intAgentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intComponentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intInstanceId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numRamUtilization";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numCpuUtilization";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numCpuHigh";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numCpuLow";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numRamHigh";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "numRamLow";
                COLUMN.DataType = typeof(double);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmUpdatedOn";
                COLUMN.DataType = typeof(string);

                dt.Columns.Add(COLUMN);

                DataRow DR = dt.NewRow();
                DR[0] = compTechncialInfo.BrokerId;
                DR[1] = compTechncialInfo.SiteId;
                DR[2] = compTechncialInfo.AgentId;
                DR[3] = compTechncialInfo.ComponentId;
                DR[4] = compTechncialInfo.InstanceId;
                DR[5] = compTechncialInfo.RAMUtilization;
                DR[6] = compTechncialInfo.CPUUtilization;
                DR[7] = compTechncialInfo.CPUHigh;
                DR[8] = compTechncialInfo.CPULow;
                DR[9] = compTechncialInfo.RAMHigh;
                DR[10] = compTechncialInfo.RAMLow;
                DR[11] = compTechncialInfo.Timestamp;
                dt.Rows.Add(DR);

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                {
                    PersistSqlConn = new SqlConnection(Config.connectionString);
                    PersistSqlConn.Open();
                }

                using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Config.connectionString))
                    {
                        using (SqlCommand cmd = new SqlCommand("[dbo].[usp_CompTechnicalInfo_ins]"))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;
                            cmd.Parameters.AddWithValue("@CompTechnicalInfo", dt);
                            con.Open();
                            cmd.ExecuteNonQuery();
                            con.Close();

                        }
                    }
                    tran.Commit();
                }
                Log.Info("CompTechnicalInfo data saved to Database ");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "CompTechnicalInfo Data uploaded Sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "CompTechnicalInfo data couldn't save  to Database ");
                return response.Set(StatusCode.Failure, "Error Occured at CompTechnicalInfo Data Insert :" + ex.Message);
            }
        }
    }
}



using CTCL.BinaryProtocol.Common.CTCL;
using System.Runtime.InteropServices;
using Response = BinaryProtocol.Common.Response;
using StatusCode = BinaryProtocol.Common.StatusCode;
using CTCL_OpCode = CTCL.BinaryProtocol.Common.CTCL.Enum.CTCL_OpCode;
using CMA_OpCode = CTCL.BinaryProtocol.Common.CMA.Enum.CMA_OpCode;
using CTCL.BinaryProtocol.Common.CMA.DBWrite.EntityModels;
using LoginSignupCore.Global;
using Utility;

namespace LoginSignupCore.Processor
{
    public class DataProcessor
    {
        Conversion conversion;
        CMA_InfoMasterMessageProcessor infoMasterMessageProcessor;
        CMA_InfoStatisticsMessageProcessor infoStatisticsMessageProcessor;

        public DataProcessor()
        {
            conversion = new Conversion();
            infoMasterMessageProcessor = new CMA_InfoMasterMessageProcessor();
            infoStatisticsMessageProcessor = new CMA_InfoStatisticsMessageProcessor();
        }

        public Response SourceComp_DataProcess(byte[] ValidPacket)
        {
            Response response = new Response();
            try
            {
                if (ValidPacket != null && ValidPacket.Length != 0)
                {
                    CTCL_MessageHeader msgOrderInfoObj1 = conversion.FromBytesToObject<CTCL_MessageHeader>(ValidPacket);
                    //var opcode = BitConverter.ToInt32(ValidPacket, 0);
                    Console.WriteLine($"{msgOrderInfoObj1.OpCode}");
                    switch (msgOrderInfoObj1.OpCode)
                    {
                        case (CTCL_OpCode)CMA_OpCode.INFO_MASTER_FOR_DB:
                            if (IsDataValid<InfoMaster>(ValidPacket))
                            {
                                InfoMaster entity = conversion.FromBytesToObject<InfoMaster>(ValidPacket);
                                response = infoMasterMessageProcessor.processInfoMasterData(entity);
                            }
                            else
                            {
                                response = response.Set(StatusCode.Failure, "Request Type & bytes of data doesn't match (Invalid data) OpCode ->" + msgOrderInfoObj1.OpCode.ToString(), null);
                            }
                            break;

                        case (CTCL_OpCode)CMA_OpCode.INFO_STATISTICS_FOR_DB:
                            if (IsDataValid<InfoStatistics>(ValidPacket))
                            {
                                InfoStatistics entity = conversion.FromBytesToObject<InfoStatistics>(ValidPacket);
                                response = infoStatisticsMessageProcessor.processInfoStatisticsData(entity);
                            }
                            else
                            {
                                response = response.Set(StatusCode.Failure, "Request Type & bytes of data doesn't match (Invalid data) OpCode ->" + msgOrderInfoObj1.OpCode.ToString(), null);
                            }
                            break;

                        default:
                            response = response.Set(StatusCode.Failure, "Request type is not valid transcode ->" + msgOrderInfoObj1.OpCode + DateTime.UtcNow, msgOrderInfoObj1.OpCode.ToString());
                            break;
                    }
                }
                else
                {
                    response = response.Set(StatusCode.Failure, "Invalid bytes of Data or Data is Null or byte Array is empty. DateTime->" + DateTime.UtcNow);
                }
                return response;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "exception in coreprocess dataprocess");
            }
            return response;
        }

        private bool IsDataValid<T>(byte[] data)
        {
            int size = Marshal.SizeOf<T>();
            int sizeOfArray = data.Length;
            Log.Debug(null, "Bytelength: " + sizeOfArray);
            Log.Debug(null, "Structlength: " + size);
            return sizeOfArray == size;
        }


    }
}


using Utility.Queueing;
using BinaryProtocol.Common;
using LoginSignupCore.Models.Others;
using Newtonsoft.Json;
using CTCL.BinaryProtocol.Common.CMA.Enum;
using LoginSignupCore.Models.Response;
using LoginSignupCore.Global;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Core;
using Org.BouncyCastle.Ocsp;
using LoginSignupCore.Models.Request;

namespace LoginSignupCore.Processor
{
	public class DBProcessor
	{
		private ProcessQueue<string> processQueue;
		Thread thread;
		FileStatusProcessor fileStatusProcessor;
        ComponentStatusProcessor componentStatusProcessor;
        CompTechnicalInfoProcessor compTechnicalInfoProcessor;
		ManualResetEvent _mre;
        Thread techInfoThread;

        public DBProcessor()
		{
			fileStatusProcessor = new();
			componentStatusProcessor = new();
			compTechnicalInfoProcessor = new();
			_mre= new ManualResetEvent(false);
            processQueue = new();
            DrainerThreadInit();
   //         techInfoThread = new(new ThreadStart(ProcessCompTechMre));
			//techInfoThread.Start();
        }

		private void DrainerThreadInit()
		{
			thread = new Thread(new ThreadStart(DrainerMethod));
			thread.Start();
		}
		public Response Enqueue(string message)
		{
			return processQueue.Enqueue(message);	
		}
		private void DrainerMethod()
		{
			while (true)
			{
				if (processQueue.TryDequeue(out string message))
				{
					try
					{
						ProcessMessage(message);
					}
					catch (Exception ex)
					{
						Log.Error($"Error while DrainerMethod in DbProcessor | {ex.Message}");
					}
				}
			}
		}
		private void ProcessMessage(string message)
		{
            var baseResponse = JsonConvert.DeserializeObject<MsgHeader>(message);
            if (baseResponse != null)
			{
                var opcode = (CMA_OpCode)baseResponse.MessageCode;
                switch (opcode)
				{
                    case CMA_OpCode.COMPONENT_STATE_UPDATE:
                        {
                            var compStatus = JsonConvert.DeserializeObject<ComponentStatus>(message);
                            if (compStatus != null)
                            {
								componentStatusProcessor.ProcessComponentStatusData(compStatus);
                            }
                            else
                            {
                                Log.Error($"Error while writing COMPONENT_STATE_UPDATE in db");
                            }
                        }
                        break;

                    case CMA_OpCode.FILE_UPLOAD_CONFIRMATION:
                        {
                            var fileStatus = JsonConvert.DeserializeObject<FileStatus>(message);
                            if (fileStatus != null)
                            {
								fileStatusProcessor.ProcessFileStatusData(fileStatus);
                            }
                            else
                            {
                                Log.Error($"Error while writing FILE_UPLOAD_CONFIRMATION in db");
                            }
                        }
                        break;

                    case CMA_OpCode.CMA_TECHNICAL_PARAM_REQ:
                        {
                            var techInfo = JsonConvert.DeserializeObject<ComponentTechincalInfo>(message);
                            if (techInfo != null)
                            {
                                var resp = IsWriteInDb(techInfo);
                                if (resp.Item1)
                                {
                                    var info = CoreProcess.agentSessionCache.GetTechnicalInfo(resp.Item2);
                                    if(info.Item1 && info.Item2 != null)
                                    {
                                        //info.Item2.Timestamp = DateTime.Now.Date;
                                        compTechnicalInfoProcessor.ProcessComponentTechnicalInfoData(info.Item2);
                                    }
                                }
                            }
                            else
                            {
                                Log.Error($"Error while writing CMA_TECHNICAL_PARAM_REQ in db");
                            }
                        }
                        break;

                    default:
                        break;
                }

            }

        }

        private (bool, CompInitReq) IsWriteInDb(ComponentTechincalInfo componentsTechnicalInfo)
        {
            CompInitReq compInitReq = new()
            {
                AgentId = componentsTechnicalInfo.AgentId,
                BrokerId = componentsTechnicalInfo.BrokerId,
                SiteId = componentsTechnicalInfo.SiteId,
                CompId = componentsTechnicalInfo.ComponentType,
                InstanceId = componentsTechnicalInfo.InstanceId
            };

            var res = CoreProcess.agentSessionCache.GetComponentMaster(compInitReq);
            if(res.Item1 && res.Item2 != null)
            {
                double cpuThreshold = res.Item2.CpuThresholdLimit;
                double ramThreshold = res.Item2.RamThresholdLimit;

                if (cpuThreshold <= componentsTechnicalInfo.CPUPercentage || ramThreshold <= componentsTechnicalInfo.RAMUsage)
                    return (true, compInitReq);
            }
            return (false, compInitReq);
        }
        //private void ProcessCompTechMre()
        //{
        //	while(true)
        //	{
        //		_mre.WaitOne(60000);
        //		List<ComponentsTechnicalInfo> list = CoreProcess.agentSessionCache.GetTechnicalInfo();
        //		foreach(var item in list)
        //      {
        //			ProcessComponentTechnicalInfo(item);
        //      }
        //	}
        //}
        //      private void ProcessComponentTechnicalInfo(ComponentsTechnicalInfo componentsTechnicalInfo)
        //{
        //          compTechnicalInfoProcessor.ProcessComponentTechnicalInfoData(componentsTechnicalInfo);
        //      }
    }
}




using BinaryProtocol.Common;
using LoginSignupCore.Global;
using LoginSignupCore.Models.Response;
using System.Data;
using System.Data.SqlClient;

namespace LoginSignupCore.Processor
{
    public class FileStatusProcessor
    {
        private SqlConnection PersistSqlConn;
        private SqlTransaction tran;

        public Response ProcessFileStatusData(FileStatus fileStatus)
        {
            Response response = new Response();
            try
            {
                DataTable dt = new DataTable();
                // Adding Columns
                //
                DataColumn COLUMN = new DataColumn();
                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intBrokerId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSiteId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intAgentId";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intFileType";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "intSegment";
                COLUMN.DataType = typeof(int);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcFileName";
                COLUMN.DataType = typeof(string);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "dtmUploadedOn";
                COLUMN.DataType = typeof(DateTime);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "bitIsSucessStatus";
                COLUMN.DataType = typeof(bool);
                dt.Columns.Add(COLUMN);

                COLUMN = new DataColumn();
                COLUMN.ColumnName = "nvcRemarks";
                COLUMN.DataType = typeof(string);

                dt.Columns.Add(COLUMN);

                DataRow DR = dt.NewRow();
                DR[0] = fileStatus.BrokerId;
                DR[1] = fileStatus.SiteId;
                DR[2] = fileStatus.AgentId;
                DR[3] = fileStatus.FileType;
                DR[4] = fileStatus.Segment;
                DR[5] = fileStatus.FileName;
                DR[6] = fileStatus.TimeStamp;
                DR[7] = fileStatus.IsSucessStatus;
                DR[8] = fileStatus.Message;
                dt.Rows.Add(DR);

                if (PersistSqlConn == null || PersistSqlConn.State != ConnectionState.Open)
                {
                    PersistSqlConn = new SqlConnection(Config.connectionString);
                    PersistSqlConn.Open();
                }

                using (tran = PersistSqlConn.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
                {
                    using (SqlConnection con = new SqlConnection(Config.connectionString))
                    {
                        using SqlCommand cmd = new SqlCommand("[dbo].[usp_FileStatus_ins]");
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        cmd.Parameters.AddWithValue("@FileStatus", dt);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        con.Close();
                    }
                    tran.Commit();
                }
                Log.Info("FileStatus data saved to Database ");
                return response.Set((BinaryProtocol.Common.StatusCode)StatusCode.Success, "FileStatus Data uploaded Sucessfully");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "FileStatus data couldn't save  to Database ");
                return response.Set(StatusCode.Failure, "Error Occured at FileStatus Data Insert :" + ex.Message);
            }
        }
    }
}



using BinaryProtocol.Common;
using Exchange.Logs;
using LoginSignupCore.Core;
using Serilog.Events;
using System.Text;
using Utility.Queueing;

namespace LoginSignupCore.Processor

{
    public class LogProcessor
    {
        private ProcessQueue<LogObject> logQueue;
        private Thread thread;
        private LogManager logManager;
        private StringBuilder logMsg;
        public LogProcessor(LogConfiguration logConfiguration)
        {
            logMsg = new StringBuilder();
            logManager = new LogManager(logConfiguration);
            logQueue = new ProcessQueue<LogObject>();
            thread = new Thread(new ThreadStart(ListenQueue));
            thread.Start();
        }
        public Response Enqueue(LogObject data)
        {
            return logQueue.Enqueue(data);
        }
        private void ListenQueue()
        {
            while (true)
            {
                if (logQueue.TryDequeue(out LogObject data))
                {
                    LogDataProcess(data);
                }
                data.Object = null;
                data.Message = null;
            }

        }

        private void LogDataProcess(LogObject data)
        {
            LogObject logObject = data;

            logMsg.Clear();
            logMsg.Append("Msg: " + data.Message);

            if (logObject.Object != null)
            {
                logMsg.Append(", Object: " + Helper.SerializeObject(logObject.Object));
            }

            try
            {
                switch (logObject.LogType)
                {
                    case LogType.Verbose:
                        logManager.Verbose(logMsg.ToString());
                        break;
                    case LogType.Debug:
                        logManager.Debug(logMsg.ToString());
                        break;
                    case LogType.Error:
                        logManager.Error(logMsg.ToString());
                        break;
                    case LogType.Info:
                        logManager.Info(logMsg.ToString());
                        break;
                    case LogType.Warning:
                        logManager.Warning(logMsg.ToString());
                        break;
                    case LogType.Fatal:
                        logManager.Error(logMsg.ToString());
                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {
                logManager.Error(ex, "Msg: Error in log, Object: ");
            }
            finally
            {
                logObject.Message = null;
                logObject.Object = null;
                logMsg.Clear();
            }
        }

        public void ChangeLogType(LogEventLevel loglevel)
        {
            logManager.ChangeLogLevel(loglevel);
        }
    }
}



using LoginSignupCore.Models;

namespace LoginSignupCore.ViewModels
{
    public class CommonViewModel
    {
        //public ComponentParameter ComponentParameter { get; set; }
        //public AlertThreshold AlertThreshold { get; set; }
        public VwComponentInstanceBrokerWiseData VwComponentInstanceBrokerWiseData { get; set; }
        //public globals globals { get; set; }
    }
}



namespace LoginSignupCore
{

        using Microsoft.Extensions.Configuration;
        using System;

        public static class AppSettingHelper
        {
            static AppSettingHelper()
            {
                Configuration = new ConfigurationBuilder()
                 .SetBasePath(ProcessDirectory)
                 .AddJsonFile("appsettings.json")
                 .Build();
            }

            public static string ProcessDirectory
            {
                get
                {
                    return AppDomain.CurrentDomain.BaseDirectory;
                }
            }

            public static IConfigurationRoot Configuration { get; }
        }
    }



{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    //"DBCTCL": "Data Source=10-100-1-57;Initial Catalog=CTCL;Integrated Security=SSPI;Persist Security Info=True;TrustServerCertificate=True;MultipleActiveResultSets=True"
    "DBCTCL": "Data Source=10.100.1.57; Initial Catalog=CTCL; User Id=sa; Password=Sa@123; TrustServerCertificate=True"
  },
  "LogFile": "C:\\Logs\\AgentWorkerLogs\\AgentWorker.log",
  "AgentIpAddress": "localhost",
  "Port": 8888,
  "PrefetchCount": 0,
  "LogLevel": "0",
  "LogFileCount": "1",
  "ServerIP": "10.100.1.101",
  "ServerPort": "5556",
  "DBTimeOut": "180"
}




using LoginSignupCore.Data;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.EntityFrameworkCore;
using LoginSignupCore;
using LoginSignupCore.Global;
using LoginSignupCore.Core;

var builder = WebApplication.CreateBuilder(args);
new exitHook();
// Add services to the container.
builder.Services.AddHostedService<Worker>(services => new Worker());
builder.Services.AddSingleton<IHostLifetime, NoopConsoleLifetime>();
builder.Services.AddControllersWithViews();
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
	options.IdleTimeout = TimeSpan.FromMinutes(20);
});

builder.Services.AddSession(options=>
{
	options.IOTimeout= TimeSpan.FromMinutes(30);
	options.Cookie.HttpOnly= true;
	options.Cookie.IsEssential= true;
});
builder.Services.AddAuthentication(
	CookieAuthenticationDefaults.AuthenticationScheme)
	.AddCookie(option => {
		option.LoginPath = "/Account/Login"; 
		option.ExpireTimeSpan = TimeSpan.FromMinutes(20);
	});

builder.Services.AddDbContext<ApplicatonDBContext>(
	options => { options.UseSqlServer(Config.connectionString); }
	);
var app = builder.Build();

app.UseSession();


// Configure the HTTP request pipeline.
//if (!app.Environment.IsDevelopment())
//{
	//app.UseExceptionHandler("/Home/Error");
	//// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
	//app.UseHsts();
//}

//app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
	name: "default",
	pattern: "{controller=Account}/{action=Login}/{id?}");

Config.GetConfigurationSettings();
app.Urls.Add(Config.AppUrl);
app.Run();





using CTCL.Utility;
using LoginSignupCore.Core;

namespace LoginSignupCore
{
    public class Worker : BackgroundService
    {
        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            await CoreProcess.Initialize();
            new ConsoleHelper();
        }

        /// <summary>
        /// Executes when the service is ready to start.
        /// </summary>
        /// <param name="cancellationToken"><see cref="CancellationToken"/></param>
        /// <returns><see cref="Task"/></returns>
        public override Task StartAsync(CancellationToken cancellationToken)
        {
            return base.StartAsync(cancellationToken);
        }
    }
    public class NoopConsoleLifetime : IHostLifetime, IDisposable
    {
        private readonly ILogger<NoopConsoleLifetime> _logger;

        public NoopConsoleLifetime(ILogger<NoopConsoleLifetime> logger)
        {
            _logger = logger;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }

        public Task WaitForStartAsync(CancellationToken cancellationToken)
        {
            Console.CancelKeyPress += OnCancelKeyPressed;
            return Task.CompletedTask;
        }

        private void OnCancelKeyPressed(object? sender, ConsoleCancelEventArgs e)
        {
            _logger.LogInformation("Ctrl+C has been pressed, ignoring.");
            e.Cancel = true;
        }

        public void Dispose()
        {
            Console.CancelKeyPress -= OnCancelKeyPressed;
        }
    }
    public class ConsoleHelper : exitHook
    {
        public ConsoleHelper()
        {
            new Thread(Process).Start();
        }

        private void Process()
        {
            while (true)
            {
                Console.WriteLine("Enter Your Choice");
                var choice = GetChoice();
                switch (choice)
                {
                    case -1:
                        exitHookInit();
                        break;
                    default:
                        Console.WriteLine("Wrong Choice");
                        break;
                }
            }
        }

        private int GetChoice()
        {
            try
            {
                var res = Convert.ToInt32(Console.ReadLine());
                return res;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Plz enter a number only");
                return GetChoice();
            }
        }
        private void exitHookInit()
        {
            string strExitconfirm;
            Console.WriteLine("Are you sure you want to exit y/n ");
            strExitconfirm = Console.ReadLine();
            if (strExitconfirm?.ToLower() == "y")
            {
                Environment.Exit(0);
            }
            else
            {
                // ask();
            }
        }
    }
}


using BinaryProtocol.Common;
using LoginSignupCore.Core;
using LoginSignupCore.MasterCache;
using LoginSignupCore.Models.Response;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Logging;
using System.Data;
using System.Security.Policy;

namespace LoginSignupCore.Global
{
    public static class CacheOnLoad
    {
        public static void LoadAllCacheData()
        {
            GetAgentMasterData();
            GetAgentWiseComponentMasterData();
            GetAgentWiseFileInfoMasterData();
            GetSiteWiseMasterData();
            GetComponentStatus();
            GetFileStatus();
            GetCompTechnicalInfo();
        }

        public static Response GetAgentMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentMaster");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Master Info not loaded.");
            }
            FillAgentMasterInfoData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Master Info loaded.");
        }
        private static Response FillAgentMasterInfoData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    AgentSessionInfo agentSessionInfo = new();
                    agentSessionInfo.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    agentSessionInfo.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    agentSessionInfo.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    agentSessionInfo.IP = dr["nvcInstanceIP"] == DBNull.Value ? "" : dr["nvcInstanceIP"].ToString();
                    agentSessionInfo.AgentName = dr["nvcAgentName"] == DBNull.Value ? "" : dr["nvcAgentName"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(agentSessionInfo);
                    CoreProcess.ipSessionCache.AddOrUpdate(agentSessionInfo);
                }
                return response.Set(StatusCode.Success, "Agent Master Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while fillingAgent Master Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Master Info Dictionary.");
            }
        }

        public static Response GetAgentWiseComponentMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentMasterWiseComponents");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Wise ComponentMaster Info not loaded.");
            }
            FillAgentWiseComponentMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Wise ComponentMaster Info loaded.");
        }
        private static Response FillAgentWiseComponentMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentMaster compMaster = new();
                    compMaster.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    compMaster.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    compMaster.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    compMaster.ComponentId = Convert.ToInt32(dr["intComponentType"] == DBNull.Value ? 0 : dr["intComponentType"]);
                    compMaster.InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]);
                    compMaster.ExePath = dr["nvcExePath"] == DBNull.Value ? "" : dr["nvcExePath"].ToString();
                    compMaster.CmdParam = dr["nvcCmdParam"] == DBNull.Value ? "" : dr["nvcCmdParam"].ToString();
                    compMaster.IsRunAsService = Convert.ToBoolean(dr["bitIsRunAsService"] == DBNull.Value ? 0 : dr["bitIsRunAsService"]);
                    compMaster.ServiceName = dr["nvcServiceName"] == DBNull.Value ? "" : dr["nvcServiceName"].ToString();
                    compMaster.Priority = Convert.ToInt32(dr["intPriority"] == DBNull.Value ? 0 : dr["intPriority"]);
                    compMaster.CpuThresholdLimit = Convert.ToDouble(dr["numCpuThreshold"] == DBNull.Value ? 0 : dr["numCpuThreshold"]);
                    compMaster.RamThresholdLimit = Convert.ToDouble(dr["numRamThreshold"] == DBNull.Value ? 0 : dr["numRamThreshold"]);
                    compMaster.ComponentName = dr["nvcComponentName"] == DBNull.Value ? "" : dr["nvcComponentName"].ToString();
                    compMaster.AgentName = dr["nvcAgentName"] == DBNull.Value ? "" : dr["nvcAgentName"].ToString();
                    compMaster.IsActive = Convert.ToBoolean(dr["IsActive"] == DBNull.Value ? 0 : dr["IsActive"]);
                    compMaster.IsDelete = Convert.ToBoolean(dr["IsDeleted"] == DBNull.Value ? 0 : dr["IsDeleted"]);
                    CoreProcess.agentSessionCache.AddOrUpdate(compMaster);
                }
                return response.Set(StatusCode.Success, "Agent Wise Component Master Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Agent Wise ComponentMaster Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Wise Component Master Info Dictionary.");
            }
        }

        public static Response GetAgentWiseFileInfoMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetAgentToFileMappingMaster");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Agent Wise File Info Master not loaded.");
            }
            FillAgentWiseFileInfoMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Agent Wise File Info Master Info loaded.");
        }
        private static Response FillAgentWiseFileInfoMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    FileMasterInfo fileMasterInfo = new();
                    fileMasterInfo.AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]);
                    fileMasterInfo.BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    fileMasterInfo.SiteId = Convert.ToInt32(dr["intBrokerSiteId"] == DBNull.Value ? 0 : dr["intBrokerSiteId"]);
                    fileMasterInfo.SegmentId = Convert.ToInt32(dr["intSegmentId"] == DBNull.Value ? 0 : dr["intSegmentId"]);
                    fileMasterInfo.FileType = Convert.ToInt32(dr["intFileType"] == DBNull.Value ? 0 : dr["intFileType"]);
                    fileMasterInfo.FileName = dr["nvcFileName"] == DBNull.Value ? "" : dr["nvcFileName"].ToString();
                    fileMasterInfo.Priority = Convert.ToInt32(dr["intPriority"] == DBNull.Value ? "" : dr["intPriority"]);
                    fileMasterInfo.IsUploadBeforeBOD = Convert.ToBoolean(dr["isUploadBeforeBod"] == DBNull.Value ? 0 : dr["isUploadBeforeBod"]);
                    fileMasterInfo.DestinationPath = dr["nvcDestinationPath"] == DBNull.Value ? "" : dr["nvcDestinationPath"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(fileMasterInfo);
                }
                return response.Set(StatusCode.Success, "Agent Wise File Info Master filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Agent Wise FileInfo Master cache");
                return response.Set(StatusCode.Failure, "Failed to fill Agent Wise File Info Master Dictionary.");
            }
        }

        public static Response GetSiteWiseMasterData()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetBrokerSites");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Site Wise Master Path not loaded.");
            }
            FillSiteWiseMasterData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Site Wise Master Path Info loaded.");
        }
        private static Response FillSiteWiseMasterData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    int siteId = Convert.ToInt32(dr["id"] == DBNull.Value ? 0 : dr["id"]);
                    int brokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]);
                    string masterPath = dr["nvcMasterFilePath"] == DBNull.Value ? "" : dr["nvcMasterFilePath"].ToString();

                    CoreProcess.agentSessionCache.AddOrUpdate(brokerId, siteId, masterPath);
                }
                return response.Set(StatusCode.Success, "Site Wise Master Path filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Site Wise Master Path cache");
                return response.Set(StatusCode.Failure, "Failed to fill Site Wise Master Path Dictionary.");
            }
        }

        public static Response GetComponentStatus()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetComponentStatus");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Component Status not loaded.");
            }
            FillComponentStatusData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Component Status Info loaded.");
        }
        private static Response FillComponentStatusData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentStatus componentStatus = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        ComponentType = Convert.ToInt32(dr["intComponentId"] == DBNull.Value ? 0 : dr["intComponentId"]),
                        InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]),
                        ComponentState = Convert.ToInt32(dr["intComponentState"] == DBNull.Value ? 0 : dr["intComponentState"]),
                        TimeStamp = Convert.ToDateTime(dr["dtmUploadedOn"] == DBNull.Value ? 0 : dr["dtmUploadedOn"]),
                        IsSucessStatus = Convert.ToBoolean(dr["bitIsSucessStatus"] == DBNull.Value ? 0 : dr["bitIsSucessStatus"]),
                        Message = dr["nvcRemarks"] == DBNull.Value ? "" : dr["nvcRemarks"].ToString(),
                        RequestId = dr["nvcRequestId"] == DBNull.Value ? "" : dr["nvcRequestId"].ToString()
                    };

                    CoreProcess.agentSessionCache.AddOrUpdate(componentStatus);

                    char[] incrementingNumber = new char[14];
                    char[] Id = componentStatus.RequestId?.ToCharArray();

                    if(Id != null && Id.Length == 32)
                    {
                        Array.Copy(Id, 18, incrementingNumber, 0, incrementingNumber.Length);

                        string strId = new(incrementingNumber);
                        long nId = 0;

                        if (long.TryParse(strId, out long nGatewayONO1) && incrementingNumber.Length > 0)
                        {
                            nId = Convert.ToInt64(strId);
                        }

                        if (Config.Id < nId)
                        {
                            Config.Id = nId;
                        }
                    }
                }
                return response.Set(StatusCode.Success, "Component Status filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Component Status cache");
                return response.Set(StatusCode.Failure, "Failed to fill Component Status Dictionary.");
            }
        }

        public static Response GetFileStatus()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetFileStatus");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "File Status not loaded.");
            }
            FillFileStatusData(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "File Status Info loaded.");
        }
        private static Response FillFileStatusData(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    FileStatus fileStatus = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        FileType = Convert.ToInt32(dr["intFileType"] == DBNull.Value ? 0 : dr["intFileType"]),
                        Segment = Convert.ToInt32(dr["intSegment"] == DBNull.Value ? 0 : dr["intSegment"]),
                        FileName = dr["nvcFileName"] == DBNull.Value ? "" : dr["nvcFileName"].ToString(),
                        TimeStamp = Convert.ToDateTime(dr["dtmUploadedOn"] == DBNull.Value ? 0 : dr["dtmUploadedOn"]),
                        IsSucessStatus = Convert.ToBoolean(dr["bitIsSucessStatus"] == DBNull.Value ? 0 : dr["bitIsSucessStatus"]),
                        Message = dr["nvcRemarks"] == DBNull.Value ? "" : dr["nvcRemarks"].ToString()
                    };

                    CoreProcess.agentSessionCache.AddOrUpdate(fileStatus);
                }
                return response.Set(StatusCode.Success, "File Status filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling File Status cache");
                return response.Set(StatusCode.Failure, "Failed to fill File Status Dictionary.");
            }
        }

        public static Response GetCompTechnicalInfo()
        {
            Response response = new Response();
            DataSet ds;
            ds = CommonHelper.ExecuteProcedureForDataSet("usp_GetCompTechnicalInfo");
            if (ds == null)
            {
                return response.Set(StatusCode.OMS_Error, "Comp Technical Info not loaded.");
            }
            FillCompTechnicalInfo(ds.Tables[0]);
            return response.Set(StatusCode.OMS_Success, "Comp Technical Info loaded.");
        }
        private static Response FillCompTechnicalInfo(DataTable dataTable)
        {
            Response response = new Response();
            try
            {
                foreach (DataRow dr in dataTable.Rows)
                {
                    ComponentsTechnicalInfo componentsTechnicalInfo = new()
                    {
                        AgentId = Convert.ToInt32(dr["intAgentId"] == DBNull.Value ? 0 : dr["intAgentId"]),
                        BrokerId = Convert.ToInt32(dr["intBrokerId"] == DBNull.Value ? 0 : dr["intBrokerId"]),
                        SiteId = Convert.ToInt32(dr["intSiteId"] == DBNull.Value ? 0 : dr["intSiteId"]),
                        ComponentId = Convert.ToInt32(dr["intComponentId"] == DBNull.Value ? 0 : dr["intComponentId"]),
                        InstanceId = Convert.ToInt32(dr["intInstanceId"] == DBNull.Value ? 0 : dr["intInstanceId"]),
                        RAMUtilization = Convert.ToDouble(dr["numRamUtilization"] == DBNull.Value ? 0 : dr["numRamUtilization"]),
                        CPUUtilization = Convert.ToDouble(dr["numCpuUtilization"] == DBNull.Value ? 0 : dr["numCpuUtilization"]),
                        CPUHigh = Convert.ToDouble(dr["numCpuHigh"] == DBNull.Value ? 0 : dr["numCpuHigh"]),
                        CPULow = Convert.ToDouble(dr["numCpuLow"] == DBNull.Value ? 0 : dr["numCpuLow"]),
                        RAMHigh = Convert.ToDouble(dr["numRamHigh"] == DBNull.Value ? 0 : dr["numRamHigh"]),
                        RAMLow = Convert.ToDouble(dr["numRamLow"] == DBNull.Value ? 0 : dr["numRamLow"]),
                        Timestamp =(dr["dtmUpdatedOn"] == DBNull.Value ? "": dr["dtmUpdatedOn"]).ToString(),
                       
                    };
                    componentsTechnicalInfo.ComponentName = ((ComponentType)componentsTechnicalInfo.ComponentId).ToString();
                    componentsTechnicalInfo.AgentName =  CoreProcess.agentSessionCache.GetSession(componentsTechnicalInfo.BrokerId, componentsTechnicalInfo.SiteId, componentsTechnicalInfo.AgentId).Item2?.AgentName??string.Empty;

                    CoreProcess.agentSessionCache.AddOrUpdate(componentsTechnicalInfo);
                }
                return response.Set(StatusCode.Success, "Comp Technical Info filled successfully.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Exception occured while filling Comp Technical Info cache");
                return response.Set(StatusCode.Failure, "Failed to fill Comp Technical Info Dictionary.");
            }
        }
    }
}
